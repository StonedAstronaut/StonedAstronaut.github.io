<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Astro blog</title><link href="https://stonedastronaut.github.io/" rel="alternate"></link><link href="https://stonedastronaut.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://stonedastronaut.github.io/</id><updated>2015-08-19T00:47:00+06:00</updated><entry><title>Декораторы в Python</title><link href="https://stonedastronaut.github.io/dekoratory-v-python.html" rel="alternate"></link><updated>2015-08-19T00:47:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-08-19:dekoratory-v-python.html</id><summary type="html">&lt;p&gt;Никакой волшебно новой информации здесь не будет, скорее это самому себе объяснение, что за зверь такой декораторы в python.&lt;/p&gt;
&lt;p&gt;Т.к. в pyhton ф-ии являются объектами, то к ним можно применить шаблон проектирования &lt;a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29"&gt;декоратор&lt;/a&gt;. Сам шаблон я на момент написания этих строк не разбирал, посему тут может быть не совсем корректная информация о том насколько правильно реализуется данный шаблон в случае ф-ий языка python.&lt;/p&gt;
&lt;p&gt;Итак. Декоратор - это возможность расширения ф-нала имеющейся ф-ии(объекта). Получается что-то типа наследования, но без создания новой сущности. Для реализации декораторов необходимо написать сам декоратор, это ф-ия которая принимает в качестве параметра другую ф-ю(именно её адрес, а не её вызов) и оборачивает её како-либо логикой. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c"&gt;# делаем что-то перед вызовом оборачиваемой ф-ии&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# вызываем оборачиваемую ф-ю&lt;/span&gt;
        &lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;# делаем что-то после вызова обернутой ф-ии&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Я не изменюсь, но меня можно обернуть&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;теперь обернем just_func&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;

&lt;span class="c"&gt;# before&lt;/span&gt;
&lt;span class="c"&gt;# Я не изменюсь, но меня можно обернуть&lt;/span&gt;
&lt;span class="c"&gt;# after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можно подобному вызову ф-ии присовить имя:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;just_func_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И при вызове &lt;code&gt;just_func_wrapped&lt;/code&gt; получим тоже самое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;just_func_wrapped&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# before&lt;/span&gt;
&lt;span class="c"&gt;# Я не изменюсь, но меня можно обернуть&lt;/span&gt;
&lt;span class="c"&gt;# after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Мы почти добрались до сути. Собственно как это можно было записать при помощи синтаксиса декораторов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Я обернутая ф-я&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И вызвав &lt;code&gt;just_func&lt;/code&gt; получим:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# before&lt;/span&gt;
&lt;span class="c"&gt;# Я обернутая ф-я&lt;/span&gt;
&lt;span class="c"&gt;# after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Т.е. синтаксис декоторов это синтаксический сахар заменяющий такую конструкцию:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;just_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# равносильно такой записи&lt;/span&gt;
&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Передача аргументов внутрь обертки&lt;/h2&gt;
&lt;p&gt;Также можно, а точнее это и нужно, передавать агрументы внутрь ф-ии декоратора, оборачиваемой ф-ии.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Я получил внутрь аргументы &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# вызываем ф-ию с аргументами&lt;/span&gt;
        &lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Привет&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Мир&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# before&lt;/span&gt;
&lt;span class="c"&gt;# Я получил внутрь аргументы Привет Мир&lt;/span&gt;
&lt;span class="c"&gt;# Привет Мир&lt;/span&gt;
&lt;span class="c"&gt;# after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Декор методов в классах&lt;/h2&gt;
&lt;p&gt;Всё то же самое за исключением, что метод отличается от ф-ии тем, что первым аргументом метода, всегда является ссылка на свой класс.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_method&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Это обёртка для метода класса&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;class_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="nd"&gt;@decorator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 1003&lt;/span&gt;
&lt;span class="c"&gt;# Хотя по-идее мы могли бы ожидать 1 + 2, но благодаря обертке мы смогли&lt;/span&gt;
&lt;span class="c"&gt;# изменить функционал&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Передача *args и **kwargs декорируемой ф-ии&lt;/h2&gt;
&lt;p&gt;Ничего волшебного:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# ()&lt;/span&gt;
&lt;span class="c"&gt;# {}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Передача аргументов декоратору&lt;/h2&gt;
&lt;p&gt;Логично возникает вопрос: "А как же передать аргументы в декоратор, если декоратор по определению должен принимать на вход только имя декорируемой ф-ии?".&lt;/p&gt;
&lt;p&gt;Решение есть, но не лёгкое. Задекорируем декоратор (crazy).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ф-ия создающая декоратор&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_for_decorator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# ф-я декоратор (т.е. изменяющая ф-ал оборачиваемой ф-ии)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# ф-ия обертка&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c"&gt;# some logic&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="n"&gt;new_decorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator_for_decorator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# создаем декоратор и присваиваем его переменной&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Я просто ф-я&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# задекорируем ф-ю&lt;/span&gt;
&lt;span class="n"&gt;just_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# и теперь можем вызвать задекорированную ф-ю&lt;/span&gt;
&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Или можно записать так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;я декорируемая ф-я&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# и вызов задекорированной ф-ии&lt;/span&gt;
&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А теперь то же самое, но только при помощи &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorator_for_decorator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;я декорируемая ф-я&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Т.к. декоратор теперь есть вызов ф-ии, то можем передать ему некие аргументы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_for_deco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deco_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deco_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deco_arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;deco_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# данная обертка теперь имеет доступ как к аргументам&lt;/span&gt;
            &lt;span class="c"&gt;# декоратора, так и к аргументам декорируемой ф-ии&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="nd"&gt;@deco_for_deco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Привет&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Мир&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Меня задекорировали, и знаю только&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;\
            &lt;span class="s"&gt;&amp;quot;о своих аргументах &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; и &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# выведет: &amp;quot;ПриветМир&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;один&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;два&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# выведет: Меня задекорировали, и знаю только о своих аргументах один и два&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Зная всё что здесь написано можно сделать декоратор для декораторов которому можно передавать любые аргументы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_for_deco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decorataion_decorator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_maker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decoration_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator_maker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь посмотрим как воспользоваться этой адовой смесью:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@deco_for_deco&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorated_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Я знаю о &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; и &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь декорируем нужные нам ф-ии передавая любые аргументы декоратору:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorated_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Привет&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;just_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; Жвачка и &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Мир&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# выведет:&lt;/span&gt;
&lt;span class="c"&gt;# Я знаю о (42, 404, 1024) и {}&lt;/span&gt;
&lt;span class="c"&gt;# Привет Жвачка и Мир&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Подводя итоги&lt;/h2&gt;
&lt;p&gt;В общем этот длиннопост переработанный изхабра, создавался когда я врубался в подсмотренный код в django, где в 4 строках скрыто целая тьма смысла и материала для изучения. Там создавался класс mixin в котором декорировался некий метод который обезапасивал доступ к сайту. Ацкая смесь без развернутых пояснений на англ. языке. Ну вот собственно с декораторами вроде разобрался.&lt;/p&gt;
&lt;p&gt;Где еще применяется декорирование?&lt;/p&gt;
&lt;p&gt;Декораторы могут быть использованы для расширения возможностей функций из сторонних библиотек (код которых мы не можем изменять), или для упрощения отладки (мы не хотим изменять код, который ещё не устоялся).
Так же полезно использовать декораторы для расширения различных функций одним и тем же кодом, без повторного его переписывания каждый раз, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benchmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Декоратор, выводящий время, которое заняло&lt;/span&gt;
&lt;span class="sd"&gt;    выполнение декорируемой функции.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Декоратор, логирующий работу кода.&lt;/span&gt;
&lt;span class="sd"&gt;    (хорошо, он просто выводит вызовы, но тут могло быть и логирование!)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Декоратор, считающий и выводящий количество вызовов&lt;/span&gt;
&lt;span class="sd"&gt;    декорируемой функции.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{0} была вызвана: {1}x&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;


&lt;span class="nd"&gt;@benchmark&lt;/span&gt;
&lt;span class="nd"&gt;@logging&lt;/span&gt;
&lt;span class="nd"&gt;@counter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;А роза упала на лапу Азора&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# выведет:&lt;/span&gt;
&lt;span class="c"&gt;# reverse_string (&amp;#39;А роза упала на лапу Азора&amp;#39;,) {}&lt;/span&gt;
&lt;span class="c"&gt;# wrapper 0.0&lt;/span&gt;
&lt;span class="c"&gt;# reverse_string была вызвана: 1x&lt;/span&gt;
&lt;span class="c"&gt;# арозА упал ан алапу азор А&lt;/span&gt;
&lt;span class="c"&gt;# reverse_string (&amp;#39;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&amp;#39;,) {}&lt;/span&gt;
&lt;span class="c"&gt;# wrapper 0.0&lt;/span&gt;
&lt;span class="c"&gt;# reverse_string была вызвана: 2x&lt;/span&gt;
&lt;span class="c"&gt;# !amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;Скопипащенно &lt;em&gt;©&lt;a href="http://habrahabr.ru/post/141411/"&gt;отсюда&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry><entry><title>10 заповедей безличного программирования</title><link href="https://stonedastronaut.github.io/10-zapovedei-bezlichnogo-programmirovaniia.html" rel="alternate"></link><updated>2015-08-03T19:49:58+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-08-03:10-zapovedei-bezlichnogo-programmirovaniia.html</id><summary type="html">&lt;p&gt;Эти заповеди были описаны в книге «Психология компьютерного программирования», написанной в 1971 году. Несмотря на возраст, слова до сих пор актуальны. Я не читал саму книгу, но нашёл пост о ней в блоге Стивена Уайетта Буша. Стивену её посоветовал перед смертью его отец. Вот эти заповеди:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Пойми и свыкнись с тем, что ты будешь совершать ошибки. Суть в том, что их нужно находить до того, как они на что-то повлияют. В нашей индустрии, к счастью, ошибки редко могут привести к фатальным результатам (это не относится к тем, кто работает над ПО управления ракетами в Лаборатории реактивного движения). Мы можем (и должны) учиться, смеяться над собой и двигаться дальше.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Твой код — это не ты. Весь смысл проверок — в поиске недочётов. И когда их найдут, не принимай это близко к сердцу.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не важно, сколько хитрых приёмчиков ты знаешь, — всегда найдётся кто-нибудь круче тебя. И, если ты попросишь, этот человек может научить тебя парочке новых трюков. Слушай других, даже если тебе кажется, что это не нужно.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не переписывай код без обсуждения. Между исправлением кода и его переписыванием лежит тонкая грань. Пойми разницу, не меняй всё самостоятельно, добивайся изменений в рамках анализа кода.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Относись к тем, кто знает меньше тебя, с уважением, терпением и пониманием. Почти все люди из нетехнического круга, которые постоянно взаимодействуют с разработчиками, считают нас, в лучшем случаем, самодовольными типами. В худшем — плаксами. Не укрепляй этот стереотип своей злостью и нетерпеливостью.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Всё течёт, всё меняется. Будь открытым для изменений, принимай их с улыбкой. Воспринимай каждое изменение в требованиях, смену платформы или инструмента не как существенное неудобство, с которым нужно бороться, а как новое испытание.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настоящая власть исходит не из званий, а из знаний. Знания порождают власть, а власть порождает уважение — так что, если вы хотите уважения в безличном окружении, развивайте свои знания.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Борись за то, во что веришь, но достойно принимай поражение. Пойми, иногда твои идеалы могут быть отвергнуты. Даже если ты прав, не пытайся отомстить и не говори «Я вас предупреждал». Не делай уже мёртвую идею своим лозунгом.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не будь «программистом в каморке». Не будь человеком, который выходит из своего тёмного офиса только за газировкой. Такой программист вне зоны видимости, взаимоотношений и контроля. Такой человек не имеет голоса в открытом окружении. Принимай участие в разговорах, участвуй в жизни своего офиса.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Критикуй код, а не человека, — будь добр к программисту, но не к коду. Пусть все твои комментарии будут положительными и направленными на улучшение кода. Указывай в комментариях на местные стандарты, спецификации, улучшение производительности и т. д.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;©habrahabr&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Вы разработчик? Так почему вы до сих пор на кого-то работаете?</title><link href="https://stonedastronaut.github.io/vy-razrabotchik-tak-pochemu-vy-do-sikh-por-na-kogo-to-rabotaete.html" rel="alternate"></link><updated>2015-08-03T17:55:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-08-03:vy-razrabotchik-tak-pochemu-vy-do-sikh-por-na-kogo-to-rabotaete.html</id><summary type="html">&lt;p&gt;Как разработчик, вы сидите на золотой жиле. Вы осознаете это?
Нет, серьезно, на @#$% золотой жиле! Никогда в истории не существовало возможностей так легко создать что-то с нуля, с маленьким или отсутствующим начальным капиталом и маркетинговой моделью, ограниченной только вашим воображением.
Подумайте о крупнейших сайтах, которые вы постоянно посещаете: Facebook, Twitter, Flickr, Foursquare, или даже Google — все они были созданы разработчиками, у которых была лишь идея. Было ли это легко? Черт, нет. Но это могло быть сделано только в наше время. Так, черт побери, почему вы просиживаете день за днем, работая на кого-то?
Да, я тоже наемный работник. И я ненавижу это.
Если вокруг есть столько прекрасных возможностей, почему большинство разработчиков не работают на себя? Я думаю, есть несколько отговорок, которые мы придумываем сами себе. Но ни одна из них не является серьезной.&lt;/p&gt;
&lt;p&gt;Миф №1: у вас нет времени
Я часто слышу эту отговорку и каждый раз смеюсь. Сколько времени вы проводите за телевизором или игрой в XBox, Wii, Playstation и так далее? От силы час в день, так? А сколько времени вы проводите в Facebook'е и Twitter'е? (Скорее всего, минутку сейчас, минутку потом?) А что вы делаете каждый день в обеденный перерыв? Это ведь целый час времени.
Вот что я скажу: час тут, час там — у вас на самом деле есть время. Суть в том, как вы его проводите. Если вы действительно хотите что-то сделать, вам нужно найти идею (действительно хорошую идею) и загореться ею! Если вы увлечетесь чем-то, вы найдете время. И в итоге придете к тому, что вам некомфортно работать над чем-то кроме вашей идеи.
Мне 31 год, я женат, и у нас трое маленьких детей. Я целый день работаю, а потом прихожу домой к чудесной жене, которая к концу дня не знает, куда деваться от детей. Я считаю себя довольно занятым человеком, но тем не менее мне удается находить как минимум 20 часов в неделю для того чтобы поработать над моей идеей, которая поможет мне освободиться из зарплатной ловушки, куда я сам себя заманил.
Я пишу этот текст сидя в уютном кресле в кафе через дорогу от моей работы. Я захожу сюда практически каждый день, и это составляет почти 5 дополнительных часов продуктивной работы в неделю! Никаких бегающих детей вокруг, никаких отвлекающий факторов, только я, мой лэптоп и мои наушники.&lt;/p&gt;
&lt;p&gt;Миф №2: я не могу придумать идею
Если вы только начинаете работу, вы постоянно слышите от людей фразы типа «Идеи ничего не стоят» и «Я легко могу придумать идею, просто у меня нет времени на реализацию». Когда вы сидите и пытаетесь придумать Очередную Клевую Штуку (очередной Facebook, очередной Reddit и т.д.), вам кажется, что все хорошие идеи уже реализованы! И вы не можете придумать ничего стоящего.
Попросите основателя любого крупного веб-сайта сравнить текущее положение дел с тем, каким он его представлял, и, я уверен, он рассмеется. Все они вряд ли пошли тем путем, которым собирались пойти. Сейчас эти сайты имеют огромную посещаемость благодаря тому, что их создатели были достаточно умны, чтобы улучшать и создавать функции, которые нравятся пользователям.
Поэтому перестаньте пытаться сделать хоумран (прим. пер. — в бейсболе удар через все поле, позволяющий набрать очко), лучше попытайтесь сперва добежать до базы! Создайте что-то полезное. Что-то, что нужно людям, а затем улучшайте это, снова и снова. Начните с простого и развивайте. Если вы чересчур увлечены конечным результатом (яхта и частный остров в Карибском море), то вы всего лишь фантазер. Сделайте что-нибудь, покажите это людям, получите отзывы и улучшайте.&lt;/p&gt;
&lt;p&gt;Вот что я делаю, когда пытаюсь придумать новую забавную идею для работы:
1. Слушаю National Public Radio (или любое другое ток-шоу). Люди обожают жаловаться. Я смотрю на любую жалобу как на возможность! Например, мой текущий проект родился во время празднования столетия движения бойскаутов. Я сам бывший бойскаут, был лидером скаутов. Однако я успел позабыть обо всех сложностях. Радиопередача подкинула мне идею, над которой я сейчас работаю. Это довольно узкая ниша, но она предоставляет много возможностей.
Еще мне приходит на ум много плохих идей, но это нормально! Это как упражнение. Чем больше вы открыты, тем легче мысли приходят в голову и тем легче оценивать их. Найдите то, что люди ненавидят, что доставляет им неудобство, и сделайте что-то, за что они захотят заплатить (неважно, напрямую или косвенно).
2. Чем вы любите заниматься? Что вам больше всего нравится? Займитесь тем, что вам нравится, иначе вскоре это может действительно надоесть, и вам будет хотеться заняться чем-то другим. Перед тем, как вы начнете, убедитесь, что вы готовы думать о вашей идее круглые сутки в течение недели, иначе у вас ничего не получится. Одно из моих увлечений — погружение с аквалангом. Я бы очень хотел жить в мире, где не нужно думать ни о чем другом, кроме погружений. Так что у меня есть несколько идей в этой области, которые я пока обдумываю.
3. Ведите записи. Google Docs вам в помощь. У меня есть документ, который я называю «Идеи для моих программ». Когда у меня появляется идея — не важно насколько она тривиальна или уникальна — я немедленно записываю ее в этот документ. Некоторые люди для этой цели держат блокноты на прикроватной тумбочке. Даже не знаю, сколько раз за рулем у меня возникали идеи, а к тому времени, когда я добирался домой, забывал их. Не то что бы это были плохие идеи, просто я отвлекался и забывал о них. Через некоторое время они возвращались ко мне, однако было все равно неприятно. Ведение записей позволит вам упорядочивать ваши идеи, добавлять к ним заметки и размышления.
Никогда не начинайте работу в тот же день, как придумали идею. Обдумайте ее по крайней мере день или два. Убедитесь, что она стоит того, чтобы потратить на нее следующие несколько лет вашей жизни. Не делайте что-то ради того, чтобы посмотреть, понравится ли это людям. Сперва прочтите «Да, но кто вам сказал, что они КУПЯТ эту штуку?» (прим. пер. — ссылка ведет на непереведенную статью) и возвращайтесь. Давайте, я подожду.&lt;/p&gt;
&lt;p&gt;Миф №3: у меня нет денег
Кто сказал «деньги»? Только если ваша идея совершенно точно требует вложений, что является довольно редким явлением в Интернете, вы можете начать с нулем. Нуль. Ничего. Ничегошеньки. Будьте изобретательны, чтобы достигнуть нужного результата. Меняйтесь, продавайте, консультируйте. Возьмите за правило тратить как можно меньше, чтобы добиться результата. А лучше не тратьте деньги вообще до тех пор, пока не станете получать их от своих клиентов.
Я потратил кучу денег на хостинг для Django в моем текущем проекте. Хостинг мне нравится, однако я считаю это роскошью. Я мог бы использовать Google App Engine бесплатно, но черт, я способен потратить сто баксов в год. Я планирую использовать бесплатный Chargify до тех пор, пока не стану получать от проекта достаточно денег, чтобы тратить их на хостинг.
Для старта вам не нужны деньги. Если вы думаете иначе, и особенно если вы впервые занимаетесь своим делом, вам стоит подумать еще раз.&lt;/p&gt;
&lt;p&gt;Миф №4: я ничего не знаю о маркетинге/дизайне/и т.п.
Это не самая лучшая отговорка от старта своего дела, однако самая популярная. Как разработчик, я прихожу в ужас от того, что нужно продавать. Я ненавижу висеть на телефоне. Я не люблю думать о том, как бы привлечь побольше народу на мой сайт. Я люблю создавать что-то. Если сейчас вы соглашаетесь со мной, то у вас есть два пути:
1. Найдите партнера, который разбирается в том, в чем не разбираетесь вы. Сосредоточьтесь на том, что вы делаете хорошо. Если вы разработчик, слушайте, что говорят пользователи и тратьте все свое время на создание действительно классного продукта. Продажи и маркетинг могут отнять все свободное время. Это действительно трудно управляться с обоими направлениями. Если у вас два партнера-технаря, мы можете разделить между собой задачи по продажам и маркетингу, и в конце концов обнаружите, что тот, кто справляется с ними лучше, будет ими заниматься все время. Однако тот факт, что вы «разработчик», не означает, что вы не должны участвовать в продажах или маркетинге! Хотя на сильных сторонах необходимо сосредотачивать свои усилия, однако также нужно знать, как работают продажи, маркетинг, PR и все с этим связанное. Это предотвратит фразы типа «Черт, почему Джон не может привести ни одного клиента? Мне кажется, что я делаю всю работу.» Вы станете больше ценить продажи и маркетинг после того, как узнаете, насколько тяжело ими заниматься! Давайте! Не будьте бабой! (Дамы, прощу прощения за выражение.) И наоборот, дайте вашему партнеру, который соображает в продажах или маркетинге, просмотреть код хотя бы по диагонали. Устройте этакое сотрудничество. По крайней мере, если он будет знать, сколько времени занимает ваша работа, он сначала проконсультируется с вами насчет новой фичи, а не пойдет продавать несуществующую функциональность. Уберите завесу тайны и вникайте в дела друг друга!
2. Не будьте тряпкой и научитесь этому! Это значит, что вам нужно будет отложить код в сторонку и научиться продавать и стать настоящим продажником или пиарщиком. Это потребует времени, только не сдавайтесь! Хорошая новость: что то, что работает для одной компании или сайта, необязательно будет работать для другой. Что? Это больше похоже на плохую новость? Взгляните на это с другой стороны: худшее, что вы можете сделать, это не справиться. Я иронизирую, но это правда. Если вы провалитесь в маркетинговой компании, что тогда? ПОПРОБУЙТЕ сделать это другим способом. Добавьте неудачный вариант в список плохих способов и двигайтесь дальше. Изучите книги, форумы, сайты, руководства, а затем идите и ЭКСПЕРИМЕНТИРУЙТЕ. Для этого вам даже не нужны деньги. Будьте изобретательны и находчивы. Вам нужно узнать, какой подход работает именно для вас, а не для кого-то другого. Учитесь и пробуйте.&lt;/p&gt;
&lt;p&gt;Миф №5: я не могу бросить работу — мне нужен стабильный доход
Это больше похоже на реальную причину, нежели на отговорку, однако зачем мириться с существующим положением вещей? Вы действительно хотите до конца жизни каждый день на кого-то работать, соглашаясь с предложенными условиями? Нет? Ну что ж, тогда придется чем-то пожертвовать. И вы об этом знаете, иначе не читали бы эту статью!
При малейшей возможности лучшее что вы можете сделать — уйти с работы и уделять 100% времени вашему стартапу. Это заставит вас сосредоточиться на продукте и сделать что-то, за что люди заплатят. Необходимость оплачивать счета и покупать еду — это очень хорошие мотиваторы.
Если у вас тоже есть дети и уход с работы невозможен, вы все равно можете найти время. Просто проект займет больше времени. Смотрите «Миф №1: у вас нет времени».
Все большие стартапы не делались за одну ночь. Иногда потребуются годы, чтобы чего-то достичь. Главное не сдаваться!
Как только у вас появится работающий прототип, вам нужно пойти к людям, которые говорили, что идея хорошая, и узнать, что они думают о вашем продукте. Это действительно придает сил. Найдутся и те, кому ваш продукт не понравится, однако не принимайте это близко к сердцу. Учтите критику и сделайте ваш продукт еще лучше. Худшее, что может случиться, это люди, которые говорят приятные вам вещи только потому, что не хотят обидеть вас. В таком случае у вас получится заурядная вещь, которая никому не нужна.
После того, как вы начали получать отзывы и привлекать пользователей, начните привлекать инвестиции в ваш проект. Просите об этом знакомых, общайтесь с бизнес-ангелами. Даже если вам не удастся убедить их вложить деньги, это еще не означает, что ваша идея плоха, это означает, что вы должны улучшить ее и привлечь больше пользователей. Если вы можете привлечь и удержать людей, значит вы чего-то стоите. В наше время необязательно иметь хорошо проинвестированный или модный проект, чтобы зарабатывать деньги!&lt;/p&gt;
&lt;p&gt;Миф №6: я не могу найти партнера
Плохое партнерство — самая частая причина провала стартапов. Ссоры или партнеры, которые не вкладываются в работу, убивают дело очень быстро. Очень важно найти такого же увлеченного партнера, как и вы.
Не думайте, что кто-то сразу загорится вашей идее так же сильно. Вы гораздо дольше размышляли и мечтали о ней. При обсуждении идеи критика и игра в «адвоката дьявола» приветствуются. Вы действительно думаете, что ваше мнение — это мнение всех? Поэтому приветствуйте несогласия и расхождения во взглядах, по крайней мере до тех пор, пока они не выходят за пределы конструктивной критики.
Где искать хорошего партнера? Лучше всего среди знакомых вам людей. Таким образом снижается риск несовместимости, потому что вы уже знаете людей, их привычки и пристрастия.
Также вам необходим тот, кто понимает, что в начале пути стартап предполагает тяжелую работу и маленькую отдачу. Участвуйте в сообществах, таких как Hacker News и Founders Mix, чтобы найти подходящих вам людей.
Если недалеко от вас проходят встречи Gangplank, сходите потусите там. Послушайте, что говорят люди, и не бойтесь поделиться с ними своей идеей. Не пытайтесь угадать, что нужно людям, а СПРОСИТЕ их об этом прямо! Это глупо болтаться рядом и бояться высказать вслух свою идею, потому что «они могут украсть ее». Идеи ничего не стоят. Если вы думаете, что кто-то может реализовать ваши задумки лучше, у вас большие проблемы.&lt;/p&gt;
&lt;p&gt;А теперь возьмите и сделайте что-то, что нужно людям!&lt;/p&gt;
&lt;p&gt;©megamozg&lt;/p&gt;</summary><category term="freelance"></category><category term="habr"></category></entry><entry><title>9 расслабляющих сайтов для поддержания спокойствия и хорошего настроения</title><link href="https://stonedastronaut.github.io/9-rasslabliaiushchikh-saitov-dlia-podderzhaniia-spokoistviia-i-khoroshego-nastroeniia.html" rel="alternate"></link><updated>2015-08-03T17:48:02+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-08-03:9-rasslabliaiushchikh-saitov-dlia-podderzhaniia-spokoistviia-i-khoroshego-nastroeniia.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Две минуты безделья на &lt;a href="http://DoNothingFor2Minutes.com"&gt;DoNothingFor2Minutes.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дождливое настроение на &lt;a href="https://www.rainymood.com/"&gt;Rainy Mood&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Спокойствие и только спокойствие на &lt;a href="http://calm.com"&gt;Calm.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Просто шум на &lt;a href="https://simplynoise.com/"&gt;SimplyNoise&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Просто дождь на &lt;a href="https://rain.simplynoise.com/"&gt;SimplyRain&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вы в кафе на &lt;a href="https://coffitivity.com/"&gt;Coffitivity&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Звуки природы на &lt;a href="http://naturesoundsfor.me"&gt;naturesoundsfor.me&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Поток музыки &lt;a href="https://www.focusatwill.com/"&gt;Focus@Will&lt;/a&gt;, которая увеличивает внимание.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Оптимистичная музыка на &lt;a href="http://www.getworkdonemusic.com/"&gt;Get Work Done Music&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="links"></category><category term="relax"></category></entry><entry><title>7 типичных ошибок неопытных программистов</title><link href="https://stonedastronaut.github.io/7-tipichnykh-oshibok-neopytnykh-programmistov.html" rel="alternate"></link><updated>2015-08-03T17:42:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-08-03:7-tipichnykh-oshibok-neopytnykh-programmistov.html</id><summary type="html">&lt;p&gt;Сколько люди будут учиться программированию, столько будут совершать одни и те же ошибки. Существуют грабли, на которые просто невозможно не наступить. Тем не менее небольшая ошибка в начале разработки может обернуться сильной головной болью для программиста и его коллег в будущем. Хочется верить, что читатели этой статьи смогут сократить количество неверно принятых решений в ходе разработки программ до минимума.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Неумение кататься на велосипедах
Неожиданно, да? На самом деле мы хотели сказать, что в эпоху дот-нетов, мак буков и web 2.0 всё (ну или почти всё) уже написано. На любой более-менее популярный язык программирования — по несколько фреймворков и сред разработки, в том числе множество бесплатного, но качественного софта и огромное количество CMS’ок и движков сайтов, для коих, в свою очередь, тысячи плагинов, расширяющих их функционал.&lt;/p&gt;
&lt;p&gt;Но начинающие программисты часто либо забывают про этот факт, либо его игнорируют. Они, может быть, и понимают, что кто-то уже решил задачу, которая перед ними стоит, и предлагает решение абсолютно бесплатно, но это почему-то не останавливает их от изобретения велосипедов, которые в большинстве случаев оказываются менее качественными, чем существующие. А ведь вместо придумывания лучше найти хороший пример с открытым кодом и сосредоточиться на других задачах.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Использование неподходящих средств разработки
Знаете, некоторые прям-таки с гордостью заявляют, что пишут веб страницы в блокноте Windows. По их мнению, этим фактом они подчеркивают некий аскетичный стиль программирования, которому следуют, а на самом деле — еще раз демонстрируют свою глупость. Опять же, в наше время существует множество удобных сред и средств разработки, которые упрощают написание кода, заранее проверяют в нём ошибки, выдают подсказки и прочее, и прочее. Зачем пренебрегать имеющимися благами программирования? Видимо для того, чтобы сделать больше ошибок и потратить лишнее время на отладку — иных причин я не вижу. Используйте блокнот как блокнот.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вопросы, на которые уже 100 раз ответили
Перед тем, как начать спрашивать что-либо на форумах и в сообществах, просто поищите ответ на свой вопрос. Если Вы начинающий программист, то наверняка кто-то до Вас уже интересовался тем, что Вам непонятно. Сначала ищите информацию в мануалах, документации, на форумах, в разделах FAQ, а только потом, в случае неудачи, спрашивайте у других.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Костыли
У новичков код пестрит неочевидными ходами и решениями. Некоторые из них появляются в результате того, что при тестировании программа начинает вести себя не так, как ожидается. Вместо того, чтобы докопаться до сути проблемы, неопытный программист на скорую руку начинает вставлять в код заплатки, которые уродуют программу. Доходит до смешного. Например, на сайте была форма, куда пользователь должен был ввести число от 0 до 999. Вместо того, чтобы получить из поля данные и проверить, действительно ли это число находится в заданном диапазоне, человек сделал проверку на количество символов не больше трех. В итоге в логике программы становится трудно разобраться. Ещё сложнее становится вносить изменения и расширять функционал.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;«Этого точно никогда не будет»
Любимый прием новичка – игнорировать обработку некорректных входных данных. Мотив: «Этого точно никогда не будет». А ведь будет наверняка! Закон программистской подлости — случится именно то, чего ты не предусмотрел. Надо быть готовым, что там, где должны ввести год рождения, будут вводить все, что угодно, кроме нужных четырех цифр. При этом еще нужно придумать правильные ограничивающие условия.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Некрасивый код
Стоит ли говорить, что вначале многие не задумываются о длине строчек кода, размере функции, забывают о комментариях и т.д. Не задумываются в основном потому, что не имеют опыта длительной разработки, когда начинаешь понимать, что всё то, что на первый взгляд кажется мелочью, на самом деле очень важно для жизнеспособности программы в дальнейшем.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не получилось с первого раза — ищем простой путь
Наверное, все за собой замечали: по какой-то непонятной причине программа работает некорректно, а в чем дело — мы никак определить не можем. Тогда мы и начинаем подставлять костыли из пункта 5. Например, есть файл с объявлениями констант и функциями, который используют разные модули программы. В одном модуле этот файл забыли включить, что в ходе выполнения привело к выводу ошибки интерпретатором о том, что не нашлась константа с таким-то именем. Вместо того, чтобы разобраться, где она объявлена и почему не нашлась, мы берем и ещё раз объявляем её в проблемном модуле. Это очень плохое решение. Не делайте так, ищите корень проблемы.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Учимся на своих ошибках и не забываем: хорошо написанная программа – плюс один в карму!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©GeekBrains&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>LVM on LUKS на примере arch</title><link href="https://stonedastronaut.github.io/lvm-on-luks-na-primere-arch.html" rel="alternate"></link><updated>2015-07-26T03:53:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-07-26:lvm-on-luks-na-primere-arch.html</id><summary type="html">&lt;h2&gt;Создаём разделы физические&lt;/h2&gt;
&lt;p&gt;Вот такая структура диска.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/dev/sda1 -&amp;gt; /boot&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/dev/sda2 -&amp;gt; LVM&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Шифруем раздел LVM&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cryptsetup luksFormat -c aes-xts-plain64 -s &lt;span class="m"&gt;512&lt;/span&gt; /dev/sda2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;больше о параметрах шифрования см. &lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#Encryption_options_for_LUKS_mode"&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cryptsetup open --type luks /dev/sda2 lvm
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Создаём разделы на LVM&lt;/h3&gt;
&lt;p&gt;создаём физический раздел LVM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pvcreate /dev/mapper/lvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;создаём группу разделов LVM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vgcreate MyStorage /dev/mapper/lvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;создаём логические разделы LVM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lvcreate -L 8G MyStorage -n swapvol
lvcreate -L 15G MyStorage -n rootvol
lvcreate -l +100%FREE MyStorage -n homevol
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;форматируем разделы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkfs.ext4 /dev/mapper/MyStorage-rootvol
mkfs.ext4 /dev/mapper/MyStorage-homevol
mkswap /dev/mapper/MyStorage-swapvol
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;наконец-то монтируем&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mount /dev/MyStorage/rootvol /mnt
mkdir /mnt/home
mount /dev/MyStorage/homevol /mnt/home
swapon /dev/MyStorage/swapvol
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;подготавливаем boot&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkfs.ext2 /dev/sda1
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Дальше идёт обычная установка системы, до момента генерации &lt;strong&gt;initramfs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Для того, что бы можно было загружаться с lvm надо добавить в &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/mkinitcpio.conf:
&lt;span class="nv"&gt;HOOKS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;... encrypt lvm2 resume ... filesystems ...&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;encrypted&lt;/strong&gt;, &lt;strong&gt;lvm2&lt;/strong&gt; и &lt;strong&gt;resume&lt;/strong&gt; должны стоять перед &lt;strong&gt;filesystems&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;конфигурация загрузчика&lt;/h3&gt;
&lt;p&gt;Перед генерацией конфига &lt;em&gt;grub&lt;/em&gt;, необходимо добавить информацию о зашифрованных разделах в &lt;code&gt;/etc/default/grub&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nv"&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quiet resume=/dev/MyStorage/swapvol&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;GRUB_CMDLINE_LINUX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cryptdevice=/dev/sda2:MyStorage \&lt;/span&gt;
&lt;span class="s2"&gt;root=/dev/mapper/MyStorage-rootvol&amp;quot;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Собственно всё.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system#LUKS_on_LVM"&gt;ссылка на оригинал&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="crypt"></category></entry><entry><title>7 советов для профессионального роста программиста</title><link href="https://stonedastronaut.github.io/7-sovetov-dlia-professionalnogo-rosta-programmista.html" rel="alternate"></link><updated>2015-07-21T22:46:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-07-21:7-sovetov-dlia-professionalnogo-rosta-programmista.html</id><summary type="html">&lt;h2&gt;1. &lt;strong&gt;Регулярная практика программирования&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Постоянно программируйте, если Вы действительно хотите стать профессионалом мастером своего дела. Вы будете писать ужасные программы, но сможете подняться на новую ступень уже тогда, когда поймете, что они ужасны. Вы начнете писать по-другому, сделав выводы и переосмыслив ошибки. Вам будет казаться, что теперь Ваш код вполне хорош. Но вскоре снова возникнет понимание того, что он далек от совершенства, что разработанная архитектура громоздка и неповоротлива. И это будет новой ступенью на лестнице Вашего профессионального развития.&lt;/p&gt;
&lt;p&gt;О типичных ошибках можно и нужно читать книги, статьи в Интернете, но без реальной практики программирования, без проб и ошибок ценность этой информации будет нулевая.&lt;/p&gt;
&lt;h2&gt;2. &lt;strong&gt;Культура программирования&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Относитесь к коду разрабатываемой программы, как к собственному лицу. Выработайте правила оформления текста и постоянно придерживайтесь их. Не загромождайте текст ненужными функциями, закомментированными блоками старого кода и прочим мусором. Старайтесь постоянно улучшать качество кода, стремитесь сделать его как можно более понятным, лаконичным и концептуальным.&lt;/p&gt;
&lt;h2&gt;3. &lt;strong&gt;Храбрость&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Если Вам кажется, что от кода "дурно пахнет", и Вы знаете, как его улучшить, - немедленно удалите этот код и напишите заново. Да, да - именно удалите. Не надо комментировать старое ненужное барахло, думая, что оно еще когда-нибудь пригодится и сработает. Просто возьмите, удалите и напишите с чистого листа новый качественный код.&lt;/p&gt;
&lt;h2&gt;4. &lt;strong&gt;Вера в свои силы&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Иногда возникает настолько сложная проблема, что руки опускаются. Просто непонятно, что дальше делать. Не паникуйте, а порадуйтесь возможности решить сложную задачу, обогатив свой опыт. Посмотрите на ситуацию аналитически. Создайте прототип проблемы и постепенно приближайте его к самой проблеме. Например, недавно мы с коллегой мучились, пытаясь скомпилировать огромную старую систему, использующую кучу сторонних компонент на древнем компиляторе. В итоге возникала ошибка линковщика, которая не говорила нам решительно ни о чем. Мы создали новый пустой проект и постепенно стали добавлять туда модули злосчастной программы. Так мы смогли локализовать ошибку. Ну, а когда знаешь, в чем именно проблема, - решить ее становится значительно проще!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Верьте&lt;/strong&gt; в &lt;em&gt;свои&lt;/em&gt; силы. Человек &lt;strong&gt;умнее&lt;/strong&gt; машины!&lt;/p&gt;
&lt;h2&gt;5. &lt;strong&gt;Быть в авангарде&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ИТ развиваются быстро и замедляться не планируют. Можно писать замечательные консольные программы на Паскале, но только вряд ли они найдут благодарных пользователей. Все потому, что средства разработки совершенствуются постоянно. Та область, в которой сегодня Вы пионер, завтра будет использоваться повсеместно. То, что сегодня используется миллионами, завтра станет вчерашним днем, "legacy", "deprecated". Нужно постоянно держать руку на пульсе, чтобы в один прекрасный день не оказаться за бортом парохода современности.&lt;/p&gt;
&lt;p&gt;На самом деле следить за технологиями не так уж и сложно. В ИТ, как и везде, все новое – это хорошо забытое старое. Нельзя сказать, что за последние годы в программировании появилось нечто принципиально новое, кардинально отличающееся от всего известного ранее. Все, что человек придумывает, основывается на его предыдущем опыте. Секрет в том, что помимо чьих-то там технологий есть Ваш личный опыт, собственная база знаний и технический склад ума, которые от Вас никуда не денутся. И если Вы обладаете этим бесценным багажом, то оставаться в авангарде информационных технологий оказывается вовсе и не сложно.&lt;/p&gt;
&lt;h2&gt;6. &lt;strong&gt;Английский язык&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Без этого никуда. Пока все новое в сфере как программирования, так и ИТ в целом идет к нам с Запада. Самая лучшая документация, самые полезные форумы, самые интересные блоги всегда были и будут на английском языке. В ИТ индустрии английский давным-давно завоевал полное господство и перемен не предвидится. Техническую документацию придется читать любому программисту. Впрочем, нет никакой необходимости доводить свой английский до Upper Intermediate. Достаточно знать столько, сколько необходимо для работы. Программист обязан уметь читать по-английски. Говорить и писать не так критично, хотя и крайне желательно, но читать обязан.&lt;/p&gt;
&lt;h2&gt;7. &lt;strong&gt;Книги &lt;em&gt;"must read"&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Есть литература, которая обязательно должна быть прочитана любым уважающим себя программистом. Причем читать ее лучше не один раз, а время от времени возвращаясь к некоторым главам или же перечитывая книгу целиком. Понимание многих вещей приходит только с опытом, которого на момент первого прочтения может не быть.&lt;/p&gt;
&lt;p&gt;Безусловно, прочтение такой литературы поднимает Вас, как специалиста, на новую ступень. Хороших книг много, но эти просто жемчужина литературы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;"Искусство программирования"&lt;/strong&gt;, &lt;em&gt;Дональд Э. Кнут&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Объектно-ориентированный анализ и проектирование"&lt;/strong&gt;, &lt;em&gt;Гради Буч&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Совершенный код"&lt;/strong&gt;, &lt;em&gt;Стив Макконел&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Мифический человеко-месяц"&lt;/strong&gt;, &lt;em&gt;Хилл Чапел, Фредерик Брукс&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Приемы объктно-ориентированного проектирования. Паттерны проектирования"&lt;/strong&gt;, &lt;em&gt;Э. Гамма, Р. Хелм, Р. Джонсон, Д. Влиссилес&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А &lt;em&gt;что&lt;/em&gt; читаете &lt;strong&gt;Вы&lt;/strong&gt;?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;©geekbrains&lt;/em&gt;&lt;/p&gt;</summary><category term="geekbrains"></category></entry><entry><title>52 вопроса, которые вы должны задать на собеседовании</title><link href="https://stonedastronaut.github.io/52-voprosa-kotorye-vy-dolzhny-zadat-na-sobesedovanii.html" rel="alternate"></link><updated>2015-07-16T16:30:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-07-16:52-voprosa-kotorye-vy-dolzhny-zadat-na-sobesedovanii.html</id><summary type="html">&lt;p&gt;Вы, наверное, уже знаете, что интервью — это не просто очередной этап при устройстве на работу, это также ваша возможность разобраться, подходит ли вам эта работа. Для этого важно задать некоторые вопросы. Что вы хотите знать об этой должности? О компании? О подразделении? О команде? О корпоративной культуре?&lt;/p&gt;
&lt;p&gt;Задавать вопросы бывает сложно. Мы это знаем. Для того, чтобы упростить вам это задание, мы приводим список ключевых вопросов для интервью. Мы определённо не рекомендуем задавать их все. Пожалейте рекрутера!&lt;/p&gt;
&lt;p&gt;Когда в конце интервью или его части вас спрашивают: «Итак, есть ли у вас к нам вопросы?», то обязательно воспользуйтесь данным списком (попробуйте восстановить в памяти), чтобы убедиться, что вы охватили все интересующие вас моменты и показали ваш профессионализм.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Работа в целом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Сначала убедитесь, что это именно то, чем вы хотите заниматься изо дня в день в обозримом будущем.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как выглядит типичный рабочий день?&lt;/li&gt;
&lt;li&gt;Что из себя представляют проекты, которыми необходимо будет заняться в первую очередь?&lt;/li&gt;
&lt;li&gt;Можете ли показать мне примеры проектов, над которыми я буду работать?&lt;/li&gt;
&lt;li&gt;Какие навыки и какой опыт вы ищете в идеальном кандидате?&lt;/li&gt;
&lt;li&gt;Что необходимо для того, чтобы стать действительно успешным на этой должности?&lt;/li&gt;
&lt;li&gt;Какие виды навыков отсутствуют в команде, которые вы хотите получить, наняв нового сотрудника?&lt;/li&gt;
&lt;li&gt;Какие самые большие проблемы, с которыми предстоит столкнуться человеку на этой позиции?&lt;/li&gt;
&lt;li&gt;Каков уровень бюджета, с которым мне предстоит работать?&lt;/li&gt;
&lt;li&gt;Это новая роль в компании?&lt;/li&gt;
&lt;li&gt;Предполагаете ли Вы, что основной круг обязанностей для этой должности изменится в ближайшие полгода-год?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Обучение и профессиональное развитие&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Думайте о каждой новой работе не просто как о работе, а как о следующем шаге на пути к карьерному (или какому-либо иному) успеху. Как эта должность поможет вам его добиться?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как я буду обучаться?&lt;/li&gt;
&lt;li&gt;Какие учебные программы доступны для ваших сотрудников?&lt;/li&gt;
&lt;li&gt;Какие существуют возможности карьерного роста и профессионального развития?&lt;/li&gt;
&lt;li&gt;Смогу ли я представлять компанию на отраслевых конференциях?&lt;/li&gt;
&lt;li&gt;Куда перешёл предыдущий работник, ранее занимавший эту должность?&lt;/li&gt;
&lt;li&gt;Как продвигались успешные сотрудники, ранее занимавшие эту должность?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Оценка вашего труда&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Убедитесь, что вы понимаете, какие цели перед вами будут поставлены и то, как ваша работа будет оцениваться.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Какие наиболее важные вещи, по вашему мнению, я должен буду сделать за первые 30, 60 и 90 дней работы?&lt;/li&gt;
&lt;li&gt;Какие результаты от человека на данной позиции ожидаются в течение первых 12 месяцев?&lt;/li&gt;
&lt;li&gt;Расскажите про систему оценки эффективности деятельности сотрудников в компании. Как часто данный процесс происходит?&lt;/li&gt;
&lt;li&gt;По каким показателям моя деятельность будет оцениваться?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Интервьюер&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Задавая вопросы интервьюеру вы показываете, что заинтересовались им как человеком, а это отличный способ наладить контакт. Только давайте без комплиментов и лести.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как давно вы работаете в этой компании?&lt;/li&gt;
&lt;li&gt;Как ваша роль изменилась с тех пор?&lt;/li&gt;
&lt;li&gt;Чем вы занимались до этой работы?&lt;/li&gt;
&lt;li&gt;Почему вы устроились в эту компанию?&lt;/li&gt;
&lt;li&gt;Что вам больше всего нравится в работе здесь?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Компания в целом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Вы не просто работаете на вашего босса или на ваш отдел, вы работаете “на” и “с” всей компанией в целом.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Я читал о том, как была основана компания, но был бы благодарен, если бы вы смогли рассказать мне больше?&lt;/li&gt;
&lt;li&gt;Какой вы видите эту компанию в ближайшие несколько лет?&lt;/li&gt;
&lt;li&gt;Что вы можете рассказать мне о вашей новой продукции и/или планах роста?&lt;/li&gt;
&lt;li&gt;Каковы главные цели компании в настоящий момент и как она работает над их достижением?&lt;/li&gt;
&lt;li&gt;Что вас больше всего воодушевляет в будущем компании?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Команда&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Люди, с которыми вам предстоит работать изо дня в день, могут действительно влиять на вашу работу, на желание вставать по утрам и даже на вашу эффективность. Задайте несколько вопросов, чтобы определить, насколько это подходящая для вас команда.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Можете ли вы рассказать мне о команде, в которой я буду работать?&lt;/li&gt;
&lt;li&gt;С кем я буду работать наиболее тесно?&lt;/li&gt;
&lt;li&gt;Кому я буду непосредственно подчиняться?&lt;/li&gt;
&lt;li&gt;Можете ли вы рассказать мне о моих прямых подчинённых? Каковы их сильные и слабые стороны?&lt;/li&gt;
&lt;li&gt;Планируете ли вы нанимать ещё людей в это подразделение в ближайшие шесть месяцев?&lt;/li&gt;
&lt;li&gt;С какими подразделениями компании придется взаимодействовать чаще всего?&lt;/li&gt;
&lt;li&gt;Какие общие карьерные перспективы в этом подразделении?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Культура&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Соблюдается в офисе дресс-код или нет? Есть ли жизнь вне офиса? и т.д. Узнайте тонкие, но такие важные детали корпоративной культуры.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Какова культура компании в целом и команды в частности? Какие главные аспекты вы могли бы выделить?&lt;/li&gt;
&lt;li&gt;Как бы вы описали рабочую среду здесь, это, как правило, работа в команде или по одиночке?&lt;/li&gt;
&lt;li&gt;Можете ли вы рассказать мне о последнем совместном командном мероприятии?&lt;/li&gt;
&lt;li&gt;Какие у компании миссия и ценности? (Примечание: убедитесь, что данную информацию невозможно “загуглить” — в таком случае не задавайте этот вопрос).&lt;/li&gt;
&lt;li&gt;Какая ваша любимая офисная традиция?&lt;/li&gt;
&lt;li&gt;Что вы обычно делаете во время обеденного перерыва? (Конечно, помимо самого обеда).&lt;/li&gt;
&lt;li&gt;Собираются ли сотрудники компании/команды вне офиса?&lt;/li&gt;
&lt;li&gt;Вы когда-нибудь организовывали совместные мероприятия с другими компаниями или отделами?&lt;/li&gt;
&lt;li&gt;Что отличает работу здесь от других мест, где вы работали?&lt;/li&gt;
&lt;li&gt;Как изменилась компания с момента вашего прихода?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Следующие шаги&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Перед уходом убедитесь, что интервьюер получил всю необходимую ему информацию. Для того, чтобы выяснить, как будут развиваться события дальше, задайте эти вопросы.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Насколько, по вашему мнению, моя квалификация соответствует данной роли?&lt;/li&gt;
&lt;li&gt;Каковы следующие шаги по процессу рассмотрения на данную позицию?&lt;/li&gt;
&lt;li&gt;Что ещё с моей стороны может понадобиться?&lt;/li&gt;
&lt;li&gt;Могу ли я ответить на какие-либо ещё интересующие вас вопросы?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;©megamozg&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Как посчитать плотность пикселей (DPI)</title><link href="https://stonedastronaut.github.io/kak-poschitat-plotnost-pikselei-dpi.html" rel="alternate"></link><updated>2015-02-21T16:30:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-02-21:kak-poschitat-plotnost-pikselei-dpi.html</id><summary type="html">&lt;p&gt;Для подсчета DPI воспользуемся формулой:&lt;/p&gt;
&lt;p&gt;c^2 = a^2 + b^2&lt;/p&gt;
&lt;p&gt;где c - дагональ экрана умноженая на DPI (inch * dpi), a и b - стороны экрана в пикселях.&lt;/p&gt;
&lt;p&gt;отсюда следует:&lt;/p&gt;
&lt;p&gt;(inch * dpi)^2 = a^2 + b^2&lt;/p&gt;
&lt;p&gt;отсюда вывести dpi, думаю ниукого не составит труда.&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>Backup hdd средствами GNU/Linux</title><link href="https://stonedastronaut.github.io/backup-hdd-sredstvami-gnulinux.html" rel="alternate"></link><updated>2015-02-09T19:30:00+06:00</updated><author><name>Petr Kalmykov</name></author><id>tag:stonedastronaut.github.io,2015-02-09:backup-hdd-sredstvami-gnulinux.html</id><summary type="html">&lt;p&gt;После теста hdd можно определить, пора ли менять диск или нет.&lt;/p&gt;
&lt;p&gt;Если время пришло, то тогда необходимо перенести со старого жесткого всю инфу на новый.&lt;/p&gt;
&lt;p&gt;Из гуглежа, стало ясно, чо использование обычного dd не "кошегно". Ъ использовать &lt;strong&gt;GNU ddrescue&lt;/strong&gt;. Команда для backup'а выглядит следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ddrescue /dev/sdX /pth_to_backup/disk.img /pth_to_backup/disk.img.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можно делать backup как раздела, так и всего hdd.&lt;/p&gt;
&lt;p&gt;Для просмотра содержимого &lt;strong&gt;раздела&lt;/strong&gt; используем следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mount -o loop /pth_to_backup/drive.img /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А для &lt;strong&gt;образа физического диска&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# losetup --partscan /dev/loop0 drive.img&lt;/span&gt;
&lt;span class="c"&gt;# mount /dev/loop0p2 /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;или,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# kpartx -a /dev/loop0 drive.img&lt;/span&gt;
&lt;span class="c"&gt;# mount /dev/mapper/loop0p2 /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;в зависимости от дистра.&lt;/p&gt;
&lt;p&gt;Восстановление из образа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ddrescue --force disk.img /dev/sdxX disk.img.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;!!!&lt;strong&gt;раздел на который идет восстановление должен быть &lt;em&gt;НЕ&lt;/em&gt; меньше файла-образа&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;стырено &lt;a href="http://habrahabr.ru/post/233961/"&gt;изхабра&lt;/a&gt;&lt;/p&gt;</summary><category term="habr"></category><category term="linux"></category><category term="backup"></category></entry></feed>