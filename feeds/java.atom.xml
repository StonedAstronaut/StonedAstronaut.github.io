<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Astro blog</title><link href="https://stonedastronaut.github.io/" rel="alternate"></link><link href="https://stonedastronaut.github.io/feeds/java.atom.xml" rel="self"></link><id>https://stonedastronaut.github.io/</id><updated>2015-08-10T17:08:00+06:00</updated><entry><title>Разница между ключевыми словами this и super в Java</title><link href="https://stonedastronaut.github.io/raznitsa-mezhdu-kliuchevymi-slovami-this-i-super-v-java.html" rel="alternate"></link><updated>2015-08-10T17:08:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-10:raznitsa-mezhdu-kliuchevymi-slovami-this-i-super-v-java.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; — это два специальных ключевых слова в Java, которые представляют соответственно текущий экземпляр класса и его суперкласса. Java-программисты часто путают эти слова и обнаруживают слабую осведомленность об их специальных свойствах, о которых нередко спрашивают на интервью по Java Сore.&lt;/p&gt;
&lt;p&gt;Вот, например, пара вопросов, из того, что сразу приходит на ум, о this и &lt;strong&gt;super&lt;/strong&gt;, Можно ли присвоить другое значение ключевому слову &lt;strong&gt;this&lt;/strong&gt; в Java? и какая разница между ключевыми словами &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; в Java. Не знаете? Ну что ж, здесь я ответа не даю — его можно найти в конце статьи. Так вот, как я уже сказал в начале, главное отличие между &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; в Java в том, что &lt;strong&gt;this&lt;/strong&gt; представляет текущий экземпляр класса, в то время как &lt;strong&gt;super&lt;/strong&gt; — текущий экземпляр родительского класса.&lt;/p&gt;
&lt;p&gt;Вот один из примеров использования переменных &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; — вы наверняка уже видели примеры вызовов конструкторов одного из другого, т.н. вызовы конструкторов по цепочке, это возможно благодаря использованию ключевых слов &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt;. Внутри класса для вызова своего конструктора без аргументов используется &lt;code&gt;this()&lt;/code&gt;, тогда как &lt;code&gt;super()&lt;/code&gt; используется для вызова конструктора без аргументов, или как его ещё называют, конструктора по умолчанию родительского класса.&lt;/p&gt;
&lt;p&gt;Между прочим, таким способом вызывать можно не только конструктор без аргументов, а и вообще любой другой конструктор, передав ему соответствующие параметры. Скоро мы увидим пример такого использования &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt;. Ещё &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; в Java используются для обращения к переменным экземпляра класса и его родителя. Вообще-то, к ним можно обращаться и без префиксов &lt;strong&gt;super&lt;/strong&gt; и &lt;strong&gt;this&lt;/strong&gt;, но только если в текущем блоке такие переменные не перекрываются другими переменными, т.е. если в нем нет локальных переменных с такими же именами, в противном же случае использовать имена с префиксами придется обязательно, но это не беда, т.к. в таком виде они даже более читабельны.&lt;/p&gt;
&lt;p&gt;Классическим примером такого подхода является использование &lt;strong&gt;this&lt;/strong&gt; внутри конструктора, который принимает параметр с таким же именем, как и у переменной экземпляра. Дальше в статье мы узнаем, какие ещё есть отличия между &lt;strong&gt;super&lt;/strong&gt; и &lt;strong&gt;this&lt;/strong&gt;, и рассмотрим некоторые примеры их использования.&lt;/p&gt;
&lt;h3 id="this-super"&gt;Чем this и super похожи&lt;/h3&gt;
&lt;p&gt;Прежде чем рассматривать отличия ключевых слов &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt;, давайте посмотрим на некоторые их сходства:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;И &lt;strong&gt;this&lt;/strong&gt;, и &lt;strong&gt;super&lt;/strong&gt; — это нестатические переменные, соответственно их нельзя использовать в статическом контексте, а это означает, что их нельзя использовать в методе main. Это приведет к ошибке во время компиляции «на нестатическую переменную &lt;strong&gt;this&lt;/strong&gt; нельзя ссылаться из статического контекста». То же самое произойдет, если в методе main воспользоваться ключевым словом &lt;strong&gt;super&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;И &lt;strong&gt;this&lt;/strong&gt;, и &lt;strong&gt;super&lt;/strong&gt; могут использоваться внутри конструкторов для вызова других конструкторов по цепочке, нпр., &lt;code&gt;this()&lt;/code&gt; и &lt;code&gt;super()&lt;/code&gt; вызывают конструктор без аргументов наследующего и родительского классов соответственно.&lt;/p&gt;
&lt;p&gt;В примере ниже мы сначала передаем вызов из конструктора без аргументов класса B в конструктор этого же класса B, принимающий один параметр типа String, из которого, в свою очередь, с помощью &lt;code&gt;super("")&lt;/code&gt; вызывается конструктор с одним аргументом из суперкласса.&lt;/p&gt;
&lt;p&gt;:::java
class A{&lt;/p&gt;
&lt;p&gt;A(){
        System.out.println("Конструктор без аргументов класса A");
    }&lt;/p&gt;
&lt;p&gt;A(String args){
        System.out.println("Конструктор с одним аргументом класса A");
    }
}&lt;/p&gt;
&lt;p&gt;class B extends A{&lt;/p&gt;
&lt;p&gt;B(){
        this(""); // вызов конструктора с одним аргументом класса B
        System.out.println("Конструктор без аргументов класса B");
    }&lt;/p&gt;
&lt;p&gt;B(String args){
        super(""); // вызов конструктора с одним аргументом класса A
        System.out.println("Конструктор с одним аргументом класса B");
    }
}&lt;/p&gt;
&lt;p&gt;// Тест-класс и вывод
public class Test {&lt;/p&gt;
&lt;p&gt;public static void main(String args[]) {
       B b = new B();
    }&lt;/p&gt;
&lt;p&gt;}
Вывод:
Конструктор с одним аргументом класса A
Конструктор с одним аргументом класса B
Конструктор без аргументов класса B&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Внутри конструктора &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; должны стоять выше всех других выражений, в самом начале, иначе компилятор выдаст сообщение об ошибке. Из чего следует, что в одном конструкторе не может быть одновременно и &lt;code&gt;this()&lt;/code&gt;, и &lt;code&gt;super()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="super-this"&gt;Различия в super и this&lt;/h3&gt;
&lt;p&gt;Теперь мы знаем как использовать ключевые слова &lt;strong&gt;super&lt;/strong&gt; и &lt;strong&gt;this&lt;/strong&gt; и понимаем для чего они нужны. Но есть ещё один вариант использования этих ключевых слов, о котором я не сказал — во Внутренних классах, где с их помощью очень удобно ссылаться на внешний класс, используя форму записи Outer.&lt;strong&gt;this&lt;/strong&gt; для его текущего экземпляра и Outer.&lt;strong&gt;super&lt;/strong&gt; — для его родителя. Не забудьте вместо Outer подставить имя внешнего класса. А теперь давайте кратко перечислим главные отличия между ключевыми словами &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1) переменная &lt;strong&gt;this&lt;/strong&gt; ссылается на текущий экземпляр класса, в котором она используется, тогда как &lt;strong&gt;super&lt;/strong&gt; — на текущий экземпляр родительского класса.&lt;/p&gt;
&lt;p&gt;2) Каждый конструктор при отсутствии явных вызовов других конструкторов неявно вызывает с помощью &lt;code&gt;super()&lt;/code&gt; конструктор без аргументов родительского класса, при этом у вас всегда остается возможность явно вызвать любой другой конструктор с помощью либо &lt;code&gt;this()&lt;/code&gt;, либо &lt;code&gt;super()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Пожалуй, это все, что можно сказать о различиях между ключевыми словами &lt;strong&gt;this&lt;/strong&gt; и &lt;strong&gt;super&lt;/strong&gt; в Java и о том, как они используются в программах. Как мы увидели, основное их назначение — вызывать один конструктор из другого и ссылаться на переменные экземпляра, объявленные в текущем классе и его родительском классе. Не забывайте, что это не совсем обычные переменные, а сейчас — ответ на мой вопрос, который я задавал в первом параграфе. Нет, переменной &lt;strong&gt;this&lt;/strong&gt; нельзя присвоить новое значение, потому что она объявлена как final. Можете попробовать сделать это в IDE — получите ошибку компиляции «нельзя присвоить новое значение переменной &lt;strong&gt;this&lt;/strong&gt; — она объявлена как final».&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="http://info.javarush.ru/grishin/2015/03/31/%D0%A0%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%B2%D1%8B%D0%BC%D0%B8-%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8-this-%D0%B8-super-%D0%B2-Java.html"&gt;©JavaRush&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="java"></category><category term="programming"></category></entry><entry><title>Java собеседование. Коллекции</title><link href="https://stonedastronaut.github.io/java-sobesedovanie-kollektsii.html" rel="alternate"></link><updated>2015-08-03T19:46:14+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:java-sobesedovanie-kollektsii.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;Чем отличается ArrayList от LinkedList?
В моем рейтинге это один из двух самых популярных вопросов о коллекции, задают в 90% случаев. Вызвал у меня проблему на моем первом собеседовании на Junior Developer`а. Вкратце ответ на этот вопрос сводится к следующему: ArrayList это список, реализованный на основе массива, а LinkedList — это классический связный список, основанный на объектах с ссылками между ними.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Преимущества ArrayList: в возможности доступа к произвольному элементу по индексу за постоянное время (так как это массив), минимум накладных расходов при хранении такого списка, вставка в конец списка в среднем производится так же за постоянное время. В среднем потому, что массив имеет определенный начальный размер n (в коде это параметр capacity), по умолчанию n = 10, при записи n+1 элемента, будет создан новый массив размером (n * 3) / 2 + 1, в него будут помещены все элементы из старого массива + новый, добавляемый элемент. В итоге получаем, что при добавлении элемента при необходимости расширения массива, время добавления будет значительно больше, нежели при записи элемента в готовую пустую ячейку. Тем не менее, в среднем время вставки элемента в конец списка является постоянным. Удаление последнего элемента происходит за константное время. Недостатки ArrayList проявляются при вставке/удалении элемента в середине списка — это взывает перезапись всех элементов размещенных «правее» в списке на одну позицию влево, кроме того, при удалении элементов размер массива не уменьшается, до явного вызова метода trimToSize().&lt;/p&gt;
&lt;p&gt;LinkedList наоборот, за постоянное время может выполнять вставку/удаление элементов в списке (именно вставку и удаление, поиск позиции вставки и удаления сюда не входит). Доступ к произвольному элементу осуществляется за линейное время (но доступ к первому и последнему элементу списка всегда осуществляется за константное время — ссылки постоянно хранятся на первый и последний, так что добавление элемента в конец списка вовсе не значит, что придется перебирать весь список в поисках последнего элемента). В целом же, LinkedList в абсолютных величинах проигрывает ArrayList и по потребляемой памяти и по скорости выполнения операций. LinkedList предпочтительно применять, когда происходит активная работа (вставка/удаление) с серединой списка или в случаях, когда необходимо гарантированное время добавления элемента в список.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Что вы обычно используете (ArrayList или LinkedList)? Почему?
Это вопрос является слегка замаскированной версией предыдущего, так как ответ на этот вопрос приведет к постепенному изложению ответа на предыдущей вопрос. В 90% случае ArrayList будет быстрее и экономичнее LinkedList, так что обычно используют ArrayList, но тем не менее всегда есть 10% случаев для LinkedList. Я говорю, что обычно ArrayList использую, ссылаясь на тесты и последний абзац из предыдущего вопроса, но не забываю и про LinkedList (в каких случаях? так же последний абзац предыдущего вопроса помогает).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что быстрее работает ArrayList или LinkedList?
Еще одна замаскированная версия первого вопроса. Хитрее приведенных выше вариантов, что постановка вопроса подразумевает односложный ответ с выбором одного из предложенных вариантов, что, по задумке автора вопроса, как я понимаю, должно сразу выявить человека с неглубокими познаниями в collections. Правильным же действием будет встречный вопрос о том, какие действия будут выполняться над структурой. В итоге, диалог плавно переходит к ответу на первый вопрос.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Необходимо добавить 1млн. элемент, какую структуру вы используете?
Тоже довольно популярная скрытая версия первого вопроса. Так же постановка предполагает выбор одного из предложенных вариантов, хотя на самом деле информации для однозначного выбора нет. Нужно задавать дополнительные вопросы: в какую часть списка происходит добавление элементов? есть ли информация о том, что потом будет происходить с элементами списка? какие то ограничения по памяти или скорости выполнения? В целом, все тот же первый вопрос, но немного с другой стороны: вы через дополнительные вопросы, показываете глубину понимания работы Array и Linked List.
Однажды я сам «клюнул» на этот крючок, домыслив про себя, что добавить — это «вставить» в конец списка и усиленно продвигал ArrayList, хотя ничего не знал (и не пытался узнать) про дальнейшие действие с этим списком и возможные ограничения.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как происходит удаление элементов из ArrayList? Как меняется в этом случае размер ArrayList?
При удалении произвольного элемента из списка, все элементы находящиеся «правее» смещаются на одну ячейку влево и реальный размер массива (его емкость, capacity) не изменяется никак. Механизм автоматического «расширения» массива существует, а вот автоматического «сжатия» нет, можно только явно выполнить «сжатие» командой trimToSize().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Предложите эффективный алгоритм удаления нескольких рядом стоящих элементов из середины списка, реализуемого ArrayList.
Допустим нужно удалить n элементов с позиции m в списке. Вместо выполнения удаления одного элемента n раз (каждый раз смещая на 1 позицию элементы, стоящие «правее» в списке), нужно выполнить смещение всех элементов, стоящих «правее» n+m позиции на n элементов левее к началу списка. Таким образом, вместо выполнения n итераций перемещения элементов списка, все выполняется за 1 проход.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как устроена HashMap?
Вкратце, HashMap состоит из «корзин» (bucket`ов). С технической точки зрения «корзины» — это элементы массива, которые хранят ссылки на списки элементов. При добавлении новой пары ключ-значение, вычисляет хеш-код ключа, на основании которого вычисляется номер корзины (номер ячейки массива), в которую попадет новый элемент. Если корзина пустая, то в нее сохраняется ссылка на вновь добавляемый элемент, если же там уже есть элемент, то происходит последовательный переход по ссылкам между элементами в цепочке, в поисках последнего элемента, от которого и ставится ссылка на вновь добавленный элемент. Если в списке был найден элемент с таким же ключом, то он заменяется. Добавление, поиск и удаление элементов выполняется за константное время. Вроде все здорово, с одной оговоркой, хеш-функций должна равномерно распределять элементы по корзинам, в этом случае временная сложность для этих 3 операций будет не ниже lg N, а в среднем случае как раз константное время.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какое начальное количество корзин в HashMap?
Ответ здесь — 16. Отвечая, стоит заметить, что можно используя конструкторы с параметрами: через параметр capacity задавать свое начальное количество корзин.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какая оценка временной сложности выборки элемента из HashMap? Гарантирует ли HashMap указанную сложность выборки элемента?
Ответ на первую часть вопроса, можно найти в ответе на вопрос 7 — константное время необходимо для выборки элемента. Вот на второй части вопроса, я недавно растерялся. И устройство HashMap знал и про хеш-функцию тоже знал, а вот к такому вопросу не был готов, в уме кинулся вообще в другом направлении и сосредоточился на строении HashMap откинув проблему хеш-кода, который в голове всегда привык считать хеш-кодом с равномерным распределением. На самом деле ответ довольно простой и следует из ответа вопроса 7.
Если вы возьмете хеш-функцию, которая постоянно будет возвращать одно и то же значение, то HashMap превратится в связный список, с отвратной производительностью. Затем даже, если вы будете использовать хеш-функцию с равномерным распределением, в предельном случае гарантироваться будет только временная сложность lg N. Так что, ответ на вторую часть вопроса — нет, не гарантируется.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Роль equals и hashCode в HashMap?
Ответ на этот вопрос следует из ответа на вопрос 7, хотя явно там и не прописан. hashCode позволяет определить корзину для поиска элемента, а equals используется для сравнения ключей элементов в списке внутри корзины и искомого ключа.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Максимальное число значений hashCode()?
Здесь все довольно просто, достаточно вспомнить сигнатуру метода: int hashCode(). То есть число значений равно диапазону типа int — 2^32 (точного диапазона никогда не спрашивали, хватало такого ответа).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как и когда происходит увеличение количества корзин в HashMap?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Вот это довольно тонкий вопрос. Как показал мой мини-опрос, если суть устройства HashMap себе представляют многие более-менее ясно, то этот вопрос часто ставил собеседника в тупик.&lt;/p&gt;
&lt;p&gt;Помимо capacity в HashMap есть еще параметр loadFactor, на основании которого, вычисляется предельное количество занятых корзин (capacity*loadFactor). По умолчанию loadFactor = 0,75. По достижению предельного значения, число корзин увеличивается в 2 раза. Для всех хранимых элементов вычисляется новое «местоположение» с учетом нового числа корзин.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;В каком случае может быть потерян элемент в HashMap?
Этот интересный вопрос мне прислал LeoCcoder, у меня подобного не спрашивали и честно признаюсь, после прочтения сходу не смог придумать сценарий для потери элемента. Все опять же оказалось довольно просто, хоть и не так явно: допустим в качестве ключа используется не примитив, а объект с несколькими полями. После добавления элемента в HashMap у объекта, который выступает в качестве ключа, изменяют одно поле, которое участвует в вычислении хеш-кода. В результате при попытке найти данный элемент по исходному ключу, будет происходить обращение к правильной корзине, а вот equals (ведь equals и hashCode должны работать с одним и тем же набором полей) уже не найдет указанный ключ в списке элементов. Тем не менее, даже если equals реализован таким образом, что изменение данного поля объекта не влияет на результат, то после увеличения размера корзин и пересчета хеш-кодов элементов, указанный элемент, с измененным значением поля, с большой долей вероятности попадет совсем в другую корзину и тогда он уже совсем потеряется.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В чем отличия TreeSet и HashSet?
Начнем с того, что Set — это множество (так же называют «набором»). Set не допускает хранение двух одинаковых элементов. Формально говоря, термин «множество» и так обозначает совокупность различных элементов, очень важно, что именно различных элементов, так как это главное свойство Set. С учетом такого определения, пояснение про хранение одинаковых элементом не требуется, но в обиходе, понятие «множество» потеряло свой строгий смысл касательно уникальности элементов, входящих в него, поэтому все же уточняйте отдельно данное свойство множества.
TreeSet обеспечивает упорядоченно хранение элементов в виде красно-черного дерева. Сложность выполнения основных операций в TreeSet lg N. HashSet использует для хранения элементов такой же подход, что и HashMap, за тем отличием, что в HashSet в качестве ключа выступает сам элемент, кроме того HashSet (как и HashMap) не поддерживает упорядоченное хранение элементов и обеспечивает временную сложность выполнения операций аналогично HashMap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Устройство TreeSet?
Здесь достаточно краткого ответа, что TreeSet основан на красно-черном дереве. Как правило этого хватает и собеседник сразу переходит к следующему вопросу, у меня ни разу не спрашивали механизм балансировки дерева или другие подробности его реализации.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что будет, если добавлять элементы в TreeSet по возрастанию?
Обычно данный вопрос собеседник предваряет фразой, что в основе TreeSet лежит бинарное дерево и если добавлять элементы по возрастанию, то как они будут распределены по дереву.
Если нет точного представления об устройстве TreeSet, а есть общее понимание о том, что это бинарное дерево (в чем нас дополнительно уверяет собеседник), то данный вопрос может привести к интересному результату: все элементы после доабвления в обычное бинарное дерево будут находится в одной ветви длиной N элементов, что сводит на нет, все преимущества такой структуры, как дерево (фактически получается список). На самом, деле, как выше упоминалось в основе TreeSet лежит красно-черное дерево, которое умеет само себя балансировать. В итоге, TreeSet все равно в каком порядке вы добавляете в него элементы, преимущества этой структуры данных будут сохраняться.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;©habrahabr&lt;/p&gt;</summary><category term="habr"></category><category term="interview"></category></entry><entry><title>Строковый пул Java</title><link href="https://stonedastronaut.github.io/strokovyi-pul-java.html" rel="alternate"></link><updated>2015-07-30T21:39:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-30:strokovyi-pul-java.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Строковый пул, или множество строк, Java располагается в области памяти, именуемой &lt;strong&gt;Java Heap&lt;/strong&gt; – &lt;strong&gt;куча&lt;/strong&gt;, в которой хранятся все переменные, созданные программно вашим приложением. Естественно, появление этой структуры связано с оптимизацией способов хранения строк как объектов в языке.&lt;/p&gt;
&lt;p&gt;Тип &lt;strong&gt;String&lt;/strong&gt; – один из самых часто используемых в Java и довольно дорогой для хранения: &lt;strong&gt;4&lt;/strong&gt;-символьная строка занимает &lt;strong&gt;56 байт&lt;/strong&gt; памяти, т.е. реальные данные (4 символа) занимают только &lt;strong&gt;14%&lt;/strong&gt; выделенной под объект памяти. В связи с этим возникает необходимость оптимизировать способ хранения строк в памяти виртуальной машины. Так, было решено использовать подход Flyweight (&lt;em&gt;приспособленец&lt;/em&gt;): если используется множество одинаковых данных (объектов), то гораздо экономнее создать только &lt;em&gt;один&lt;/em&gt; экземпляр, чем несколько копий.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="1"&gt;1. Работа пула на примерах.&lt;/h2&gt;
&lt;p&gt;Давайте рассмотрим следующий пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringConcatenationExample&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Выводом этого фрагмента кода будет следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как видите, &lt;code&gt;str1&lt;/code&gt; и &lt;code&gt;str2&lt;/code&gt; ссылаются на один и тот же объект (т.к. равенство &lt;code&gt;==&lt;/code&gt; будет достигнуто только в случае равенства ссылок). Изобразить это можно следующим образом:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Java Pool" src="/static/img/java_pool.png" title="Java Pool" /&gt;&lt;/p&gt;
&lt;p&gt;Как видите, если вы создаете новый объект &lt;code&gt;String&lt;/code&gt; и вручную, т.е. литерами, задаете его значение (&lt;code&gt;"Hello, world"&lt;/code&gt;), а объект с таким значением уже есть в пуле, то новая строка не создается, а просто переменная, являющаяся указателем, ссылается на уже созданный объект с тем же значением. Равенство, естественно, проверяется методом &lt;code&gt;String.equals(String)&lt;/code&gt;. Таким образом, строковые переменные, имеющие при инициализации одинаковые значения, будут указывать на один и тот же объект.&lt;/p&gt;
&lt;p&gt;Теперь вы понимаете, почему строки в Java являются неизменяемыми: если бы в одном потоке была создана строка, и с таким же значением в другом потоке была бы создана еще одна строка, то изменение строки в одном из потоков повлекло бы ее изменение в другом.&lt;/p&gt;
&lt;p&gt;Сравним результат выполнения предыдущего фрагмента кода с этим:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringConcatenationExample&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вывод в данном случае будет:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;т.к. объекты, на которые указывают &lt;code&gt;str1&lt;/code&gt; и &lt;code&gt;str3&lt;/code&gt; уже отличаются, ведь для создания &lt;code&gt;str3&lt;/code&gt; был вручную вызван конструктор (&lt;code&gt;new&lt;/code&gt;), что повлекло создание нового объекта. И теперь этот объект помещается не в строковом пуле, а в "обычном" сегменте памяти JVM.&lt;/p&gt;
&lt;p&gt;Теперь рассмотрим такой пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringConcatenationExample&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str1 :&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, str2 :&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как было указано выше, строки в Java, как объекты, изменить нельзя. Поэтому когда в коде программы мы "изменили" &lt;code&gt;str2&lt;/code&gt; на самом деле был создан новый объект-строка с новым значением. При этом &lt;code&gt;str1&lt;/code&gt;, очевидно, остался указывать на тот же объект, что и раньше, поэтому равенство &lt;code&gt;str1 == str2&lt;/code&gt; на этот раз не выполнилось.&lt;/p&gt;
&lt;p&gt;Теперь рассмотрим код, где для конкатенации используется &lt;code&gt;StringBuffer&lt;/code&gt;. Его использование гарантирует то, что строка находится не в строковом пуле, а в "нормальной" области памяти.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringConcatenationExample&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;bufferRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Type in a string :&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bufferRead&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str1 :&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, str2 :&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Результатом выполнения этого кода будет следующий вывод:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Type in a string :abc
str1 :abc, str2 :abc
false
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Таким образом, в результате тестирования вышележащих сниппетов можно заключить, что строковые переменные будут ссылаться на один и тот же строковый объект только в том случае, если эти объекты были инициализированы одинаковыми значениями.&lt;/p&gt;
&lt;h2 id="2"&gt;2. Ручное помещение строки в пул&lt;/h2&gt;
&lt;p&gt;Как мы заметили, строковый пул не всегда используется автоматически. Но что же делать, если его использование может существенно уменьшить количество используемой памяти? Пусть мы создаем класс, описывающий адрес человека. Как известно, более 10 миллионов человек сегодня проживает в Москве. Представляете, как много места может занять использование отдельного объекта-строки для каждого из жителей Москвы? Для того, чтобы вручную поместить строку в пул, необходимо использовать метод &lt;code&gt;String.intern()&lt;/code&gt;. Рассмотрим пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;String &lt;span class="nv"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
String &lt;span class="nv"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

String &lt;span class="nv"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; new String&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

System.out.println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; s2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
System.out.println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; s3&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3.intern&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
System.out.println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;s3&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Результат выполнения этого кода будет представлять из себя следующий набор строк:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть вызов этого метода равносилен созданию строки, для которой значение введено заново с использованием литер.&lt;/p&gt;
&lt;p&gt;Но будьте аккуратны. До Java 7 в памяти существовала отдельная область &lt;em&gt;PermGen&lt;/em&gt;, в которой и располагался пул, которому было отведено ограниченное количество памяти. Начиная с &lt;strong&gt;Java 7&lt;/strong&gt;, строковый пул помещается в &lt;strong&gt;той же&lt;/strong&gt; области кучи, &lt;strong&gt;что и все&lt;/strong&gt; остальные объекты, что делает строки доступными для сборщика мусора. Указать объем отводимой под строки памяти (которые хранятся в виде хэш-мапа) можно с использованием опции &lt;code&gt;XX:StringTableSize&lt;/code&gt;. Так Вы, фактически, создаете свой &lt;em&gt;собственный&lt;/em&gt; пул строк, но впрочем, не забивайте голову.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://examples.javacodegeeks.com/core-java/lang/string/java-string-pool-example/"&gt;&lt;em&gt;©javacodegeeks&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="java"></category><category term="programming"></category></entry></feed>