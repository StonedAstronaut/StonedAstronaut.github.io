<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Astro blog</title><link href="https://stonedastronaut.github.io/" rel="alternate"></link><link href="https://stonedastronaut.github.io/feeds/copypaste.atom.xml" rel="self"></link><id>https://stonedastronaut.github.io/</id><updated>2015-12-10T00:30:00+06:00</updated><entry><title>10 советов, которые помогут вам раскрыть свой потенциал разработчика</title><link href="https://stonedastronaut.github.io/10-sovetov-kotorye-pomogut-vam-raskryt-svoi-potentsial-razrabotchika.html" rel="alternate"></link><updated>2015-12-10T00:30:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-12-10:10-sovetov-kotorye-pomogut-vam-raskryt-svoi-potentsial-razrabotchika.html</id><summary type="html">
&lt;p&gt;Многие рекрутеры признаются, что им тяжело найти талантливого и достаточно искусного программиста, который не боится учиться дальше и готов к любым тяготам работы. Своим опытом общения с молодыми (и не очень) специалистами поделился Аарон Стэннард, сооснователь и технический директор компании Petabridge, которая создает распространяемое ПО для .Net разработчиков. В своем блоге он определил 10 привычек, которые мешают развитию карьеры многих разработчиков. Мы внимательно изучили его статью и сформулировали несколько советов, которые помогут от этих привычек избавиться.&lt;/p&gt;
&lt;h3 id="1"&gt;1. Не бойтесь изучать новые инструменты, языки и фреймворки&lt;/h3&gt;
&lt;p&gt;При изучении чего-то нового вы, скорее всего, стараетесь определить все плюсы и минусы объекта исследования. Если вы стараетесь найти как можно больше минусов в новом инструменте чтобы не изучать дальше это очень опасный момент.&lt;/p&gt;
&lt;p&gt;Скорее всего, у вас уже есть несколько «универсальных» инструментов, которые вы искренне любите и применяете повсеместно. Слово «универсальные» не зря взято в кавычки, ведь на самом деле таких инструментов не существует. Не цепляйтесь за свои любимые языки и фреймворки, изучайте и используйте новые. Хороший специалист всегда знает больше одного языка, и по статистике больше зарабатывает.&lt;/p&gt;
&lt;h3 id="2"&gt;2. Делайте коммиты, даже если не «допилили»&lt;/h3&gt;
&lt;p&gt;Реже всего делают коммиты те разработчики, которые не умеют воспринимать критику со стороны коллег или боятся проверки начальства. Такие сотрудники тормозят работу всей группы, потому что никто не знает, как много они сделали и чем они занимаются в данный момент. Именно эти люди ответственны за задержки и баги, которые проявляются в последнюю минуту.&lt;/p&gt;
&lt;p&gt;Этот совет может показаться бесполезным многим студентам и программистам-одиночкам. Если вы редко делаете коммиты, вам тяжелее отследить и учесть все внесенные изменения, а также оценить прогресс.&lt;/p&gt;
&lt;h3 id="3"&gt;3. Вы думаете, что достаточно много знаете&lt;/h3&gt;
&lt;p&gt;Это касается начинающих программистов, которые не согласны с первым пунктом статьи. Скорее всего, вы постоянно учитесь, много читаете о новейших средствах разработки и используете только их. Вы легко можете рассказать, что можно сделать с помощью, например, ключевых слов async/await в C#. Но вы уверены, что понимаете, как они работают?&lt;/p&gt;
&lt;p&gt;Не стоит использовать новый инструмент только потому, что он новый. Даже если вы знаете, что он делает, постарайтесь разобраться в том, как он это делает. Если вы воспользуетесь этим советом, поведение вашего кода при отладке станет более предсказуемым, вы будете быстрее справляться с багами.&lt;/p&gt;
&lt;h3 id="4"&gt;4. Хватит анализировать&lt;/h3&gt;
&lt;p&gt;Умение анализировать еще никому не помешало, а вот аналитический паралич очень даже. Хватит анализировать, начинайте писать код!&lt;/p&gt;
&lt;p&gt;Аналитический паралич это бич многих разработчиков. Возможно, вы слишком много сомневаетесь потому что когда-то приняли неверное решение. Помните, что обдумывать гораздо легче, чем воплощать в жизнь. Ищите решение, пока не найдете наиболее подходящее. Не нужно бесконечно анализировать и сравнивать его с другими вариантами!&lt;/p&gt;
&lt;p&gt;Среднестатистический разработчик боится сделать ошибку, потому что не хочет выглядеть глупо. Опытного разработчика это не волнует. Он пишет какой-нибудь код, потом тестирует. И если результат его не устраивает, то удаляет все и пишет заново. Сильный разработчик понимает опасность аналитического паралича: вы как бы работаете, но на самом деле ничего не делаете.&lt;/p&gt;
&lt;h3 id="5"&gt;5. Развивайте свои навыки&lt;/h3&gt;
&lt;p&gt;Обычный разработчик тратит много времени на изучение возможностей того или иного API. Он вкладывает массу времени в освоение утилит или структуры 3D-графиков, но так и остается штампующим заурядные продукты, среднестатистическим программистом.&lt;/p&gt;
&lt;p&gt;Если вы хотите быть талантливым разработчиком, уделяйте больше времени совершенствованию полученных навыков и знаний. Помните, что главным фактором, отличающим начинающего разработчика от опытного, является умение быстро учиться и работать. Думаете, что писать одновременно быстро и хорошо невозможно? Научитесь работать быстро, все остальное придет с опытом.&lt;/p&gt;
&lt;p&gt;Среднестатистический программист ничего не вкладывает в свои инструменты, процесс разработки и IDE. Подумайте о том, как вы работаете. Как вы тестируете свои программы и ищете баги? Вы когда-нибудь экспериментировали с поиском решения проблемы, искали новые пути, которые могут помочь создать более удобный в сопровождении код? Когда в последний раз вы меняли IDE или текстовый редактор? Насколько автоматизирован ваш процесс разработки и тестирования?&lt;/p&gt;
&lt;p&gt;Проблема может быть не в вашем коде, а в том, как вы его пишете.&lt;/p&gt;
&lt;h3 id="6"&gt;6. Не стесняйтесь просить о помощи&lt;/h3&gt;
&lt;p&gt;Один мой хороший друг часто просил помощи у одногруппников. Если он не находил нужную информацию в сети, то обращался к более опытным ребятам. Конечно, над ним иногда посмеивались, только ему было все равно.&lt;/p&gt;
&lt;p&gt;Однажды этот парень показал свой код и мне. Ни один другой наш одногруппник не писал так понятно и хорошо, как он. Даже при том, что он всей душой ненавидел комментарии.&lt;/p&gt;
&lt;p&gt;Никогда не бойтесь показать свою работу другому программисту и попросить совет. Мир не рухнет, если вы скажете «я не знаю, как это сделать». Попросив о помощи вы гораздо быстрее решите проблему и научитесь писать так, чтобы вас понимали сотрудники.&lt;/p&gt;
&lt;h3 id="7"&gt;7. Научитесь писать понятный код&lt;/h3&gt;
&lt;p&gt;Как единственный ребенок в семье не привык делиться своими игрушками, так и вы не можете объяснить свой код другому программисту. Умение работать в команде крайне важно. Научитесь писать так, чтобы ваш код понимали не только ваши сотрудники, но и члены других команд разработчиков.&lt;/p&gt;
&lt;p&gt;Большинство разработчиков и не задумываются о том, что кто-то другой будет работать с их кодом. А между тем нечитабельный код может стать источником многих проблем. Опытные разработчики понимают свой «технический долг» и стараются писать так, чтобы их понимали коллеги.&lt;/p&gt;
&lt;h3 id="8"&gt;8. Научитесь читать чужой код&lt;/h3&gt;
&lt;p&gt;К счастью, вы не единственный программист на этой планете. Скорее всего, с вашей проблемой сталкивался кто-то еще, и давно нашел оптимальное решение. Это не значит, что вы всегда должны копипастить и не пытаться решать проблему самостоятельно.&lt;/p&gt;
&lt;p&gt;Опытные разработчики знают цену времени и не изобретают заново велосипеды. Они используют существующие библиотеки и инструменты, старательно их изучают и вносят поправки.&lt;/p&gt;
&lt;p&gt;Читать чужой код гораздо сложнее, чем писать собственный, но хорошие специалисты не зря вкладывают силы и время на его изучение.&lt;/p&gt;
&lt;h3 id="9"&gt;9. Представьте свой продукт с точки зрения пользователя&lt;/h3&gt;
&lt;p&gt;Даже если вы создаете инструменты для разработчиков, научитесь смотреть на свой продукт со стороны. Программист решает не только технические проблемы: ваша работа должна соответствовать бизнес-требованиям компании.&lt;/p&gt;
&lt;p&gt;Многие разработчики забывают об этом. Они знают, что должен делать их код и отрабатывают пару-тройку сценариев использования. Они забывают о том, что пользователь может случайно нажать не на ту кнопку или закрыть окно программы до завершения операции. Вместо отработки нескольких сценариев использования они пишут гору документации.&lt;/p&gt;
&lt;p&gt;Научитесь смотреть на свой продукт с точки зрения конечного пользователя. Как ваша программа облегчит им жизнь? Удобен ли интерфейс? Какие варианты использования могут быть? Если вы разрабатываете продукт самостоятельно, привлеките к составлению требований и тестированию друзей и знакомых. Работа пойдет гораздо быстрее, если вы точно знаете, что нужно вашим пользователям.&lt;/p&gt;
&lt;h3 id="10"&gt;10. Установите денежную стоимость вашего ПО&lt;/h3&gt;
&lt;p&gt;Даже технически подкованные разработчики могут не понимать ценность своего продукта, потому что не могут взглянуть на него со стороны предпринимателя или организации.&lt;/p&gt;
&lt;p&gt;Опытные разработчики умеют принимать правильные бизнес-решения и определять, на что потратить время. Они часто задают такие вопросы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Является ли этот API настолько важным, чтобы я тратил на него свое время?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сколько времени займет изучение этого фреймворка?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;У меня есть две недели на решение проблемы. Что я должен изучить, чтобы с легкостью решать подобные проблемы в будущем?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Среднестатистический разработчик этого не делает. Он изучает спецификации и слепо им следует, даже не пытаясь понять, насколько его работа соответствует бизнес-требованиям компании и как она влияет на членов команды.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;©skillkit&lt;/em&gt;&lt;/p&gt;</summary><category term="advice"></category></entry><entry><title>Перевод статьи Пола Грэхема о «причудах» программистов</title><link href="https://stonedastronaut.github.io/perevod-stati-pola-grekhema-o-prichudakh-programmistov.html" rel="alternate"></link><updated>2015-08-10T19:10:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-10:perevod-stati-pola-grekhema-o-prichudakh-programmistov.html</id><summary type="html">&lt;p&gt;По просьбам трудящихся — перевод статьи Пола Грехема (Paul Graham) ‘Holding a Programm in One's Head’.&lt;/p&gt;
&lt;p&gt;Хороший программист, работающий над собственным проектом, может удерживать его целиком в голове так, как удерживает математик уравнение, которое решает. Математики не решают задачи на листке бумаги, так, как этому учат детей в школе. Вместо этого большинство операций они производят в уме, создавая некий образ в голове, примерно как мы можем мысленно представить образ дома, в котором провели детство. С программированием все точно так же. Вы можете создать некий образ всего текущего проекта в голове и рассмотреть его тщательно со всех сторон.&lt;/p&gt;
&lt;p&gt;Это чаще всего бывает востребовано на начальном этапе, когда одной из важнейших вещей является возможность поменять то, что ты делаешь. Не просто решить задачу другим способом, а поменять саму ее суть.&lt;/p&gt;
&lt;p&gt;Но уместить целую программу в голове не так то просто. Если по какой-либо причине вы не обращались к коду несколько месяцев, может потребоваться до нескольких дней, чтобы опять в него вникнуть. Даже когда вы активно работаете над программой, для настройки собственного сознания на работу над текущей задачей может потребоваться до получаса каждое утро. И это лишь в лучшем случае. Типичные программисты, работающие в офисных условиях, не могут справиться с этим и до самого окончания рабочего дня. Говоря другим языком, типичный офисный программист никогда не понимает целиком задачи, которую ему приходится решать.&lt;/p&gt;
&lt;p&gt;Даже лучшие программисты порою не имеют цельного представления программы в своей голове. Если вам кажется, что последнее относится и к вам, то ниже предлагаются способы решения этой проблемы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Как можно меньше отвлекайтесь. Отвлечение внимания может сыграть плохую роль в работе людей множества профессий, но особенно это явно для программистов, которые часто работают с количеством деталей, которые приходится помнить, превышающим все мыслимые и немыслимые пределы.
Последствия от переключения внимания на постороннюю задачу зависят не столько от его продолжительности, сколько от степени отвлечения внимания этой задачей. Так, например, программист может выйти из офиса, перекусить бутербродом сидя на лавочке, ни на минуту не отвлекаясь в это время от программы, над которой работает.
Особенно вредными могут быть незапланнированные ситуации, которые отнимают гораздо больше внимания, чем запланированные, перед которыми программист обычно и не начинает никаких серьезных задач.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Работайте запоем. Т.к. каждый раз перед началом работы необходимо втянуться в текущую задачу, очевидным решением по минимизации ненужных затрат является долгая работа без значительных перерывов. Разумеется, бесконечно работать невозможно, и в один момент вы поймете, что окнчательно «отупели» от работы. Быстрота наступления такого состояния зависит исключительно от особенностей конкретного человека. Я слышал о людях, которые работали по 36 часов подряд, дни напролет. Мой максимум это 18 часов, но наиболее комфортно я себя чувствую при работе не более 12 часов подряд.
Оптимальный вариант это не тот, который максимально допускают ваши физические и, пожалуй, психические способности. Иногда, когда вы делаете перерыв в работе, а затем возвращаетесь, к вам приходят неожиданные решения, выработанные вашим мозгом пока ваши мысли, казалось бы, были далеки от программного кода.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Пишите на лаконичных языках. Мощные языки программирования делают ваши программы короче. Программисты думают о программах, по крайней мере частично, на том языке, на котором их пишут. Чем лаконичней язык, тем короче программа, и тем легче восстановить в своей памяти ее образ.
Вы можете достигнуть еще большего эффекта используя восходящий стиль программирования, когда вы пишете программы состоящие из абстрактных слоев, нижние из которых создают базу и программную оболочку для верхних. Если вы будете делать это правильно, вам достаточно будет хранить в своей памяти лишь самый верхний слой.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Постоянно переписывайте программы. Переписывая код, вы зачастую улучшаете архитектуру приложения. Даже если и нет, в этом есть преимущество: чтобы переписать программу заново, необходимо полностью понимать ее суть. Так вы сможете воссоздать более точную картину программы у себя в голове.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Пишите код, который удобно читать вам. Все программисты знают как хорошо писать код, который будет легко читать. Но вы сами являетесь наиболее важным читателем своего кода. Особенно в начале проекта; создание прототипа будущего приложения это ваш диалог с самим собой. Когда вы пишете сами для себя, перед вами стоят совершенно иные приоритеты. Когда вы пишете для других, ваш код может размазываться на множество строк для лучшей читабельности. Когда же вы пишете код для того, чтобы его можно было легко восстановить в памяти, вы скорее предпочтете краткость.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Работайте маленькими группами. Когда вы представляете программу в своем воображении, вы уделяете основное внимание собственноручно написанному коду, части же, написанные другими людьми, вы понимаете не настолько хорошо и не можете так живо представить их. Таким образом, чем меньше программистов работают над проектом, тем целостнее вы способны представить его образ. Если вы работаете над ним в одиночку, вы способны на все.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не допускайте редактирование одного и того же кода несколькими людьми. Как я уже сказал, вы никогда не сможете понять чужой код так же хорошо как собственный. Не имеет значения как тщательно вы его прочитали, вы всего лишь прочитали его — не написали. Таким обазом, если участок кода написан несколькими людьми, то ни один из них не имеет полного и цельного его представления.
И безусловно, вы не сможете что-то кардинально поменять в нем. Не потому что вам нужно для этого разрешение, а потому что вы просто не можете представить себе этого. Реорганизация кода, написанного несколькими людьми это как реорганизация законов мироздания. Реорганизация собственного кода, это просто другая интерпретация неоднозначного образа программы, находящегося в вашей голове.
Если вам необходимо несколько людей для разработки одного проекта, разделите его на части и выделите по одной каждому программисту.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Начинайте с малого. Чем более досконально вы изучаете программу, тем легче вам создать ее мысленный образ. Вы можете представлять отдельные части готовой программы как черные коробки выполняющие свои функции не вдаваясь в детали реализации до тех пор, пока не будете к этому готовы. Когда же вы начинаете новый проект, вам просто необходимо удерживать его в голове полностью. Если вы начнете со слишком сложной и объемной задачи, вы, вероятно, никогда не сможете охватить ее целиком. Если перед вами стоит подобная задача, начните не с ее формального описания, а с написания прототипа, который решает одну из ее подзадач. Каковы бы ни были преимущества планирования, они зачастую не так значительны по сравнению с преимуществами, которые вы получаете от возможности держать весь проект у себя в голове.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Удивительно как часто программисты придерживаются всех восьми пунктов даже не подозревая об их существовании. Когда у кого-то появляется идея, ему приходится заниматься ею вне рабочего времени, так как она не имеет официальной поддержки руководства. Это приводит к более продуктивной работе в виду отсутствия отвлекающих факторов. Ведомый вперед чистым энтузиазмом программист работает ночи напролет. Т.к. его проект носит исключительно экпериментальный характер, он пишет код не на языках, являющихя корпоративным стандартом, а на лаконичных скриптовых языках. Он полностью переписывает программу заново, что не получило бы одобрения вышестоящих людей, будь это официальной разработкой. Но в данном случае это личный проект, и он хочет сделать его идеально. Учитывая, что никто кроме него не увидит код, он пишет его как можно более сжато и кратко, так, чтобы было легче взяться за него после перерыва. Проектом занято лишь небольшое кол-во людей, даже если он пишет его и не один, т.к. изменения кода происходят так быстро, что нет возможности подключать к проекту кого-то еще.
И наконец, он начинает с малого, потому что его задумка изначально действительно была небольшой и скромной.&lt;/p&gt;
&lt;p&gt;Еще более удивительным является число официальных проектов, которые каким-то образом умудряются нарушать все восемь «правил». И в самом деле, если вы взглянете на методы разработки программного обеспечения в большинстве организаций, то увидите что они как будто бы нарочно делают все неправильно. В некотором роде так и есть. Одной из отличительных черт организаций является восприятие людей как взаимозаменяемых частей общего механизма. Это работает хорошо для задач, допускающих распараллеливание задач между участниками, таких, например, как война. Во всей истории нет ни одного упоминания случая, когда хорошо организованная армия натренированных наемников уступала бы армии, состоящей из самостоятельных воинов, насколько бы доблесными они ни были. Но мыслительный процесс не очень то можно распределить между людьми. А что такое программирование, если не мыслительный процесс.&lt;/p&gt;
&lt;p&gt;Не совсем верно утверждение, что организации отрицают возможность быть зависимыми от одного гениального сотрудника. Просто в нашем сегодняшнем понимании, организации по определению должны не допускать этого.&lt;/p&gt;
&lt;p&gt;Возможно, нам стоит дать определение новому типу организаций, которые бы использовали совместную деятельность отдельных сотрудников без необходимости для них быть взаимозаменяемыми. В некоторой степени рынок можно назвать подобного рода организацией, хотя более удачным описанием было бы описание рынка как вырожденного случая, того, что получается само собой, когда организация неуместна.&lt;/p&gt;
&lt;p&gt;Может быть нам стоит выбрать некий обходной путь и сделать так, чтобы программисты работали отлично от других сотрудников. Вероятно для больших компаний оптимальным решением будет не производить идеи самостоятельно, а закупать их у других. Несмотря на то, какое из решений будет уместно в каждом конкретном случае, необходимо сначала осознать существование проблемы. В самой фразе «компания разработки ПО» заключено противоречие. Слова как будто отталкиваются друг от друга в противоположных направлениях. Любой хороший программист будет чувствовать себя в чужой тарелке, находясь в большой организации, т.к. организации придуманы такими, чтобы недопускать того, чего программист больше всего жаждет.&lt;/p&gt;
&lt;p&gt;Хороший программист так или иначе справляется со множеством задач. Однако во многих случаях для этого ему приходится чуть ли не организовывать восстание против собственной компании. Такое поведение обусловлено самими требованиями к его работе. Программисты с головой уходят в программирование, забывая о других своих обязанностях, бросаются писать код, не описав его спецфикаций, переписывают уже работающий код не потому что безответственны. Они предпочитают работать в одиночку и гневаются на здоровающиеся головы коллег, периодически показывающиеся из дверного проема, не потому что не дружелюбны или замкнуты. Этот кажущийся совершенно случайным набор привычек в их поведении имеет единственную причину: необходимость держать в своей голове весь проект целиком.&lt;/p&gt;
&lt;p&gt;Поможет или нет понимание этого большим компаниям, оно безусловно может помочь их конкурентам. Наиболее слабое место таких компаний в том, что они не позволяют программистам выполнять значимую работу. Если вы маленькая начинающая компания, то воспользовавшись этим вы можете составить им значительную конкуренцию. Просто учитывайте особенности задачи, которую мозг программиста должен брать на себя целиком.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©megamozg&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Неочевидный способ борьбы с прокрастинацией</title><link href="https://stonedastronaut.github.io/neochevidnyi-sposob-borby-s-prokrastinatsiei.html" rel="alternate"></link><updated>2015-08-10T17:05:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-10:neochevidnyi-sposob-borby-s-prokrastinatsiei.html</id><summary type="html">&lt;p&gt;Наверняка, многие слышали о таком понятии, как “состояние потока”. Сейчас выходит много умных книжек и статей на эту тему. Но если не вдаваться в подробности и говорить простыми словами, то это такое состояние, в котором лучше всего работать. Концентрация и вовлеченность в таком состоянии максимальны, правильные решения приходят в голову быстро и естественно, ничто окружающее не отвлекает: ни захламленный рабочий стол, ни неудобное кресло, ни поздний час или голодный желудок.&lt;/p&gt;
&lt;p&gt;Все это здорово, и каждый из нас, скорее всего, вспомнит что-то из своего опыта. Но проблема в том, что “перестроить” себя в такое состояние не просто, а вот “вывалиться” из него очень легко. Особенно, если речь идет о скучной или непонятной работе, в этом случае «инерция для входа” особенно высока. Размышляя недавно обо всем этом, я понял, что периодически неосознанно использовал один прием, которым и хочу поделиться.&lt;/p&gt;
&lt;p&gt;Итак, представим, что у нас есть некая задача, которую надо сделать как можно быстрее, и пускай она не очень нас вдохновляет, чтобы сразу с энтузиазмом на нее бросаться. Почему? Может быть, это слишком масштабная проблема, к которой непонятно с какой стороны подступиться. Или может быть, это “наследство”, перешедшее к нам от предыдущих разработчиков, и при виде которого, наш внутренний перфекционист плачет кровавыми слезами, но на переписывание с нуля, времени в плане не предусмотрено. Или же, наконец, это может быть просто скучное задание.&lt;/p&gt;
&lt;p&gt;Чтобы сделать хоть что-то, человек должен себя замотивировать. И чаще всего, наш разум для этого использует два классических способа: “метод кнута” и “ метод пряника”. Метод кнута основывается на страхе. Если не сделаю работу – получу нагоняй от начальника/заказчика, не получу зарплату, не расплачусь за ипотеку, окажусь на улице, нечего будет есть и т.д. Короче, будет все очень плохо. Метод пряника, напротив, больше напоминает морковку перед осликом. Сделаю хорошо работу – оценит начальник, получу повышение и премию, получу внеочередной отгул, буду отдыхать и развлекаться, и все будет классно.&lt;/p&gt;
&lt;p&gt;И эти способы отлично работают в случае, когда “мотиваторы” находятся в непосредственной близости. Т.е. понимание того, что дедлайн для важнейшего проекта прошел месяц назад, а банк, выдавший вам кредит, каждые полчаса названивает с угрозами, думаю, сильно ускорит вашу работоспособность и эффективность. Аналогично, на работоспособность повлияет и уверенность в том, что результаты вашей работы над этой конкретной задачей непосредственно повлияют на трудоустройство в Google.&lt;/p&gt;
&lt;p&gt;Но, как только, мотиваторы скрываются из прямой видимости (есть еще время), любая потеря концентрации ведет к прокрастинации, или, проще говоря, к отвлечению от неприятной работы в просмотре новостей, серфинге по социальным сетям или раскладывании солитера. Могу сказать из своего опыта, что особенно это сильно проявляется в случае, когда работа ведется из дома.&lt;/p&gt;
&lt;p&gt;Есть ли какие-то альтернативные способы войти в “состояние потока”? На мой взгляд, один из таких обходных путей, это начать работу с интересной мелочи. Из всего объема проекта, несмотря на приоритеты и запланированные этапы разработки, выбирается какая-то интересная мелочь. Для программиста, это может быть какая-то незначительная, но прикольная “фишка”, для дизайнера – второстепенная и неважная иконка.&lt;/p&gt;
&lt;p&gt;Конечно, можно сказать, что на какую-то неважную фигню будет потрачено пару часов времени, которые лучше было бы потратить на действительно важные и приоритетные задачи. Но главное здесь в том, что в процессе работы над этими мелочами, мы входим в рабочее состояние, разгоняемся до необходимого состояния. И первоначальный интерес здесь выступает в роли некого ускорителя и защиты от прокрастинации (силы трения). Главное, не забыть потом переключиться на нужные задачи, чтобы не начать клепать еще десять “фишек” и новую сотню иконок.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©geektimes&lt;/em&gt;&lt;/p&gt;</summary><category term="geektimes"></category></entry><entry><title>Как в 20 лет я стал зарабатывать по 2-3K евро в месяц на Google Adsense, и чем это закончилось</title><link href="https://stonedastronaut.github.io/kak-v-20-let-ia-stal-zarabatyvat-po-2-3k-evro-v-mesiats-na-google-adsense-i-chem-eto-zakonchilos.html" rel="alternate"></link><updated>2015-08-03T20:11:59+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:kak-v-20-let-ia-stal-zarabatyvat-po-2-3k-evro-v-mesiats-na-google-adsense-i-chem-eto-zakonchilos.html</id><summary type="html">&lt;p&gt;Моя история может быть полезна всем, кто уже начинает зарабатывать на своем веб-сайте или только хочет попробовать.
Меня зовут Александр. Я родился в Казахстане в 1992 году. В 12 лет я потерял отца и переехал в Приднестровье, а затем и в Румынию, когда мне было 16 лет. В данный момент заканчиваю в Румынии университет. В будущем планирую двинуть в Лондон и окончить магистратуру по e-commerce. Семейная трагедия придала огромный импульс в том, чтобы учиться делать деньги разными способами, от купли и продажи металлолома в поселке городского типа до заработка на веб-сайте в интернете.&lt;/p&gt;
&lt;p&gt;В данной публикации я затрону 3 самые важные темы, которые отражают мой опыт:
I. Веб-сайт:
— Деньги на создание сайта;
— Какую платформу и хостинг выбрал для веб-сайта;
— С какими проблемами сталкивался.
II. Продвижение через Фэйсбук и подписчиков:
— Как за полтора года я сделал 250 тыс. подписчиков, которые приносили мне большой (для румынского медиа) трафик;
— Стратегии использования Фэйсбук-страниц как источника дохода для веб-сайта.
III. Монетизация через Google Adsense:
— Как начать;
— Пару лайфхаков, как поднять количество кликов по рекламе;
— Как не переборщить.
Предупреждаю, излагать буду в хронологическом порядке, вы поймете связь, а важные советы буду помечать вот так: ***&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Как все начиналось
В 2011 году (я тогда заканчивал среднюю школу) сделал фан-страницу на Facebook {Nu ai sa crezi}, где постил разную интересную информацию с книг и рунета (в переводе на румынский язык), а так же большое количество фотографий по теме (вы можете увидеть их по этой ссылке). Получал много замечаний. Ну, что там замечания… меня покрывали 10-ти этажным матом за орфографические и лексические ошибки, так как тогда не очень хорошо румынским языком. Тем самым пользователи своими высказываниями помогали мне изучать еще лучше румынский язык. Помню, за месяц я набрал 10 тысяч пользователей на фан-странице, а дальше процесс сам запустился… Люди «комментили» и «лайкали» мои посты, тем самым увеличивая охват и популярность страницы. Внимание, ответ на вопрос, как я сделал первые 10 тыс лайков:
*** У моих знакомых на «Фэйсбуке» большое количество людей в друзьях. У кого 500 друзей, у кого 3 тысячи, у кого по 100-200; я не выпускал никого из виду. На каждой вечеринке, а их было много, перед тем, как перейти к вину или пиву, я вежливо (при необходимости добавляя долю ироничной жалости или грубости) просил сделать друзей администраторами страницы, это позволяло мне приглашать всех их друзей ставить лайки, отмечая мою страницу как понравившуюся. Данный способ и сейчас эффективен, к вашему счастью «Фэйсбук» сделал эту опцию видимой для всех пользователей страницы (те, кто «лайкнул» ее), и нет никакой необходимости назначать вашего друга админом, чтобы отправить приглашение.
Расширяйте как можно больше свою армию друзей и знакомых и помогайте друг другу.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как я создавал веб-сайт
Далее передо мной возник вопрос, как сделать сайт и монетизировать его… Нужны были деньги для хостинга и веб-сайта.
&lt;em&gt;В тот период я начал торговать недорогой фэшн-бижутерией на центральной улице возле антикварной лавки, рядом с мной стояли хэнд-мэйд умельцы, которые продавали свои собственные изделия, и все мы вместе платили арендую плату за место. Но почему-то умельцы смотрели косо в мою сторону, так как девушки-студентки наседали на мою бижутерию (которую я покупал килограммами и продавал поштучно&lt;/em&gt;) как пчелы на мед. Никогда не любил зависть.
Так за сезон я сделал достаточную сумму денег, чтобы оплатить первый год в университете, купить ноутбук, а остальное инвестировать в создание веб-сайта и его продвижение.
&lt;em&gt;Первое, что я сделал, это зарегистрировал доменное имя и купил простой хостинг у американцев, который обошелся мне в триста с лишним долларов в год. Здесь я совершил ошибку, купив всяких тупых функций, которые вообще НЕ НУЖНЫ, так как в этом ничего не понимал тогда.
Хватило мне его на 3 месяца, дальше возник вопрос, что делать, чтобы сервер не падал от большого количества трафика. Если на сайт заходило 100 чел, он падал.
Значит, отказался я от их услуг и по совету службы поддержки купил VPS-cервер в Канаде — уже за 450 долларов в год, но который держал 1 000-3 000 пользователей на сайте одновременно.
&lt;/em&gt;Для сайта я использовал Wordpress — cамую популярную платформу среди блогеров и даже серьезных новостных сайтов. .
Потом я купил тему Wordpress и установил ее… И снова ошибка! Ошибка состояла в том, что я не обращал внимания на корректность кода или оптимизацию, так как не разбирался в этом. Так что перед покупкой советуйтесь с программистами или с теми, кто в курсе.
Когда сайт был готов, страница на Фэйсбуке уже имела 30 тыс лайкнувших ее пользователей. Были времена, когда мои посты на сайте доходили до 100 тыс, что приносило мне большое количество трафика.
Вывод: не жалуйтесь, что у вас нет лишних денег на создание профессионального блога, зарабатывайте любыми способами (желательно, легальными).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Один в поле не воин, или как я создал мини-редакцию
Я не справляся с переводами и всем остальным. Пришлось брать талантливых знакомых в команду, 2 переводчика и редактор, плюс отдельно работал программист.
Тогда мы переводили все самые крутые статьи с Рунета и адаптировали их под румынскую публику. На сайт приходило много трафика, во всяком случае, для румынского медиа. Руководить всем этим процессом… одно это уже вам понравится! Да и работать с командой — это большой дар.
Cайт стал популярным, так как большинство медиа писали полную ерунду. А я, можно сказать, изменил румынское медиа, благодаря своей двуязычной мультикультуре, и большинство блогеров начали копировать или использовать «наш» стиль контента. Со временем я понял, что людям нравится больше всего, и какой тип статей вызывает у них эмоции, которыми они готовы делиться, принося, таким образом, все больше и больше трафика. Я работал на трафик и качество.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как я продвигал сайт через Facebook, или Facebook — золотой ресурс трафика для сайта
Очень важно найти другие страницы на Facebook и совершать взаимообмен. Так, я сотрудничал с 4 страницами на «Фейсбуке». Мы каждый раз обменивались материалами, фотографиями, тем самым обоюдно обеспечивая рост страниц + трафик на сайт (бесплатно).
&lt;em&gt;Платите за рекламу и продвижение в том случае, если доходы от нее хотя бы покрывают ваши расходы.
&lt;strong&gt;&lt;em&gt; Общайтесь со своими поклонниками как с друзьями, не называйте их фанами. Стройте добрые отношения с каждым, кто дал лайк, делитесь с ними своим опытом. Знаю, это тяжело и убивает много времени. Но результаты стоят того. Нужно создать армию, которая будет следовать за вами, и которая будет приносить победы в разных формах: больше трафика, больше прибыли и т.д. Это я осознал очень поздно, к сожалению.
&lt;/em&gt;&lt;/strong&gt; Титул и фотки:http://vk.cc/3B6H7y
Очень большую роль играют название статьи и фотография, от этого зависит конверсия «Фэйсбук»-трафика.
Это два Туза в кармане! Очень важно, чтобы и то, и другое вызывало эмоцию, cтрасть.
&lt;strong&gt;&lt;em&gt; На сайте, где кнопка лайк (и другие копки, типа share), придумайте прикольную фразу, чтобы люди делились постами, ни в коем случае не унижайтесь.
&lt;/em&gt;&lt;/strong&gt;Отвечайте на зло добром. Ни с кем не ругайтесь. Добавьте все возможные маты в черный список.
&lt;/em&gt;** Не забудьте про разнообразие постов на сайте: одно фото-много текста, много фото-мало текста, видео+текст, тесты, флэш-игры и т.д. Тестируйте материалы на разную тематику, сделайте анализ и узнайте, что приносит больше трафика на сайт. Дальше вы уже поймете, что приносит вам трафик, а что нет.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Теперь, главный пункт повествования: Google Adsense как один из лучших способов монетизации веб-сайта
Моя единственная возможность монетизировать сайт (в моем случае, румынское медиа) — Google Adsense, т.к. Affiliate (партнерские программы) плохо работали на сайте. Впрочем, с партнеров я тоже выжимал по 30-200 евро в месяц.
Моя первая прибыль в Google Adsense составила 70 евро за месяц, деньги приходили через Western Union. Пожалуй, ничто не мотивирует делать больше денег, как желание заработать еще больше.
С каждым месяцем я зарабатывал все больше и больше:http://vk.cc/3B6HO
Для этого мне нужно было поднимать процент кликов по рекламе и трафик на сайт, в основном через FB. Изначально мой CTR варьировался в диапазоне от 0,40% до 0,80%.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Все, кто пользуется Google Adsense, пытаются найти статьи про то, как поднимать СTR в этой рекламной сети (если на сайт зашло 100 человек, и один из них сделал клик по рекламе, то CTR=1%).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Вперед к новым победам
На деньги, которые сделал на Adsense, купил себе машину и инвестировал в разработку 2 новых веб-сайтов (магазин и, конечно, самое важное для меня – онлайн-журнал, где все лояльные читатели будут оформлять годовую или месячную подписку). Скоро планирую запуск.
От нечего делать я создал проект, монетизация которого базируется на affiliate программах и на консультациях. Трафик пока маловат — 60-70 человек в день, но он уже растет с каждым днем.
При достижении органического трафика в 100 человек в день мы планируем установить чат и давать бесплатные советы начинающим блогерам.
Мой контракт с Google Adsense для меня закончился плачевно. Причиной этому стал большой уровень CTR для сайта с моей тематикой. Но вышел я из этого стресса с высоко поднятой головой, которую в нелегкие моменты осенили новые проекты, 2 из них будут готовы к этому лету. Как я уже упомянул, это онлайн-магазин, а так же новый блог, из которого я хочу сделать молодой платный журнал для «умных».
Так же в планах запустить cеть cайтов под affiliate программы.
Но самое главное — это терпение. То, что тебя не убивает, делает сильнее. Недавно мне попалась на глаза умная фраза. Я согласен с ней на 100%: «удивительно, люди говорят, что три года на создание своего бизнеса – это долго, а ходить на работу сорок лет – это нормально».
Cтатья заканчивается, но не заканчивается сама тема, я готов развивать ее и передавать свой опыт, отвечая на ваши вопросы в комментариях к этой публикации. Бонус первым пятерым, кто пользуется Google Adsense, оставляйте в комментариях адрес вашего сайта, после того, как я его проанализирую, помогу дельными советами. Жду ваших вопросов, буду рад помочь поделиться своим опытом.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Итак, у вас есть два варианта на выбор:
Первый: «вы видите, что все реально, работайте и удача вам улыбнется! Встретимся на Багамах.»
Второй: «вы видите, как все сложно, дурак не пробьется никогда, поэтому ищите что-нибудь по проще. Да, я и сам бросаю заниматься этой фигней и иду работать официантом.»&lt;/p&gt;
&lt;p&gt;Лично я бы остановился на первом варианте, а вообще, пусть каждый сам для себя решит, где он хочет провести остаток дней — на Гоа или в городе Тайшет. Все в ваших руках, ногах, голове и сердце.&lt;/p&gt;
&lt;p&gt;©megamozg&lt;/p&gt;</summary><category term="habr"></category><category term="freelance"></category></entry><entry><title>10 заповедей безличного программирования</title><link href="https://stonedastronaut.github.io/10-zapovedei-bezlichnogo-programmirovaniia.html" rel="alternate"></link><updated>2015-08-03T19:49:58+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:10-zapovedei-bezlichnogo-programmirovaniia.html</id><summary type="html">&lt;p&gt;Эти заповеди были описаны в книге «Психология компьютерного программирования», написанной в 1971 году. Несмотря на возраст, слова до сих пор актуальны. Я не читал саму книгу, но нашёл пост о ней в блоге Стивена Уайетта Буша. Стивену её посоветовал перед смертью его отец. Вот эти заповеди:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Пойми и свыкнись с тем, что ты будешь совершать ошибки. Суть в том, что их нужно находить до того, как они на что-то повлияют. В нашей индустрии, к счастью, ошибки редко могут привести к фатальным результатам (это не относится к тем, кто работает над ПО управления ракетами в Лаборатории реактивного движения). Мы можем (и должны) учиться, смеяться над собой и двигаться дальше.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Твой код — это не ты. Весь смысл проверок — в поиске недочётов. И когда их найдут, не принимай это близко к сердцу.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не важно, сколько хитрых приёмчиков ты знаешь, — всегда найдётся кто-нибудь круче тебя. И, если ты попросишь, этот человек может научить тебя парочке новых трюков. Слушай других, даже если тебе кажется, что это не нужно.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не переписывай код без обсуждения. Между исправлением кода и его переписыванием лежит тонкая грань. Пойми разницу, не меняй всё самостоятельно, добивайся изменений в рамках анализа кода.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Относись к тем, кто знает меньше тебя, с уважением, терпением и пониманием. Почти все люди из нетехнического круга, которые постоянно взаимодействуют с разработчиками, считают нас, в лучшем случаем, самодовольными типами. В худшем — плаксами. Не укрепляй этот стереотип своей злостью и нетерпеливостью.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Всё течёт, всё меняется. Будь открытым для изменений, принимай их с улыбкой. Воспринимай каждое изменение в требованиях, смену платформы или инструмента не как существенное неудобство, с которым нужно бороться, а как новое испытание.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настоящая власть исходит не из званий, а из знаний. Знания порождают власть, а власть порождает уважение — так что, если вы хотите уважения в безличном окружении, развивайте свои знания.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Борись за то, во что веришь, но достойно принимай поражение. Пойми, иногда твои идеалы могут быть отвергнуты. Даже если ты прав, не пытайся отомстить и не говори «Я вас предупреждал». Не делай уже мёртвую идею своим лозунгом.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не будь «программистом в каморке». Не будь человеком, который выходит из своего тёмного офиса только за газировкой. Такой программист вне зоны видимости, взаимоотношений и контроля. Такой человек не имеет голоса в открытом окружении. Принимай участие в разговорах, участвуй в жизни своего офиса.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Критикуй код, а не человека, — будь добр к программисту, но не к коду. Пусть все твои комментарии будут положительными и направленными на улучшение кода. Указывай в комментариях на местные стандарты, спецификации, улучшение производительности и т. д.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;©habrahabr&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Разработка браузерной стратегии</title><link href="https://stonedastronaut.github.io/razrabotka-brauzernoi-strategii.html" rel="alternate"></link><updated>2015-08-03T19:32:03+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:razrabotka-brauzernoi-strategii.html</id><summary type="html">&lt;p&gt;Хочу поделиться своим опытом написания многопользовательской браузерной стратегии с нуля до рабочего проекта. С точки зрения непосредственно программирования, архитектуры и возникших проблем. Это мой первый опыт создания игры. Но не суть важно — главное я довел дело до рабочего проекта и наверняка многим будет интересно узнать подробности.&lt;/p&gt;
&lt;p&gt;Что представляет собой игра? Видимо наиболее коротким описанием будет «клон Цивилизации» =). Но это не значит что у меня не хватило фантазии придумать что-то свое. Просто сделать «Цивилизацию» было моей мечтой. Вряд ли бы я получил столько удовлетворения от написания другой игры. Ну а фанаты Цивилизации наоборот считают, что моя игра совсем не похожа на Цивилизацию, разве что только с виду. Может это и к лучшему.&lt;/p&gt;
&lt;p&gt;Игра называется &lt;a href="http://fatenation.com"&gt;The Fate of Nation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Расписывать архитектуру и логику работы приложения можно до бесконечности поэтому придется видимо разделить на несколько частей статью, если к ней будет интерес. Кроме того не вижу большого смысла приводить много кода, так как реализовать написанное мной можно на любом языке и платформе.&lt;/p&gt;
&lt;p&gt;Для создания игры я использовал php и MySQL на сервере, html и javascript на клиенте. Flash не используется. Из html5 есть только видео на сайте и несколько областей с канвасом в самой игре — включая поверхность карты и мини-карту. Объем кода клиентской части в несколько раз превышает серверную часть, поэтому в основном буду рассказывать о клиентской разработке, но начнем с сервера.&lt;/p&gt;
&lt;p&gt;Общая архитектура
Общая архитектура приложения выглядит как полностью асинхронное веб приложение на JavaScript. Перезагрузок страниц не предусмотрено. Обмен данными с сервером исключительно через Ajax и JSON. В JSON'е передаются только данные, без html кода. Html разметка загружается отдельно в начале загрузки приложения и процессится с данными через клиентский шаблонизатор по мере загрузки данных с сервера.
&lt;a href="http://vk.cc/3WayQI"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;На сервере никаких фреймворков не использовал — хотя начинал писать с использованием Zend Framework, который выкосил потом за ненадобностью. Вместо него создал свою простую архитектуру отдаленно напоминающую контроллеры и экшены из ZendFramework.&lt;/p&gt;
&lt;p&gt;Как видно из рисунка, на сервере одна точка входа — файл index.php. В процессе игры на сервер идут запросы вроде такого: /Unit/Move. И посылается JSON с параметрами, в данном случае это id юнита и координаты перемещения. Сервер перенаправляет этот запрос на index.php, в котором последовательно выполняется подключение к БД, проверка текущего пользователя и парсинг строки запроса для определения контроллера (Unit) и действия (Move). Если контроллер не задан то сервер выдает индексную страницу с кодом для построения клиентского приложения, но об этом позже. Если же контроллер задан то ищется файл этого контроллера, подключается его код и запускается обработка запросов этого контроллера, где соответственно ищется необходимый экшн, а в нем производится проверка входных данных и дергается бизнес логика.
&lt;a href="http://vk.cc/3WaziU"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Для работы с БД написан специальный класс абстракции базы данных через который проходят все запросы к БД от бизнес логики и контроллеров, экранирование данных и прочие небольшие удобства. Собственно на сервере все довольно просто с архитектурой, а зона ответственности сервера заключается лишь в проверке входных данных и выдаче информации из БД. Все остальное делает клиент.&lt;/p&gt;
&lt;p&gt;Теперь немного о самой игре.&lt;/p&gt;
&lt;p&gt;Карта
Первое что было сделано это карта на которой происходят почти все игровые действия: строительство городов, улучшений (посевы, дороги), перемещение юнитов и исследование карты. Размер карты составил 1000 на 1000 клеток для каждой отдельная запись в БД. Я видел игры где карта сделана бесконечной и записи о клетках динамически вставлялись тогда, когда с клеткой производились какие-либо действия. Но меня такой подход немного пугал своей непредсказуемостью. Гораздо проще планировать игру, когда точно знаешь, что у тебя есть фиксированная карта. Можно запланировать расположение игроков их количество, количество городов и юнитов, приблизительно оценить нагрузку.&lt;/p&gt;
&lt;p&gt;Итого получилось 1000 * 1000 = 1 000 000 записей в БД для карты. До этого я не работал с таким количеством записей и меня это насторожило. Думал что будет тормозить.
&lt;a href="http://vk.cc/3WazxV"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Я решил перехитрить MySql и разместить карту в 10-ти таблицах по 100 000 записей в каждой с надеждой, что станет быстрее работать. В итоге пришлось написать дурацкую логику по выборке клеток из нескольких таблиц сразу, а замеры показали что производительность только упала. Вернул все назад в 1-у таблицу.
&lt;a href="http://vk.cc/3WazNg"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x, y — это координаты клетки.
terrain — тип территории (луг, лес, гора...).
resource — ресурс если он есть на клетке (глина, лошади).
wens9_code — название поля произошло от west-east-north… 9 — означает что изображение данной клетки зависит от территорий 8-ми рядом стоящих клеток и естественно от территории самой этой клетки — всего 9. Эту логику я спер с 3-ей цивилизации, насмотревшись их спрайтов территорий там где по 512 вариантов иконок для одной клетки!)) Потом у меня вскипел мозг разбирая зависимости по которым они выбирали иконки и я понял, какой это большой геморрой. =) И все только для одного: чтобы спрайты имели жесткие концы в виде ромбиков 128 на 64 пикселя. В конце концов мы решили использовать png24 с полупрозрачными краями накладывающиеся друг на друга и создающих в 10 раз лучший и разнообразный ландшафт, чем в описанном примере из Цив3. А выбираем иконки случайно независимо от соседних клеток. Это видно на скрине — сразу не скажешь где там одинаковые иконки полей. Вот горы по краям размыть забыли и они имеют четкие границы — что плохо смотрится.
starting_position — означает что в этой клетке появится игрок.&lt;/p&gt;
&lt;p&gt;Конечно это не весь список полей, но здесь и далее для упрощения буду приводить только те поля, о которых рассказываю в статье.&lt;/p&gt;
&lt;p&gt;Регионы
Клиент написан таким образом, что он не запрашивает с сервера определенные клетки, а запрашивает их партиями по 100 штук (10 на 10), которые я назвал регионами. То есть каждая клетка принадлежит какому-то региону и клиент запрашивает регионы и не конкретные клетки. Как только игрок перемещает карту так, что становится виден новый регион, мы посылаем запрос на сервер за этим регионом и граничащими с ним. Данные каждого загруженного регионакешируются на 30 секунд на клиенте. Это позволяет легко прокручивать карту без тормозов и лишних запросов на сервер и избавляет от задержки при появлении нового региона на карте — так как мы загружаем все соседние наперед.&lt;/p&gt;
&lt;p&gt;Когда я делал эти «регионы» я не предполагал насколько они увеличат производительность. Оказалось выделить 100 клеток фильтруя по полю региона получается многократно быстрее чем фильтруя по координатам. Несмотря на то, что я объединил x и y координаты клетки в одно поле location = 1000*x + y. Сделал это прежде всего для удобства — чтобы легче было достать одну клетку.
&lt;a href="http://vk.cc/3WazZG"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Затем каждую сущность (города, юниты, ресурсы), которые располагаются на карте и имеют соответственно конкретные координаты, я также пометил регионом, что увеличило производительность выборок в сотни раз. Одно дело искать значения в таблице по ключу с миллионом уникальных значений и другое дело по ключу с 10 000 значений.&lt;/p&gt;
&lt;p&gt;Таким образом получилась такая система: клиент запрашивает регионы — сервер достает из БД карту и все сущности на ней, быстро фильтруя по регионам — клиент отрисовывает это все в браузере на канвасе. У каждой сущности есть такие поля как время до окончания битвы или время до перемещения в следующую клетку — в этом случае по истечении этих таймаутов мы обновляем локально только то что требуется. Например если мы исследуем карту то догружаем только что открытые клетки и не более. Если вражеский юнит переместился — догружаем следующую точку его перемещения.&lt;/p&gt;
&lt;p&gt;Исследование карты
Однако меня терзал еще один вопрос. Мне позарез хотелось сделать исследование карты — чтобы изначально она была не разведана и нужно было ходить по ней чтобы что-то увидеть.
&lt;a href="http://vk.cc/3WaAdR"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Такого я не видел еще в браузерных играх (собственно как и юнитов передвигающихся по карте, а не по воздуху). Я принялся за расчеты. Стартовая позиция игрока расположена внутри региона. То есть максимальное количество игроков 10 000 как и регионов. Каждый игрок может разведать всю карту. Итого 10 000 * 1 000 000 = 10 миллиардов записей может быть в таблице пермишенов на клетки! Таблица карты показалась на фоне этого детским лепетом =). Конечно эта цифра завышена. Вряд ли кому-то удастся разведать всю карту — она очень большая. Но десятки и сотни миллионов записей в таблице пермишенов точно могут быть в конце игры.&lt;/p&gt;
&lt;p&gt;И на эту таблицу нужно было джойнить все сущности включая саму карту каждый раз при выборке регионов. Здесь опять спас меня ключ по полю региона, который позволил делать эти джоины намного быстрее.
&lt;a href="http://vk.cc/3WaArY"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Провести нагрузочное тестирование чтобы определить на каком этапе сервер начнет тормозить не удалось еще. Максимум что я видел это чуть более 2-ух миллионов записей в таблице пермишенов.&lt;/p&gt;
&lt;p&gt;Перемещение юнитов
Чтобы сделать перемещение юнитов пришлось тоже подумать и переписать логику несколько раз.
Первое что нам нужно, это точно отслеживать время открытия новых клеток чтобы можно было отфильтровывать клетки, юниты и города по этим данным. Сразу напрашивается использовать таблицу пермишенов на карту, но со спец-полем — означающим время когда эта запись станет активной. Так и было сделано. Клиент отправляет id юнита, и новую координату дислокации. Сервер просчитывает текущую позицию юнита, координаты клеток по которым он будет перемещаться, и в зависимости от территории этих клеток, типа юнита и других параметров высчитывает время когда этот юнит будет в каждой клетке. Затем дополнительно просчитываются таким же образом соседние клетки в зависимости от радиуса обзора юнита.&lt;/p&gt;
&lt;p&gt;Все это вставляется в таблицу пермишенов на клетки и карта работает как часы. Юнит ходит по карте, при каждом его перемещении мы запрашиваем клетки вокруг него, стандартными методами, которые отфильтруют сущности уже по новым данным пермишенов учитывая время активации пермишена, где будут заветные открытые области.&lt;/p&gt;
&lt;p&gt;Далее записи пермишенов, которые говорят о перемещении юнита мы помечаем еще 2 полями: id юнита и типом записи: 'обзорные клетки' или 'клетки по которым идет юнит'. Первое поле нужно чтобы при остановке юнита или смене пункта назначения можно было их удалить, второе нужно чтобы при выборке юнита записать ему времена смены дислокации.
&lt;a href="http://vk.cc/3WaBjc"&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Затем коллеги по работе мне подсказали еще один довольно очевидный момент: ввести поле означающее время выхода юнита с данной клетки. Я назвал его out_timestamp. Это позволило легко выбирать текущие позиции всех юнитов и соответственно фильтровать вражеских юнитов по видимым нами клеткам.&lt;/p&gt;
&lt;p&gt;Уверен, что мой пример не самая удачная архитектура для подобной игры, но вроде работает =) В следующих статьях могу рассказать о клиентской архитектуре, кешировании, используемом фреймворке и о том, как мне удалось сделать демонстрационную версию игры работающую без запросов к серверу, чисто на клиенте.&lt;/p&gt;
&lt;p&gt;Да, кстати, часто после различных постов об игре народ начинает хвалить графику, а не геймплей. Так что скажу сразу — я ее не рисовал!!! Это все наш художник-дизайнер Максим Кудрицкий.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©habrahabr&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Emacs navigation options</title><link href="https://stonedastronaut.github.io/emacs-navigation-options-en.html" rel="alternate"></link><updated>2015-08-03T19:14:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:emacs-navigation-options-en.html</id><summary type="html">
&lt;p&gt;If you don’t have an emacs editor, install emacs editor as we discussed earlier.&lt;/p&gt;
&lt;p&gt;Notation used in this article:&lt;/p&gt;
&lt;p&gt;C-a : Ctrl-a
M-a : Meta-a ( If you don’t have Meta key, use Esc key )
C-M-a : Ctrl-Meta-a&lt;/p&gt;
&lt;h3 id="1-emacs-line-navigation"&gt;1.  Emacs Line Navigation&lt;/h3&gt;
&lt;p&gt;Following four navigation can be done line by line.&lt;/p&gt;
&lt;p&gt;C-p : go to previous line
C-n : go to next line
C-f : go forward one character
C-b : go backward one character&lt;/p&gt;
&lt;p&gt;Repeat factor&lt;/p&gt;
&lt;p&gt;By using the repeat factor in EMACS we can do this operation for N times. For example, when you want to go down by 10 lines, then type C-u 10 C-p&lt;/p&gt;
&lt;p&gt;Within a line if you want to navigate to different position, you have following two options.&lt;/p&gt;
&lt;p&gt;C-a : go to the starting of the current line.
C-e : go to the end of the current line.&lt;/p&gt;
&lt;p&gt;At thegeekstuff, we love Vim editor. We’ve written lot of articles on Vim editor. If you are new to the Vim editor, refer to our Vim editor navigation fundamentals article.&lt;/p&gt;
&lt;h3 id="2-emacs-screen-navigation"&gt;2. Emacs Screen Navigation&lt;/h3&gt;
&lt;p&gt;Following three navigation can be done in relation to text shown in the screen.&lt;/p&gt;
&lt;p&gt;C-v : Jump forward one full screen.
M-v : Jump backwards one full screen. ( If you dont have Meta key, use ESC key )
C-l : Make the current line as center line of window.&lt;/p&gt;
&lt;p&gt;You can also use Page Up, Page Down for screen navigation.&lt;/p&gt;
&lt;h3 id="3-emacs-special-navigation"&gt;3. Emacs Special Navigation&lt;/h3&gt;
&lt;p&gt;Following are couple of special navigation that are used to go to the start or end of buffer.&lt;/p&gt;
&lt;p&gt;M-&amp;lt; : Go to the start of file
M-&amp;gt; : Go to the end of file&lt;/p&gt;
&lt;h3 id="4-emacs-word-navigation"&gt;4. Emacs Word Navigation&lt;/h3&gt;
&lt;p&gt;Following are two word navigation keys.&lt;/p&gt;
&lt;p&gt;M-f : navigate a word forward.
M-b : navigate a word backward.&lt;/p&gt;
&lt;h3 id="5-emacs-paragraph-navigation"&gt;5. Emacs Paragraph Navigation&lt;/h3&gt;
&lt;p&gt;M-a : Go to the beginning of the current paragraph. By pressing M-a again and again move to the previous paragraph beginnings.
M-e : Go to the end of the current paragraph. By pressing M-e again and again move to the next paragraph end, and again.&lt;/p&gt;
&lt;h3 id="6-emacs-search-navigation"&gt;6. Emacs Search Navigation&lt;/h3&gt;
&lt;p&gt;When you want to search by giving the plain text,&lt;/p&gt;
&lt;p&gt;C-s : Type Ctrl+s followed by the word to Search. Press Ctrl+s continuously to move to the next occurrences. Press enter to terminate search.
C-r : Do a reverse search. All other explanation are like Ctrl+s&lt;/p&gt;
&lt;p&gt;When you want to search using regular expression,&lt;/p&gt;
&lt;p&gt;C-M-s : Type Ctrl+s followed by the regex to Search. Press Ctrl+s continuously to move to the next occurrences. Press enter to terminate search.
C-M-r : Do a reverse search. All other explanation are like Ctrl+Meta+s&lt;/p&gt;
&lt;h3 id="7-emacs-navigation-from-command-line"&gt;7. Emacs Navigation from Command Line&lt;/h3&gt;
&lt;p&gt;Emacs +N filename: Go to the Nth line of the file after opening it.&lt;/p&gt;
&lt;p&gt;$ emacs +10 /etc/passwd&lt;/p&gt;</summary><category term="emacs"></category><category term="linux"></category></entry><entry><title>MySQL шпаргалки</title><link href="https://stonedastronaut.github.io/mysql-shpargalki.html" rel="alternate"></link><updated>2015-08-03T18:28:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:mysql-shpargalki.html</id><summary type="html">&lt;p&gt;Часто, когда разрабатываешь сайт, замечаешь, как на одни и те же грабли наступают разработчики при проектировании базы данных.
Сегодня я решил опубликовать свои шпаргалки, на самые часто встречающиеся ошибки при работе с MySQL.&lt;/p&gt;
&lt;p&gt;Работа с бекапами
Делаем бекап
mysqldump -u USER -pPASSWORD DATABASE &amp;gt; /path/to/file/dump.sql&lt;/p&gt;
&lt;p&gt;Создаём структуру базы без данных
mysqldump —no-data - u USER -pPASSWORD DATABASE &amp;gt; /path/to/file/schema.sql&lt;/p&gt;
&lt;p&gt;Если нужно сделать дамп только одной или нескольких таблиц
mysqldump -u USER -pPASSWORD DATABASE TABLE1 TABLE2 TABLE3 &amp;gt; /path/to/file/dump_table.sql&lt;/p&gt;
&lt;p&gt;Создаём бекап и сразу его архивируем
mysqldump -u USER -pPASSWORD DATABASE | gzip &amp;gt; /path/to/outputfile.sql.gz&lt;/p&gt;
&lt;p&gt;Создание бекапа с указанием его даты
mysqldump -u USER -pPASSWORD DATABASE | gzip &amp;gt; &lt;code&gt;date +/path/to/outputfile.sql.%Y%m%d.%H%M%S.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Заливаем бекап в базу данных
mysql -u USER -pPASSWORD DATABASE &amp;lt; /path/to/dump.sql&lt;/p&gt;
&lt;p&gt;Заливаем архив бекапа в базу
gunzip &amp;lt; /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE
или так
zcat /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE&lt;/p&gt;
&lt;p&gt;Создаём новую базу данных
mysqladmin -u USER -pPASSWORD create NEWDATABASE&lt;/p&gt;
&lt;p&gt;Удобно использовать бекап с дополнительными опциями -Q -c -e, т.е.
mysqldump -Q -c -e -u USER -pPASSWORD DATABASE &amp;gt; /path/to/file/dump.sql, где:
-Q оборачивает имена обратными кавычками
-c делает полную вставку, включая имена колонок
-e делает расширенную вставку. Итоговый файл получается меньше и делается он чуть быстрее&lt;/p&gt;
&lt;p&gt;Для просмотра списка баз данных можно использовать команду:
mysqlshow -u USER -pPASSWORD&lt;/p&gt;
&lt;p&gt;А так же можно посмотреть список таблиц базы:
mysqlshow -u USER -pPASSWORD DATABASE&lt;/p&gt;
&lt;p&gt;Для таблиц InnoDB надо добавлять —single-transaction, это гарантирует целостность данных бекапа.
Для таблиц MyISAN это не актуально, ибо они не поддерживают транзакционность.&lt;/p&gt;
&lt;p&gt;Подробнее&lt;/p&gt;
&lt;p&gt;Общие факты
Полезно под каждую базу на боевом сервере создавать своего пользователя
Кодировка базы может быть любой, если она UTF8
В большинстве случаев лучше использовать движок InnoDB
В php лучше забыть про сильно устаревшее расширение mysql и по-возможности использовать pdo или mysqli
Новую копию MySQL всегда можно настроить и оптимизировать
Без особой нужды не стоит открывать MySQL наружу. Вместо этого можно сделать проброс портов
ssh -fNL LOCAL_PORT:localhost:3306 REMOTE_USER@REMOTE_HOST&lt;/p&gt;
&lt;p&gt;Работа с данными&lt;/p&gt;
&lt;p&gt;Числа
На 32-битных системах практически нет смысла ставить для типа INTEGER свойство UNSIGNED, так как такие большие числа в php не поддерживаются.
На 64-битных системах, php поддерживает большие числа, вплоть до MySQL BIGINT со знаком.
Связанные таблицы («Foreign keys») должны иметь полное сходство по структуре ключей. Т.е. если у нас на одной таблице для поля указано «INTEGER UNSIGNED DEFAULT 0 NOT NULL» то и на другой должно быть указано аналогично
Для хранения булевых значений, нужно использовать TINYINT(1)
А деньги лучше хранить в DECIMAL(10, 2), где первое число обозначает количество всех знаков, включая запятую, а второе — количество знаков после запятой. Итого, у нас получится что DECIMAL(10,2) может сохранить 9999999,99&lt;/p&gt;
&lt;p&gt;Строки
В старых версиях (до 5.0.3) VARCHAR была ограничена 255 символами, но сейчас можно указывать до 65535 символов
Помните, что тип TEXT ограничен только 64 килобитами, поэтому что бы сохранять «Войну и Мир» пользуйтесь «LONGTEXT»
Самая правильная кодировка для вашей БД UTF8&lt;/p&gt;
&lt;p&gt;Даты
Не забывайте, что
DATE, TIME, DATETIME — выводятся в виде строк, поэтому поиск и сравнение дат происходит через преобразование
TIMESTAMP — хранится в виде UNIX_TIMESTAMP, и можно указать автоматически обновлять колонку
Сравнивая типы данных DATETIME и TIMESTAMP, не забывайте делать преобразование типов, например:
SELECT * FROM table WHERE &lt;code&gt;datetime&lt;/code&gt; = DATE(&lt;code&gt;timestamp&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Перечисления
Для перечислений правильно использовать тип ENUM
Правильно пишется так: ENUM('мама', 'мыла', 'раму')
Можно ставить значение по-умолчанию, как и для любой строки
В базе поле с перечислением хранится как число, поэтому скорость работы — потрясающе высокая
Количество перечислений ~ 65 тысяч&lt;/p&gt;
&lt;p&gt;dev.mysql.com/doc/refman/4.1/en/storage-requirements...
help.scibit.com/mascon/masconMySQL_Field_Types.html&lt;/p&gt;
&lt;p&gt;Отладка
Если запросы тормозят, то можно включить лог для медленных запросов в /etc/mysql/my.cnf
А потом оптимизировать запросы через EXPLAIN
И наблюдать за запросами удобно через программу mytop&lt;/p&gt;
&lt;p&gt;©habrahabr&lt;/p&gt;</summary><category term="mysql"></category><category term="habr"></category></entry><entry><title>Как важно писать хороший код</title><link href="https://stonedastronaut.github.io/kak-vazhno-pisat-khoroshii-kod.html" rel="alternate"></link><updated>2015-08-03T18:16:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:kak-vazhno-pisat-khoroshii-kod.html</id><summary type="html">&lt;p&gt;Мне приходится очень много читать код. Это и open source, и всяческие фреймворки, и код enterprise приложений. Именно о последних я хотел бы сегодня поговорить.&lt;/p&gt;
&lt;p&gt;Большая часть кода enterprise приложений — отстой. Приложения глючат и тормозят, их сложно тестировать, постоянно проблемы с развертыванием и обновлением. Это как бы никого не удивляет.&lt;/p&gt;
&lt;p&gt;Но удивляют люди, написавшие отстойный код. Эти люди, с немалым опытом, знают несколько языков, прочитали много книг, знают ООП, SOLID, рефакторинг, паттерны и другие малопонятные слова. То есть примерно такие, как многие из вас, читающих этот пост.&lt;/p&gt;
&lt;p&gt;Теория разбитых окон
В 1969 году был проведен эксперимент. В ходе эксперимента две одинаковые машины были оставлены в двух местах – в благополучном университетском городке и неблагополучном районе крупного города. Не удивительно что в неблагополучном месте машина простояла всего пару дней и была выпотрошена, а в благополучном машина простояла нетронутой неделю. Но как только в уцелевшей машине разбили стекло, жители этого самого благополучного городка за несколько часов разобрали её на детали и перевернули вверх дном.&lt;/p&gt;
&lt;p&gt;В последствии ученые назвали это явление “Теорией разбитых окон”. Согласно теории, любое проявление беспорядка или нарушение норм провоцирует людей также забыть о правилах. Теория получила несколько экспериментальных подтверждений и её можно считать вполне достоверной.&lt;/p&gt;
&lt;p&gt;Есть также и обратный эффект. Поддержание порядка приводит к тому, что окружающие также поддерживают порядок.&lt;/p&gt;
&lt;p&gt;Как это влияет на код
В enterprise разработке прессинг сроков и неопределенности требований бывает настолько высок, что кажется сделать “быстро и грязно” – гораздо лучший вариант, чем сделать правильно. Моментально подход “быстро и грязно” начинает распространяться по всему приложению, как путем clipboard inheritance (aka copy-paste), так и за счет эффекта разбитых окон.&lt;/p&gt;
&lt;p&gt;Еще один фактор влияющий на качество кода – сложность и несовершенство платформ и фреймворков, используемых в разработке. Из-за этого в коде часто появляются хаки и нелепые workaround-ы. Со временем начинает казаться что эти хаки и есть хороший код. Даже когда проблемы фреймворков исправляют, люди продолжают использовать хаки. Кстати эти хаки со временем могут попадать в интернет через форумы, блоги или pastebin и распространяться далеко за пределы одного приложения.&lt;/p&gt;
&lt;p&gt;Вы можете сказать, что качество кода не влияет на качество приложения. Увы, еще как влияет. Программисты допускают ошибки. Чем более плохой код, тем сложнее эти ошибки найти и исправить так, чтобы не создать новых. Прессинг сроков и сложности, скорее всего, не даст написать хороший код и появится еще один хак.&lt;/p&gt;
&lt;p&gt;В open source и продуктовой разработке такое встречается реже. Там больше следят за качеством и меньше прессинг сроков.&lt;/p&gt;
&lt;p&gt;Код пишется для людей
Часто программисты забывают что код программ пишется в первую очередь для людей. Даже если вы пишите программу в одиночку, то посмотрев на нее через месяц, вы не вспомните почему написали тот или иной кусок кода и за что он отвечает.&lt;/p&gt;
&lt;p&gt;Хороший код должен, в первую очередь, очень ясно выражать намерения. К сожалению “быстрые и грязные” способы разработки бьют в первую очередь по понимаемости кода. Улучшение кода осознанно откладывается до лучших времен, когда будет пауза чтобы провести рефакторинг. Те самые лучшие времена никогда не наступают, а код начинают читать и дорабатывать сразу же после попадания в source control.&lt;/p&gt;
&lt;p&gt;Даже если вы полностью довольны свои кодом (в большинстве случаев программисты свои кодом довольны), то подумайте о том как будет ваш код читать другой человек (в большинстве случаев программисты недовольны чужим кодом).&lt;/p&gt;
&lt;p&gt;Приверженность качеству
Единственный способ добиться высокой продуктивности и эффективности – писать хороший код сразу. Единственный инструмент повышения качества кода – вы сами. Если вы не стремитесь всегда делать хороший код, то вам не помогут ни тесты, ни инструменты статического анализа. Даже ревью других программистов не поможет. Код всегда можно сделать настолько запутанным, что в нем невозможно будет найти ошибку при чтении, при этом сделать вид, что код очень важен и никто не возьмется его переписать.&lt;/p&gt;
&lt;p&gt;В первую очередь необходимо думать о структуре и именовании. Код с зашифрованными идентификаторами и малопонятным потоком исполнения скорее всего будет содержать ошибки. Не допускайте такого кода, это гораздо дешевле, чем исправлять ошибки.&lt;/p&gt;
&lt;p&gt;Ясно выражайте намерения в своем коде, сводите к минимуму неочевидные неявные аспекты. Не надо стремиться сделать код максимально лаконичным, стремитесь сделать его максимально понятным.&lt;/p&gt;
&lt;p&gt;Если вам приходится править код, то не создавайте хаков. Потратьте немного времени, напишите нормально. Сэкономите на поддержке. Если же код совсем плохой, был сделан “быстро и грязно” и оброс хаками, то просто выкиньте его и перепишите. Только не надо пытаться переписать все. Учитывайте продуктивность: программист пишет 40-60 отлаженных строк кода в день в нормальном темпе и 120-200 в ускоренном (высокая концентрация, четкая цель, понятно что делать).&lt;/p&gt;
&lt;p&gt;Если вы сами пишете “быстро и грязно”, например прототип для уточнения требований, то выкиньте код и перепишите нормально сразу после того, как ваш код сделает свое дело.&lt;/p&gt;
&lt;p&gt;Если вы скопировали часть кода из другого места или, не дай бог, из интернета, то разберитесь как он работает, прежде чем заливать изменения в source control. Вообще не используйте непонятные для вас фрагменты кода.&lt;/p&gt;
&lt;p&gt;Всегда поддерживайте чистоту и порядок в вашем коде, пользуйтесь инструментами, которые помогают вам это делать. Не будете этого делать – код очень быстро превратится в помойку. Собирайте статистику по плотности проблем в коде, это поможет вам лучше понять, как писать хороший код.&lt;/p&gt;
&lt;p&gt;Перечитывайте свой код. Проводите рефакторинг постоянно в процессе написания. Помните, что рефакторинг “потом” никогда не наступает.&lt;/p&gt;
&lt;p&gt;Думайте о том, какой код вы хотите написать, до того как начать его писать. Само написание кода – настолько поглощающий процесс, что думать о качестве некогда. Состояние потока – это состояние свободы самовыражения. Необходимо заранее ограничить самовыражение, чтобы код получился хорошим.&lt;/p&gt;
&lt;p&gt;Экономика качества кода
Ошибка найденная и устраненная на этапе кодирования в 10 раз дешевле, чем ошибка найденная при тестировании и в 100 раз дешевле ошибки, найденной в production. В истории есть реальные примеры ошибок, исправление которых обошлось в десятки тысяч долларов.&lt;/p&gt;
&lt;p&gt;Поэтому очень важно устранять ошибки на этапе разработки, причем усилиями самих разработчиков.&lt;/p&gt;
&lt;p&gt;Напоследок
Не путайте хороший и идеальный код. Идеального кода не существует, нет смысла заниматься бесконечным улучшением в стремлении к идеалу. Хороший код – это код который читаем, понятен, решает задачу, правильно структурирован и не содержит ошибок. Писать хороший код не просто ваша цель, это ваша обязанность.&lt;/p&gt;
&lt;p&gt;©habrahabr&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Почему программисты работают по ночам</title><link href="https://stonedastronaut.github.io/pochemu-programmisty-rabotaiut-po-nocham.html" rel="alternate"></link><updated>2015-08-03T18:12:05+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:pochemu-programmisty-rabotaiut-po-nocham.html</id><summary type="html">&lt;p&gt;Согласно поговорке, программисты — это устройства, преобразующие кофеин в код.&lt;/p&gt;
&lt;p&gt;Если спросить первого попавшегося программиста, когда он наиболее продуктивен, — скорее всего, он назовёт ночь. Кто-то пораньше, кто-то попозже. Популярен вариант встать в 4 утра и сделать работу до начала дневной суматохи. А некоторые предпочитают ложиться в 4 утра.&lt;/p&gt;
&lt;p&gt;Цель всего этого — избавиться от отвлекающих факторов. Но можно было бы просто закрыть дверь… Что же такого особенного в ночи?&lt;/p&gt;
&lt;p&gt;Я думаю, что всё сводится к трём вещам: расписанию творца, сонному мозгу, и яркому экрану компьютера.&lt;/p&gt;
&lt;p&gt;Расписание творца
В 2009 году Пол Грэм написал о «расписании творца» (maker's schedule). По его мнению, в мире есть два основных типа расписаний. В традиционном «распорядке менеджера» день разделяется на отдельные часы, и десятиминутная помеха обходится максимум в час потерянного времени.&lt;/p&gt;
&lt;p&gt;Часовой механизмДругой вариант Грэм называет расписанием творца — того, кто что-то создаёт, творит, производит. Работа над большими абстрактными системами требует размещать их целиком в своей голове. Это можно сравнить с постройкой дома из хрусталя: стоит отвлечься, как всё осыпается и разбивается вдребезги.&lt;/p&gt;
&lt;p&gt;Поэтому программистов так раздражает, когда их отвлекают.
Из-за этого огромного умственного вклада мы просто не начинаем работать, пока не можем рассчитывать на пару часов покоя. Не имеет смысла строить в голове всеобъемлющую модель системы только для того, чтобы через полчаса её кто-то сломал.&lt;/p&gt;
&lt;p&gt;В самом деле, поговорив с руководителями компаний вы узнаете, что они просто не могут закончить никакую работу в течение дня. Постоянная канонада помех: важных дел™, требующих внимания, и писем, требующих ответа, — просто не позволяет что-либо сделать. Поэтому они выполняют бо́льшую часть работы ночью, когда все остальные спят.&lt;/p&gt;
&lt;p&gt;Сонный мозг
Но даже программистам нужно спать по ночам. Мы не какие-нибудь суперлюди. Даже программисты более внимательны именно днём.&lt;/p&gt;
&lt;p&gt;Пик БалмераТогда почему же мы выполняем самую сложную умственную работу когда мозг хочет спать, а более простые задания — когда разум остр и ясен?&lt;/p&gt;
&lt;p&gt;Потому что усталость делает нас лучшими кодерами.
Как с пиком Балмера, усталость заставляет нас собраться потому, что уставший мозг просто вынужден сосредоточиться! У него элементарно не остаётся лишних сил, чтобы позволить себе потерять концентрацию.&lt;/p&gt;
&lt;p&gt;Например, моя продуктивность минимальна после чрезмерного количества чая или невовремя выпитого энергетического напитка: они делают меня гиперактивным, и я то проверяю твиттер, то читаю Hacker News, — в общем, просто прыгаю туда-сюда.&lt;/p&gt;
&lt;p&gt;Казалось бы, я должен работать лучше — столько энергии, такой разогнанный мозг. Однако, вместо этого я сам путаюсь у себя в ногах, потому что не могу сконцентрироваться больше чем на две секунды.&lt;/p&gt;
&lt;p&gt;С другой стороны, когда я немного уставший, я просто плюхаюсь за стол и пишу. Со слегка утомлённой головой я могу писать код часами, даже не думая заглянуть в твиттер или фейсбук. Интернет как будто перестаёт существовать.&lt;/p&gt;
&lt;p&gt;Мне кажется, это верно для большинства программистов. Наши умственные силы избыточны для ~80% задач: согласитесь, реализация интересного алгоритма часто требует написания ещё раз в десять большего объёма вспомогательного кода. Даже если вы занимаетесь самым сложным машинным обучением, какое только можно представить, большой кусок работы — это просто подготовка данных и вывод результатов в красивом видe.&lt;/p&gt;
&lt;p&gt;А когда мозг не работает на полную мощность, он ищет какое-нибудь занятие. Усталость притупляет разум настолько, что ему становится достаточно и одной текущей задачи.&lt;/p&gt;
&lt;p&gt;Яркие экраны компьютеров
Здесь всё просто. Продолжайте вечерами пялиться на яркий источник света, и ваш режим сна начнёт задерживаться. Вы забываете об усталости до трёх часов ночи, потом просыпаетесь в 11, и когда наступает вечер — вы просто ещё не устали, потому что на ногах всего с одиннадцати утра!&lt;/p&gt;
&lt;p&gt;Ночной Инсбрук
После нескольких повторений такой подход запросто утащит вас в другой часовой пояс. Что интересно, сдвиг не бесконечен, и однажды попав в равновесную точку отхода ко сну между 3 и 4 часами, вы, как правило, там и останетесь.&lt;/p&gt;
&lt;p&gt;А быть может, дело в будильниках, поднимающих нас по утрам, — потому что общество называет нас паршивыми лентяями, если мы начинаем завтрак в два часа пополудни.&lt;/p&gt;
&lt;p&gt;Заключение
Итак, программисты работают по ночам, потому что это не требует прекратить работу к определённому времени (что позволяет работать более расслабленно), мозг не отвлекается, а яркий экран прогоняет сон.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©megamozg&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Как возродить потерянную мотивацию</title><link href="https://stonedastronaut.github.io/kak-vozrodit-poteriannuiu-motivatsiiu.html" rel="alternate"></link><updated>2015-08-03T18:07:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:kak-vozrodit-poteriannuiu-motivatsiiu.html</id><summary type="html">&lt;p&gt;Вы потеряли ту страсть, которая была у вас к программированию? Влияет ли это на мотивацию завершать свои задачи? Трудно ли вам заканчивать проекты? Если да, то для вас есть хорошие новости: это случается с каждым, так что не отчаивайтесь.&lt;/p&gt;
&lt;p&gt;Представьте, что костёр в вашем лагере потух. Вместо того, чтобы переживать об этом, лучше успокоиться, глубоко вздохнуть и подумать о том, как снова его зажечь.&lt;/p&gt;
&lt;p&gt;Это может быть не легко, но это возможно. Если вы не будете торопиться, то всё будет хорошо.&lt;/p&gt;
&lt;p&gt;Проводите время с программистами-единомышленниками
Когда вы чувствуете безразличие и скуку, худшее, что можно сделать — это страдать в одиночестве. Если вы ещё не окружены единомышленниками, вам стоит поискать сообщество. Личное общение идеально, но онлайн-взаимодействие лучше, чем ничего.
Нужно прояснить: речь не идёт о том, достаточно ли вы сильны для того, чтобы самому тянуть себя вперёд. Быть немотивированным не значит быть слабым. Просто важно сохранять связь с реальностью, а это сложно, если вы не видите свою ситуацию со стороны благодаря другим программистам.&lt;/p&gt;
&lt;p&gt;Помните: цель не в том, чтобы жаловаться и делиться своей печалью. Это плохо и к тому же может понизить мотивацию других людей. Цель в том, чтобы поделиться своим беспокойством, или может быть мелочами, которые убивают ваше вдохновение.
Если вы не уверены в себе или чувствуете дискомфорт, будет полезным найти наставника. Наставник может проверять качество вашего кода и давать обратную связь. Также он может быть внешним мотиватором, когда вы захотите сдаться.&lt;/p&gt;
&lt;p&gt;Меняйте темы и изучайте новое
Во многих случаях мотивация падает из-за скуки. Если вы долго работали разработчиком ПО, вы можете ощущать себя застрявшим на бесперспективной работе. Может быть, код, с которым вы работаете, тривиальный и не требует умственного напряжения.
Что делать? Нужно переключиться. Половина удовольствия от программирования приходит от решения творческих задач. Без этого программирование превращается в рутину, особенно если написание кода даётся легко.&lt;/p&gt;
&lt;p&gt;В зависимости от возможностей вашей фирмы, попросите руководителя переключить вас на другой проект. Если вы можете себе позволить, переключитесь на другую область (например, вы могли писать образовательное ПО под Windows, а теперь попробовать писать социальные сети).
Или вы можете выбрать несколько сторонних хобби-проектов, где используются новые для вас области программирования. Например, попробуйте сделать мобильную игру в свободное время. Вы можете быть удивлены тем, как много энергии могут дать вам личные проекты. Главное, убедитесь, что сторонние проекты значительно отличаются от того, чем вы итак занимаетесь.&lt;/p&gt;
&lt;p&gt;Развивайте умственное и эмоциональное здоровье
Недостаток мотивации может быть симптомом более глубокой проблемы, начиная с обезвоживания и заканчивая депрессией. Иногда глотка воды достаточно, чтобы вернуть себе вдохновение. Но если недостаток мотивации проявляется долгое время, лечение может оказаться не таким простым.
Для компьютерных профессий, таких как программист, нужно соблюдать 3 принципа касательно здоровья. Во-первых, надо регулярно заниматься физическими упражнениями. Если времени мало, можно выполнять простые упражнения на рабочем месте. Во-вторых, минимизируйте своё утомление от компьютера. В-третьих, нормализуйте свой сон.&lt;/p&gt;
&lt;p&gt;Умственная усталость также является следствием статичности окружающей обстановки. Смотреть на одни и те же 4 стены каждый день довольно монотонно. А монотонность ведёт к скуке. Это можно вылечить сменой вашей обстановки, например путём перестановки мебели, смены места или хотя бы фона рабочего стола.
Наконец, недостаток мотивации часто связан с промедлением в выполнении задач. Здесь очень полезной окажется техника Pomodoro. Она разделяет ваш рабочий день на периоды работы и отдыха. Никогда не пробовали? Потестируйте хотя бы 1 или 2 недели. Результаты могут вас приятно удивить.&lt;/p&gt;
&lt;p&gt;Выводы
Программирование — это весело! Программирование — это скучно. Это снова весело! Это снова скучно. Каждый раз эти ощущения несколько разные, но советы, описанные выше, всегда работают.&lt;/p&gt;
&lt;p&gt;Ещё одна вещь, которая может вам помочь — это онлайн-соревнования по программированию. Это потребует определённых личностных качеств, но дух соревнования может возродить и поддерживать в вас страсть.&lt;/p&gt;
&lt;p&gt;Перевод «Programming Burnout: How to Regain Your Lost Motivation»&lt;/p&gt;
&lt;p&gt;©tproger&lt;/p&gt;</summary><category term="tproger"></category></entry><entry><title>Вы разработчик? Так почему вы до сих пор на кого-то работаете?</title><link href="https://stonedastronaut.github.io/vy-razrabotchik-tak-pochemu-vy-do-sikh-por-na-kogo-to-rabotaete.html" rel="alternate"></link><updated>2015-08-03T17:55:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:vy-razrabotchik-tak-pochemu-vy-do-sikh-por-na-kogo-to-rabotaete.html</id><summary type="html">&lt;p&gt;Как разработчик, вы сидите на золотой жиле. Вы осознаете это?
Нет, серьезно, на @#$% золотой жиле! Никогда в истории не существовало возможностей так легко создать что-то с нуля, с маленьким или отсутствующим начальным капиталом и маркетинговой моделью, ограниченной только вашим воображением.
Подумайте о крупнейших сайтах, которые вы постоянно посещаете: Facebook, Twitter, Flickr, Foursquare, или даже Google — все они были созданы разработчиками, у которых была лишь идея. Было ли это легко? Черт, нет. Но это могло быть сделано только в наше время. Так, черт побери, почему вы просиживаете день за днем, работая на кого-то?
Да, я тоже наемный работник. И я ненавижу это.
Если вокруг есть столько прекрасных возможностей, почему большинство разработчиков не работают на себя? Я думаю, есть несколько отговорок, которые мы придумываем сами себе. Но ни одна из них не является серьезной.&lt;/p&gt;
&lt;p&gt;Миф №1: у вас нет времени
Я часто слышу эту отговорку и каждый раз смеюсь. Сколько времени вы проводите за телевизором или игрой в XBox, Wii, Playstation и так далее? От силы час в день, так? А сколько времени вы проводите в Facebook'е и Twitter'е? (Скорее всего, минутку сейчас, минутку потом?) А что вы делаете каждый день в обеденный перерыв? Это ведь целый час времени.
Вот что я скажу: час тут, час там — у вас на самом деле есть время. Суть в том, как вы его проводите. Если вы действительно хотите что-то сделать, вам нужно найти идею (действительно хорошую идею) и загореться ею! Если вы увлечетесь чем-то, вы найдете время. И в итоге придете к тому, что вам некомфортно работать над чем-то кроме вашей идеи.
Мне 31 год, я женат, и у нас трое маленьких детей. Я целый день работаю, а потом прихожу домой к чудесной жене, которая к концу дня не знает, куда деваться от детей. Я считаю себя довольно занятым человеком, но тем не менее мне удается находить как минимум 20 часов в неделю для того чтобы поработать над моей идеей, которая поможет мне освободиться из зарплатной ловушки, куда я сам себя заманил.
Я пишу этот текст сидя в уютном кресле в кафе через дорогу от моей работы. Я захожу сюда практически каждый день, и это составляет почти 5 дополнительных часов продуктивной работы в неделю! Никаких бегающих детей вокруг, никаких отвлекающий факторов, только я, мой лэптоп и мои наушники.&lt;/p&gt;
&lt;p&gt;Миф №2: я не могу придумать идею
Если вы только начинаете работу, вы постоянно слышите от людей фразы типа «Идеи ничего не стоят» и «Я легко могу придумать идею, просто у меня нет времени на реализацию». Когда вы сидите и пытаетесь придумать Очередную Клевую Штуку (очередной Facebook, очередной Reddit и т.д.), вам кажется, что все хорошие идеи уже реализованы! И вы не можете придумать ничего стоящего.
Попросите основателя любого крупного веб-сайта сравнить текущее положение дел с тем, каким он его представлял, и, я уверен, он рассмеется. Все они вряд ли пошли тем путем, которым собирались пойти. Сейчас эти сайты имеют огромную посещаемость благодаря тому, что их создатели были достаточно умны, чтобы улучшать и создавать функции, которые нравятся пользователям.
Поэтому перестаньте пытаться сделать хоумран (прим. пер. — в бейсболе удар через все поле, позволяющий набрать очко), лучше попытайтесь сперва добежать до базы! Создайте что-то полезное. Что-то, что нужно людям, а затем улучшайте это, снова и снова. Начните с простого и развивайте. Если вы чересчур увлечены конечным результатом (яхта и частный остров в Карибском море), то вы всего лишь фантазер. Сделайте что-нибудь, покажите это людям, получите отзывы и улучшайте.&lt;/p&gt;
&lt;p&gt;Вот что я делаю, когда пытаюсь придумать новую забавную идею для работы:
1. Слушаю National Public Radio (или любое другое ток-шоу). Люди обожают жаловаться. Я смотрю на любую жалобу как на возможность! Например, мой текущий проект родился во время празднования столетия движения бойскаутов. Я сам бывший бойскаут, был лидером скаутов. Однако я успел позабыть обо всех сложностях. Радиопередача подкинула мне идею, над которой я сейчас работаю. Это довольно узкая ниша, но она предоставляет много возможностей.
Еще мне приходит на ум много плохих идей, но это нормально! Это как упражнение. Чем больше вы открыты, тем легче мысли приходят в голову и тем легче оценивать их. Найдите то, что люди ненавидят, что доставляет им неудобство, и сделайте что-то, за что они захотят заплатить (неважно, напрямую или косвенно).
2. Чем вы любите заниматься? Что вам больше всего нравится? Займитесь тем, что вам нравится, иначе вскоре это может действительно надоесть, и вам будет хотеться заняться чем-то другим. Перед тем, как вы начнете, убедитесь, что вы готовы думать о вашей идее круглые сутки в течение недели, иначе у вас ничего не получится. Одно из моих увлечений — погружение с аквалангом. Я бы очень хотел жить в мире, где не нужно думать ни о чем другом, кроме погружений. Так что у меня есть несколько идей в этой области, которые я пока обдумываю.
3. Ведите записи. Google Docs вам в помощь. У меня есть документ, который я называю «Идеи для моих программ». Когда у меня появляется идея — не важно насколько она тривиальна или уникальна — я немедленно записываю ее в этот документ. Некоторые люди для этой цели держат блокноты на прикроватной тумбочке. Даже не знаю, сколько раз за рулем у меня возникали идеи, а к тому времени, когда я добирался домой, забывал их. Не то что бы это были плохие идеи, просто я отвлекался и забывал о них. Через некоторое время они возвращались ко мне, однако было все равно неприятно. Ведение записей позволит вам упорядочивать ваши идеи, добавлять к ним заметки и размышления.
Никогда не начинайте работу в тот же день, как придумали идею. Обдумайте ее по крайней мере день или два. Убедитесь, что она стоит того, чтобы потратить на нее следующие несколько лет вашей жизни. Не делайте что-то ради того, чтобы посмотреть, понравится ли это людям. Сперва прочтите «Да, но кто вам сказал, что они КУПЯТ эту штуку?» (прим. пер. — ссылка ведет на непереведенную статью) и возвращайтесь. Давайте, я подожду.&lt;/p&gt;
&lt;p&gt;Миф №3: у меня нет денег
Кто сказал «деньги»? Только если ваша идея совершенно точно требует вложений, что является довольно редким явлением в Интернете, вы можете начать с нулем. Нуль. Ничего. Ничегошеньки. Будьте изобретательны, чтобы достигнуть нужного результата. Меняйтесь, продавайте, консультируйте. Возьмите за правило тратить как можно меньше, чтобы добиться результата. А лучше не тратьте деньги вообще до тех пор, пока не станете получать их от своих клиентов.
Я потратил кучу денег на хостинг для Django в моем текущем проекте. Хостинг мне нравится, однако я считаю это роскошью. Я мог бы использовать Google App Engine бесплатно, но черт, я способен потратить сто баксов в год. Я планирую использовать бесплатный Chargify до тех пор, пока не стану получать от проекта достаточно денег, чтобы тратить их на хостинг.
Для старта вам не нужны деньги. Если вы думаете иначе, и особенно если вы впервые занимаетесь своим делом, вам стоит подумать еще раз.&lt;/p&gt;
&lt;p&gt;Миф №4: я ничего не знаю о маркетинге/дизайне/и т.п.
Это не самая лучшая отговорка от старта своего дела, однако самая популярная. Как разработчик, я прихожу в ужас от того, что нужно продавать. Я ненавижу висеть на телефоне. Я не люблю думать о том, как бы привлечь побольше народу на мой сайт. Я люблю создавать что-то. Если сейчас вы соглашаетесь со мной, то у вас есть два пути:
1. Найдите партнера, который разбирается в том, в чем не разбираетесь вы. Сосредоточьтесь на том, что вы делаете хорошо. Если вы разработчик, слушайте, что говорят пользователи и тратьте все свое время на создание действительно классного продукта. Продажи и маркетинг могут отнять все свободное время. Это действительно трудно управляться с обоими направлениями. Если у вас два партнера-технаря, мы можете разделить между собой задачи по продажам и маркетингу, и в конце концов обнаружите, что тот, кто справляется с ними лучше, будет ими заниматься все время. Однако тот факт, что вы «разработчик», не означает, что вы не должны участвовать в продажах или маркетинге! Хотя на сильных сторонах необходимо сосредотачивать свои усилия, однако также нужно знать, как работают продажи, маркетинг, PR и все с этим связанное. Это предотвратит фразы типа «Черт, почему Джон не может привести ни одного клиента? Мне кажется, что я делаю всю работу.» Вы станете больше ценить продажи и маркетинг после того, как узнаете, насколько тяжело ими заниматься! Давайте! Не будьте бабой! (Дамы, прощу прощения за выражение.) И наоборот, дайте вашему партнеру, который соображает в продажах или маркетинге, просмотреть код хотя бы по диагонали. Устройте этакое сотрудничество. По крайней мере, если он будет знать, сколько времени занимает ваша работа, он сначала проконсультируется с вами насчет новой фичи, а не пойдет продавать несуществующую функциональность. Уберите завесу тайны и вникайте в дела друг друга!
2. Не будьте тряпкой и научитесь этому! Это значит, что вам нужно будет отложить код в сторонку и научиться продавать и стать настоящим продажником или пиарщиком. Это потребует времени, только не сдавайтесь! Хорошая новость: что то, что работает для одной компании или сайта, необязательно будет работать для другой. Что? Это больше похоже на плохую новость? Взгляните на это с другой стороны: худшее, что вы можете сделать, это не справиться. Я иронизирую, но это правда. Если вы провалитесь в маркетинговой компании, что тогда? ПОПРОБУЙТЕ сделать это другим способом. Добавьте неудачный вариант в список плохих способов и двигайтесь дальше. Изучите книги, форумы, сайты, руководства, а затем идите и ЭКСПЕРИМЕНТИРУЙТЕ. Для этого вам даже не нужны деньги. Будьте изобретательны и находчивы. Вам нужно узнать, какой подход работает именно для вас, а не для кого-то другого. Учитесь и пробуйте.&lt;/p&gt;
&lt;p&gt;Миф №5: я не могу бросить работу — мне нужен стабильный доход
Это больше похоже на реальную причину, нежели на отговорку, однако зачем мириться с существующим положением вещей? Вы действительно хотите до конца жизни каждый день на кого-то работать, соглашаясь с предложенными условиями? Нет? Ну что ж, тогда придется чем-то пожертвовать. И вы об этом знаете, иначе не читали бы эту статью!
При малейшей возможности лучшее что вы можете сделать — уйти с работы и уделять 100% времени вашему стартапу. Это заставит вас сосредоточиться на продукте и сделать что-то, за что люди заплатят. Необходимость оплачивать счета и покупать еду — это очень хорошие мотиваторы.
Если у вас тоже есть дети и уход с работы невозможен, вы все равно можете найти время. Просто проект займет больше времени. Смотрите «Миф №1: у вас нет времени».
Все большие стартапы не делались за одну ночь. Иногда потребуются годы, чтобы чего-то достичь. Главное не сдаваться!
Как только у вас появится работающий прототип, вам нужно пойти к людям, которые говорили, что идея хорошая, и узнать, что они думают о вашем продукте. Это действительно придает сил. Найдутся и те, кому ваш продукт не понравится, однако не принимайте это близко к сердцу. Учтите критику и сделайте ваш продукт еще лучше. Худшее, что может случиться, это люди, которые говорят приятные вам вещи только потому, что не хотят обидеть вас. В таком случае у вас получится заурядная вещь, которая никому не нужна.
После того, как вы начали получать отзывы и привлекать пользователей, начните привлекать инвестиции в ваш проект. Просите об этом знакомых, общайтесь с бизнес-ангелами. Даже если вам не удастся убедить их вложить деньги, это еще не означает, что ваша идея плоха, это означает, что вы должны улучшить ее и привлечь больше пользователей. Если вы можете привлечь и удержать людей, значит вы чего-то стоите. В наше время необязательно иметь хорошо проинвестированный или модный проект, чтобы зарабатывать деньги!&lt;/p&gt;
&lt;p&gt;Миф №6: я не могу найти партнера
Плохое партнерство — самая частая причина провала стартапов. Ссоры или партнеры, которые не вкладываются в работу, убивают дело очень быстро. Очень важно найти такого же увлеченного партнера, как и вы.
Не думайте, что кто-то сразу загорится вашей идее так же сильно. Вы гораздо дольше размышляли и мечтали о ней. При обсуждении идеи критика и игра в «адвоката дьявола» приветствуются. Вы действительно думаете, что ваше мнение — это мнение всех? Поэтому приветствуйте несогласия и расхождения во взглядах, по крайней мере до тех пор, пока они не выходят за пределы конструктивной критики.
Где искать хорошего партнера? Лучше всего среди знакомых вам людей. Таким образом снижается риск несовместимости, потому что вы уже знаете людей, их привычки и пристрастия.
Также вам необходим тот, кто понимает, что в начале пути стартап предполагает тяжелую работу и маленькую отдачу. Участвуйте в сообществах, таких как Hacker News и Founders Mix, чтобы найти подходящих вам людей.
Если недалеко от вас проходят встречи Gangplank, сходите потусите там. Послушайте, что говорят люди, и не бойтесь поделиться с ними своей идеей. Не пытайтесь угадать, что нужно людям, а СПРОСИТЕ их об этом прямо! Это глупо болтаться рядом и бояться высказать вслух свою идею, потому что «они могут украсть ее». Идеи ничего не стоят. Если вы думаете, что кто-то может реализовать ваши задумки лучше, у вас большие проблемы.&lt;/p&gt;
&lt;p&gt;А теперь возьмите и сделайте что-то, что нужно людям!&lt;/p&gt;
&lt;p&gt;©megamozg&lt;/p&gt;</summary><category term="freelance"></category><category term="habr"></category></entry><entry><title>7 типичных ошибок неопытных программистов</title><link href="https://stonedastronaut.github.io/7-tipichnykh-oshibok-neopytnykh-programmistov.html" rel="alternate"></link><updated>2015-08-03T17:42:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-08-03:7-tipichnykh-oshibok-neopytnykh-programmistov.html</id><summary type="html">&lt;p&gt;Сколько люди будут учиться программированию, столько будут совершать одни и те же ошибки. Существуют грабли, на которые просто невозможно не наступить. Тем не менее небольшая ошибка в начале разработки может обернуться сильной головной болью для программиста и его коллег в будущем. Хочется верить, что читатели этой статьи смогут сократить количество неверно принятых решений в ходе разработки программ до минимума.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Неумение кататься на велосипедах
Неожиданно, да? На самом деле мы хотели сказать, что в эпоху дот-нетов, мак буков и web 2.0 всё (ну или почти всё) уже написано. На любой более-менее популярный язык программирования — по несколько фреймворков и сред разработки, в том числе множество бесплатного, но качественного софта и огромное количество CMS’ок и движков сайтов, для коих, в свою очередь, тысячи плагинов, расширяющих их функционал.&lt;/p&gt;
&lt;p&gt;Но начинающие программисты часто либо забывают про этот факт, либо его игнорируют. Они, может быть, и понимают, что кто-то уже решил задачу, которая перед ними стоит, и предлагает решение абсолютно бесплатно, но это почему-то не останавливает их от изобретения велосипедов, которые в большинстве случаев оказываются менее качественными, чем существующие. А ведь вместо придумывания лучше найти хороший пример с открытым кодом и сосредоточиться на других задачах.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Использование неподходящих средств разработки
Знаете, некоторые прям-таки с гордостью заявляют, что пишут веб страницы в блокноте Windows. По их мнению, этим фактом они подчеркивают некий аскетичный стиль программирования, которому следуют, а на самом деле — еще раз демонстрируют свою глупость. Опять же, в наше время существует множество удобных сред и средств разработки, которые упрощают написание кода, заранее проверяют в нём ошибки, выдают подсказки и прочее, и прочее. Зачем пренебрегать имеющимися благами программирования? Видимо для того, чтобы сделать больше ошибок и потратить лишнее время на отладку — иных причин я не вижу. Используйте блокнот как блокнот.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вопросы, на которые уже 100 раз ответили
Перед тем, как начать спрашивать что-либо на форумах и в сообществах, просто поищите ответ на свой вопрос. Если Вы начинающий программист, то наверняка кто-то до Вас уже интересовался тем, что Вам непонятно. Сначала ищите информацию в мануалах, документации, на форумах, в разделах FAQ, а только потом, в случае неудачи, спрашивайте у других.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Костыли
У новичков код пестрит неочевидными ходами и решениями. Некоторые из них появляются в результате того, что при тестировании программа начинает вести себя не так, как ожидается. Вместо того, чтобы докопаться до сути проблемы, неопытный программист на скорую руку начинает вставлять в код заплатки, которые уродуют программу. Доходит до смешного. Например, на сайте была форма, куда пользователь должен был ввести число от 0 до 999. Вместо того, чтобы получить из поля данные и проверить, действительно ли это число находится в заданном диапазоне, человек сделал проверку на количество символов не больше трех. В итоге в логике программы становится трудно разобраться. Ещё сложнее становится вносить изменения и расширять функционал.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;«Этого точно никогда не будет»
Любимый прием новичка – игнорировать обработку некорректных входных данных. Мотив: «Этого точно никогда не будет». А ведь будет наверняка! Закон программистской подлости — случится именно то, чего ты не предусмотрел. Надо быть готовым, что там, где должны ввести год рождения, будут вводить все, что угодно, кроме нужных четырех цифр. При этом еще нужно придумать правильные ограничивающие условия.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Некрасивый код
Стоит ли говорить, что вначале многие не задумываются о длине строчек кода, размере функции, забывают о комментариях и т.д. Не задумываются в основном потому, что не имеют опыта длительной разработки, когда начинаешь понимать, что всё то, что на первый взгляд кажется мелочью, на самом деле очень важно для жизнеспособности программы в дальнейшем.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Не получилось с первого раза — ищем простой путь
Наверное, все за собой замечали: по какой-то непонятной причине программа работает некорректно, а в чем дело — мы никак определить не можем. Тогда мы и начинаем подставлять костыли из пункта 5. Например, есть файл с объявлениями констант и функциями, который используют разные модули программы. В одном модуле этот файл забыли включить, что в ходе выполнения привело к выводу ошибки интерпретатором о том, что не нашлась константа с таким-то именем. Вместо того, чтобы разобраться, где она объявлена и почему не нашлась, мы берем и ещё раз объявляем её в проблемном модуле. Это очень плохое решение. Не делайте так, ищите корень проблемы.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Учимся на своих ошибках и не забываем: хорошо написанная программа – плюс один в карму!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©GeekBrains&lt;/em&gt;&lt;/p&gt;</summary><category term="geekbrains"></category></entry><entry><title>7 советов для профессионального роста программиста</title><link href="https://stonedastronaut.github.io/7-sovetov-dlia-professionalnogo-rosta-programmista.html" rel="alternate"></link><updated>2015-07-21T22:46:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-21:7-sovetov-dlia-professionalnogo-rosta-programmista.html</id><summary type="html">&lt;h2 id="1"&gt;1. &lt;strong&gt;Регулярная практика программирования&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Постоянно программируйте, если Вы действительно хотите стать профессионалом мастером своего дела. Вы будете писать ужасные программы, но сможете подняться на новую ступень уже тогда, когда поймете, что они ужасны. Вы начнете писать по-другому, сделав выводы и переосмыслив ошибки. Вам будет казаться, что теперь Ваш код вполне хорош. Но вскоре снова возникнет понимание того, что он далек от совершенства, что разработанная архитектура громоздка и неповоротлива. И это будет новой ступенью на лестнице Вашего профессионального развития.&lt;/p&gt;
&lt;p&gt;О типичных ошибках можно и нужно читать книги, статьи в Интернете, но без реальной практики программирования, без проб и ошибок ценность этой информации будет нулевая.&lt;/p&gt;
&lt;h2 id="2"&gt;2. &lt;strong&gt;Культура программирования&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Относитесь к коду разрабатываемой программы, как к собственному лицу. Выработайте правила оформления текста и постоянно придерживайтесь их. Не загромождайте текст ненужными функциями, закомментированными блоками старого кода и прочим мусором. Старайтесь постоянно улучшать качество кода, стремитесь сделать его как можно более понятным, лаконичным и концептуальным.&lt;/p&gt;
&lt;h2 id="3"&gt;3. &lt;strong&gt;Храбрость&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Если Вам кажется, что от кода "дурно пахнет", и Вы знаете, как его улучшить, - немедленно удалите этот код и напишите заново. Да, да - именно удалите. Не надо комментировать старое ненужное барахло, думая, что оно еще когда-нибудь пригодится и сработает. Просто возьмите, удалите и напишите с чистого листа новый качественный код.&lt;/p&gt;
&lt;h2 id="4"&gt;4. &lt;strong&gt;Вера в свои силы&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Иногда возникает настолько сложная проблема, что руки опускаются. Просто непонятно, что дальше делать. Не паникуйте, а порадуйтесь возможности решить сложную задачу, обогатив свой опыт. Посмотрите на ситуацию аналитически. Создайте прототип проблемы и постепенно приближайте его к самой проблеме. Например, недавно мы с коллегой мучились, пытаясь скомпилировать огромную старую систему, использующую кучу сторонних компонент на древнем компиляторе. В итоге возникала ошибка линковщика, которая не говорила нам решительно ни о чем. Мы создали новый пустой проект и постепенно стали добавлять туда модули злосчастной программы. Так мы смогли локализовать ошибку. Ну, а когда знаешь, в чем именно проблема, - решить ее становится значительно проще!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Верьте&lt;/strong&gt; в &lt;em&gt;свои&lt;/em&gt; силы. Человек &lt;strong&gt;умнее&lt;/strong&gt; машины!&lt;/p&gt;
&lt;h2 id="5"&gt;5. &lt;strong&gt;Быть в авангарде&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ИТ развиваются быстро и замедляться не планируют. Можно писать замечательные консольные программы на Паскале, но только вряд ли они найдут благодарных пользователей. Все потому, что средства разработки совершенствуются постоянно. Та область, в которой сегодня Вы пионер, завтра будет использоваться повсеместно. То, что сегодня используется миллионами, завтра станет вчерашним днем, "legacy", "deprecated". Нужно постоянно держать руку на пульсе, чтобы в один прекрасный день не оказаться за бортом парохода современности.&lt;/p&gt;
&lt;p&gt;На самом деле следить за технологиями не так уж и сложно. В ИТ, как и везде, все новое – это хорошо забытое старое. Нельзя сказать, что за последние годы в программировании появилось нечто принципиально новое, кардинально отличающееся от всего известного ранее. Все, что человек придумывает, основывается на его предыдущем опыте. Секрет в том, что помимо чьих-то там технологий есть Ваш личный опыт, собственная база знаний и технический склад ума, которые от Вас никуда не денутся. И если Вы обладаете этим бесценным багажом, то оставаться в авангарде информационных технологий оказывается вовсе и не сложно.&lt;/p&gt;
&lt;h2 id="6"&gt;6. &lt;strong&gt;Английский язык&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Без этого никуда. Пока все новое в сфере как программирования, так и ИТ в целом идет к нам с Запада. Самая лучшая документация, самые полезные форумы, самые интересные блоги всегда были и будут на английском языке. В ИТ индустрии английский давным-давно завоевал полное господство и перемен не предвидится. Техническую документацию придется читать любому программисту. Впрочем, нет никакой необходимости доводить свой английский до Upper Intermediate. Достаточно знать столько, сколько необходимо для работы. Программист обязан уметь читать по-английски. Говорить и писать не так критично, хотя и крайне желательно, но читать обязан.&lt;/p&gt;
&lt;h2 id="7-must-read"&gt;7. &lt;strong&gt;Книги &lt;em&gt;"must read"&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Есть литература, которая обязательно должна быть прочитана любым уважающим себя программистом. Причем читать ее лучше не один раз, а время от времени возвращаясь к некоторым главам или же перечитывая книгу целиком. Понимание многих вещей приходит только с опытом, которого на момент первого прочтения может не быть.&lt;/p&gt;
&lt;p&gt;Безусловно, прочтение такой литературы поднимает Вас, как специалиста, на новую ступень. Хороших книг много, но эти просто жемчужина литературы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;"Искусство программирования"&lt;/strong&gt;, &lt;em&gt;Дональд Э. Кнут&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Объектно-ориентированный анализ и проектирование"&lt;/strong&gt;, &lt;em&gt;Гради Буч&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Совершенный код"&lt;/strong&gt;, &lt;em&gt;Стив Макконел&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Мифический человеко-месяц"&lt;/strong&gt;, &lt;em&gt;Хилл Чапел, Фредерик Брукс&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;"Приемы объктно-ориентированного проектирования. Паттерны проектирования"&lt;/strong&gt;, &lt;em&gt;Э. Гамма, Р. Хелм, Р. Джонсон, Д. Влиссилес&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А &lt;em&gt;что&lt;/em&gt; читаете &lt;strong&gt;Вы&lt;/strong&gt;?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;©geekbrains&lt;/em&gt;&lt;/p&gt;</summary><category term="geekbrains"></category></entry><entry><title>Каток никого не ждёт</title><link href="https://stonedastronaut.github.io/katok-nikogo-ne-zhdiot.html" rel="alternate"></link><updated>2015-07-17T22:24:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-17:katok-nikogo-ne-zhdiot.html</id><summary type="html">&lt;p&gt;Из всего, что я делаю или использую сегодня, единственное, что у меня осталось общего с моей первой работой — это написание кода.&lt;/p&gt;
&lt;p&gt;Все остальное менялось и изменялось, и изменялось снова.&lt;/p&gt;
&lt;p&gt;Если вы все время не продолжаете учиться, читать, совершенствовать свои навыки, то, в конечном счете, этот мерзкий каток позади раздавит вас окончательно. И тут ваша карьера, скорее всего, закончена.&lt;/p&gt;
&lt;p&gt;Когда я устроился на мою первую работу, я и понятия не имел, что будет дальше. В 1981 году ничего не предвещало, что все будет меняться гигантскими темпами. Люди все еще писали пакетные приложения на мэйнфреймах, везде были мини-ЭВМ с терминалами и персональные компьютеры были немногим больше, чем игрушками. Мало кто имел компьютер у себя дома, не было никакой электронной почты за пределами крупных компаний и даже это практически не использовалось. И, конечно, не было никакого Интернета. Было лишь несколько языков программирования и большинство из них были созданы в 1950 году.&lt;/p&gt;
&lt;p&gt;Было несколько журналов, которые писали о программировании и не было ничего, даже отдаленно напоминающего выставки. У меня даже были друзья, которые получили степень CS(Computer Science) и которые даже не касались ничего из того, что недавно было разработано. Люди могли получить работу программиста даже без опыта или образования, также как и я. Вы либо учились этому самостоятельно, либо, может быть, на работе.&lt;/p&gt;
&lt;p&gt;В мой первый день я почти совсем не представлял, что за всем этим стоял громыхающий монстр, который только начинал свой разбег.&lt;/p&gt;
&lt;p&gt;Мои первые два года состояли, в основном, в программировании на Fortran с небольшими вставками ассемблера. Я продолжал работать с Basic и различными диалектами ассемблера, и даже баловался с Pascal дома. Я читал все, что можно было найти, только потому, что это было интересно.&lt;/p&gt;
&lt;p&gt;Когда я попал в группу, занимавшуюся микрокомпьютерами, темп жизни неожиданно начал ускоряться. После моих усилий в написании “яблочного” приложения”, появился IBM PC и я должен был писать для него в Pascal. Меня попросили проверить комплект портативных Unix-боксов, которые должны были быть направлены потенциальным клиентам для проверки спецификаций F-16. Это было мое первое знакомство с C, которое и привело меня к заказу компилятора C на работу. Никто на работе не слышал о нем. В то же время я кратко ознакомился с Lisa, но при этом, понятия не имел об Object Pascal. Я видел рекламу Mac, но у нас не было ни одного, хотя я бы хотел поработать с одним из них.&lt;/p&gt;
&lt;p&gt;Когда я уволился и начал свой стартап(когда-нибудь я об этом расскажу) по созданию программы для электронных таблиц для Mac(Trapeze), мы решили сделать ее на С, хотя Apple, на тот момент, все еще предпочитали Pascal. В последующем, С оказался верным выбором, так как C господствовал в течение длительного времени (и до сих пор является основным для Linux).&lt;/p&gt;
&lt;p&gt;Примерно в то же время я прочитал знаменитый номер журнала Byte о Smalltalk и сразу же понял, что за объектами будущее, и что мне нужно немедленно разобраться в них.&lt;/p&gt;
&lt;p&gt;Сейчас я действительно начал понимать, что темпы изменений в программировании никогда уже не замедлятся снова. Даже во время конца 80-х, без интернета или электронной почты, скорость с которой появлялось что-то новое вырисовывалась все более явно.&lt;/p&gt;
&lt;p&gt;После продажи стартапа и начала консультаций по программированию на Mac, со временем мы начали DeltaGraph (это уже другая история), и я создал несколько расширений С для работы с объектами. C++ все еще не существовало, по крайней мере, юзабельного, но я хотел использовать его преимущества, поэтому я написал несколько банальных расширений, которые позволили мне собрать несколько драйверов вывода, но по-прежнему оставить только один внутренний генератор выхода.&lt;/p&gt;
&lt;p&gt;Наконец, в начале 90-х появился C++ и я уже понимал, как проектировать с применением ОО. Конечно, я по-прежнему время от времени кодил на С.&lt;/p&gt;
&lt;p&gt;В какой-то момент я прочитал о так называемом “web” и немного поработал с текстовым браузером и задумался над тем, куда все это приведет. В конечном итоге, я работал в Bay Area около года в середине 90-х и помню тот день, когда Netscape вышла в мир. Но даже видя это, в тот момент я совсем не понимал, какие огромные изменения должны были произойти.&lt;/p&gt;
&lt;p&gt;Мысленно возвращаясь в то время, я помню, как читал о новом языке Java и изучал его. К тому времени Интернет уже начал развиваться, он был все еще так примитивен и я не был уверен, куда все это шло, но теперь я знал достаточно, чтобы участвовать. Когда начинаются значительные изменения в мире, вы можете не знать, что будет в дальнейшем, но вы уже должны шагать в ногу с ними.&lt;/p&gt;
&lt;p&gt;Я устроился на работу в веб-консалтинговую фирму, которая специализировалась на NeXT WebObjects которые были разработана в некоем извращенном языке, называемом Objective-C. Очевидно, некоторые люди в начале 80-х как и я были очарованы C и Smalltalk, за одним исключением — они сделали настоящий язык из него. Я не только изучил этот новый язык, но нашел другой странный язык — Javascript, который имел мало общего с Java. Добавьте к этому HTML и внезапно у меня появилась совершенно новая платформа для работы.&lt;/p&gt;
&lt;p&gt;Примерно в это же время я начал встречаться с людьми, которые тоже рассказывали о других языках программирования. Оглядываясь на времена моей первой работы, я понял, что больше я не смогу знать обо всем, что происходит в программировании. Я должен был научиться сосредотачиваться на определенных моментах, и достаточно уделять внимания другим, чтобы ничего не упустить.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Большой каток начал свое движение.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Во время этой первой волны веб-программирования некоторые из моих друзей, которые получили CS степень, когда я только начал работать, внезапно оказались безработными, поскольку люди начали отказываться от мейнфреймов и Cobol, а они ничему не научились за прошедшее время. В отличие от меня, они были сосредоточены только на том, что они узнали и с чем работали на протяжении почти двух десятилетий, и все это вдруг исчезло.&lt;/p&gt;
&lt;p&gt;Они были раздавлены.&lt;/p&gt;
&lt;p&gt;Когда только появился Java и J2EE (ныне JEE) сначала я просто попробовал поработать с ним, а в конечном результате начал демонстрировать его остальным. Я назвал его «Чуждая Технология». Довольно скоро мы перешли на создании веб-приложений с использованием Java J2EE, именно тем примитивным, каким он был тогда.&lt;/p&gt;
&lt;p&gt;Работая в середине 00-х, я прочитал о так называемом AJAX и решил использовать его в паре внутренних приложений, которые я проектировал. Когда я упомянул об этом в команде проектировщиков, они обвинили меня в применении новых технологий! Мне пришлось объяснить, что это был простой Javascript. Они сказали мне, что Javascript умирает, что незачем тратить время на попытки сделать что-то новое с ним. А люди смешные.&lt;/p&gt;
&lt;p&gt;Теперь, когда интернет работает на всю катушку и понятие открытого исходного кода стало общеупотребительным, разверзся настоящий ад. Я даже близко не успевал за развитием всего этого. Теперь нужно было выбирать то, в чем вы будете хороши, что-то для интереса и развития и надеяться, что вы по крайней мере знаете названия всего остального. Вся эта ситуация усугубляется и по сей день, и, вообще-то, иногда даже пугает.&lt;/p&gt;
&lt;p&gt;Каждую неделю появляется еще один новый язык. Добавьте к этому все фреймворки. HTML5, CSS3 и еще больше сокращений, которые никто не сможет вспомнить все разом. Сегодня программирование является огромным водоворотом новых идей. Некоторые из них поразительны, некоторые имеют огромный потенциал, многие оканчиваются ничем. Но во всем этом море программирования вы должны выбрать правильное направление!&lt;/p&gt;
&lt;p&gt;Этот долбанный каток сейчас ускоряется и программисты работают как сумасшедшие, чтобы успевать впереди него. Мне нужно заниматься ROR или писать только приложения на JavaScript? Должен ли я учить Python или Scala? SQL или NоSQL? IOS или Android? Облака или нет? Безумный или сумасшедший, выбери свой яд сам.&lt;/p&gt;
&lt;p&gt;Вспоминая три десятилетия работы в режиме успевать-впереди-катка, я не могу поверить, как много изменилось с того момента, когда я писал Fortran на бумаге, потому что у нас было 7 человек за одним терминалом. За это время произошло много изменений, и многие люди вынуждены были стать менеджерами или заняться сетями или продавать гамбургеры.&lt;/p&gt;
&lt;p&gt;Что будет в ближайшие 30 лет, как быть? Останутся ли программисты или мы все будем раздавлены? Я не могу вспомнить ни один период в истории, когда так много менялось с такой огромной скоростью в одной отрасли. Уже нет времени передохнуть, не изучая что-то новое на тот случай, если то, что вы знаете сегодня, завтра уже устареет.&lt;/p&gt;
&lt;p&gt;Не имеет значения, 20 лет вам или 55, знаете вы что-то или совсем ничего, то, что вы сделаете сегодня, уже не будет актуально через 10-20 лет. Я наблюдал за этим раз за разом. Одним из моих любимых выражений является «Единственная вещь, которая никогда не меняется, так это возможность изменить себя». Только я думаю, что можно добавить кое-что — изменения продолжают ускоряться.&lt;/p&gt;
&lt;p&gt;И скрежещущий монстр дышит вам в затылок и топливо у него не кончается.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;© habrahabr&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Джон Резиг - Пишите код каждый день</title><link href="https://stonedastronaut.github.io/dzhon-rezig-pishite-kod-kazhdyi-den.html" rel="alternate"></link><updated>2015-07-17T20:17:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-17:dzhon-rezig-pishite-kod-kazhdyi-den.html</id><summary type="html">&lt;p&gt;Прошлой осенью работа над моими побочными проектами зашла в тупик: я практически не продвигался вперёд и у меня никак не получалось делать больше, не принося в жертву свою основную работу.&lt;/p&gt;
&lt;p&gt;В моей организации работы обнаружилось несколько серьёзных проблем. В основном я работал по выходным и иногда по вечерам. Как оказалось, это не самая лучшая для меня стратегия. Необходимость сделать за выходные как можно больше и лучше сильно давила на меня, а если мне не удавалось доделать задуманное, это ощущалось как провал. Проблему усугубляло и то, что не было никакой гарантии, что очередные выходные будут свободны, и даже если так — не факт, что я захочу кодить с утра до вечера все эти два дня — надо ведь иногда как-то развлечься или просто расслабиться.&lt;/p&gt;
&lt;p&gt;Кроме того, недельный перерыв — это слишком много, очень легко забыть, над чем ты работал и на чём остановился, даже если делать заметки. А уж если в выходные поработать не удавалось — то перерыв растягивался на две недели. Такие многонедельные переключения контекста могут быть смертельными — многие мои проекты погибли, не родившись, от такого недостатка внимания.&lt;/p&gt;
&lt;p&gt;Услышав о невероятном эксперименте Дженнифер Девальт, которая решила изучить программирование, создав 180 сайтов за 180 дней, я отважился испробовать сходную тактику: работать над побочными проектами каждый день.&lt;/p&gt;
&lt;p&gt;Я установил для себя несколько правил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Я обязан кодить каждый день. Я могу заниматься другими вещами — писать документацию или статьи в блог, но только в дополнение к работе над кодом.&lt;/li&gt;
&lt;li&gt;Это должен быть функциональный код. Возня с отступами, переформатирование, и, насколько это возможно, рефакторинг — не считаются. Я могу заниматься всем этим, но это не может быть основной частью дневной нормы.&lt;/li&gt;
&lt;li&gt;Считается только код, написанный до полуночи.&lt;/li&gt;
&lt;li&gt;Весь код должен быть открытым и публиковаться на Гитхабе.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Некоторые из этих правил кажутся надуманными. Технически, нет никакой нужды писать код исключительно до полуночи, но я хотел заставить себя не засиживаться допоздна, чтобы код не был грязным. Также не обязательно публиковать всё написанное на Гитхабе. Мне это правило было нужно, чтобы внимательней относиться к коду — как можно раньше задумываться о повторном использовании или модульности.&lt;/p&gt;
&lt;p&gt;Эта тактика оказалась очень эффективной, и сейчас приближается уже двадцатая неделя непрерывной работы. Я захотел написать об этом, так как это полностью изменило мой стиль работы и сильно повлияло на мою жизнь и душевное состояние.&lt;/p&gt;
&lt;p&gt;Эти изменения в рабочих привычках принесли множество интересных результатов:&lt;/p&gt;
&lt;p&gt;Минимальный рабочий код. Мне пришлось выделять для работы над кодом не меньше получаса в день. Очень трудно написать что-то осмысленное за меньшее время, особенно учитывая, что приходится вспоминать, на чём остановился вчера. Иногда мне удавалось поработать чуть больше (но обычно не больше часа), а по выходным бывало, что и весь день.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Программирование как привычка&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Думаю, что это самый важный итог моего эксперимента: главное, чтобы вы хотели что-то изменить для себя, а не произвести своей работой внешнее впечатление на кого-то другого. То же самое верно и для любой диеты или физических упражнений: вам никогда не добиться успеха, если вы делаете их не для себя самого.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Победа над тревогой&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;До начала своего эксперимента я часто чувствовал сильное беспокойство от того, что не успел сделать «достаточно» работы, или продвинуться «достаточно» далеко (хотя измерить эту «достаточность» я не мог, так как у побочных проектов не было конкретных дедлайнов). Я понял, что ощущуение прогресса в работе настолько же важно как и сам прогресс. У меня открылись глаза! Как только я начал стабильно продвигаться вперёд каждый день, вся моя тревога постепенно растаяла. Я был удовлетворён объёмом сделанной работы и больше не испытывал одержимости сделать как можно больше в один присест.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Выходные&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Работа по выходным раньше была ключевым способом добиться заметного прогресса в побочных проектах, так как это было единственное время, когда я успевал как следует продвинуться. Теперь выходные уже не так важны — и это очень хорошо. Планы и ожидания, копившиеся целую неделю, чаще всего приводили только к разочарованиям. Мне редко удавалось сделать всё, что я задумал, и это заставляло меня в следующие выходные отказаться от развлечений — сходить в кафе или в музей, погулять в парке или провести время с девушкой. Как бы ни были важны для вас побочные проекты, они не должны занимать всю жизнь.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Фоновая обработка&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Интересный побочный эффект от регулярной ежедневной работы над проектом заключается в том, что ваш разум начинает работать над ним и в фоновом режиме. Очень часто, когда я просто иду по улице, или принимаю душ, или занимаюсь чем-то ещё, что не требует умственных усилий, я думаю над тем, что мне предстоит сделать, и часто нахожу решение текущих проблем. Такого не было, когда я программировал лишь раз в неделю. В течение недели голова была занята другими задачами, или вообще беспокойством по поводу того, что я никак не успеваю поработать над побочным проектом.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Переключение контекста&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Каждый раз, возобновляя работу над побочным проектом, приходится тратить время на переключение контекста. К сожалению, после недельного перерыва это переключение идёт с большим трудом. Ежедневная работа в этом смысле гораздо эффективнее, так как перерывы гораздо меньше, и восстановить контекст можно гораздо быстрее.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Управление временем&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Один из самых важных для меня аспектов эксперимента — я научился лучше распределять время между работой, побочными проектами и остальной жизнью. Зная, что мне придётся сделать хоть немного ежедневно, я просто обязан был научиться лучше планировать свой день. Если у меня были другие планы на вечер, мне приходилось переносить работу над проектом на более раннее время, до начала основной работы. Если я не успел поработать, но задерживался где-то, мне приходилось вернуться домой пораньше, чтобы успеть закончить, вместо того, чтобы просто пропустить день. Признаюсь, у меня стало оставаться меньше времени на хобби (гравюры укиё-э и другое), но тут уж ничего не поделаешь, приходится выбирать.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Внешнее восприятие&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ещё один плюс появляется, когда твои близкие привыкают к твоим новым правилам. Моя девушка понимает, что я должен хоть немного поработать над проектами каждый день, и другие дела иногда приходится планировать с учётом этого. Очень приятно, когда ты можешь сказать «Да, мы можем пойти прогуляться (сходить в кино и т.п.) но после этого мне надо закончить работу» — и знать, что к этому отнесутся с пониманием.&lt;/p&gt;
&lt;p&gt;Сколько кода я написал? Мне с трудом верится в то, насколько много я успел написать за последние несколько месяцев. Я сделал пару сайтов, переписал несколько фреймворков и написал кучу новых модулей для Node. Я сделал настолько много, что иногда даже не помню всё, что я написал — то, что было всего несколько недель назад, кажется далёким прошлым. Я чрезвычайно удовлетворён объёмом проделанной работы.&lt;/p&gt;
&lt;p&gt;Я считаю, что мой эксперимент прошёл с огромным успехом и хочу придерживаться новых привычек настолько долго, насколько смогу. Я настоятельно рекомендую эту тактику всем, кто хочет как следует продвинуться в своих побочных проектах. Если попробуете, дайте мне знать, сработало это для вас или нет — мне очень интересно услышать как можно больше реальных историй.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©habrahabr&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>Как поддерживать мотивацию для занятий программированием?</title><link href="https://stonedastronaut.github.io/kak-podderzhivat-motivatsiiu-dlia-zaniatii-programmirovaniem.html" rel="alternate"></link><updated>2015-07-17T11:53:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-17:kak-podderzhivat-motivatsiiu-dlia-zaniatii-programmirovaniem.html</id><summary type="html">&lt;p&gt;Залог успеха в программировании - это регулярные занятия. Мы собрали самые полезные советы о том, как побороть прокрастинацию и мотивировать себя в обучении.&lt;/p&gt;
&lt;p&gt;Но, недостаток мотивации часто приводит к тому, что находятся более “важные” дела, а программированию уделяется всё меньше времени. Многие новички забрасывают занятия, так и не получив ощутимых результатов.&lt;/p&gt;
&lt;p&gt;Мы собрали самые полезные советы пользователей Quora, среди которых много практикующих программистов, о том, как побороть прокрастинацию и мотивировать себя в обучении:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;—Nathan Burchfield, IT Administrator and Developer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Окружите себя контентом, связанным с программированием. Подпишитесь на тематические блоги и Twitter.
Поделитесь своими идеями с близкими друзьями или семьей. Иногда, когда вы получаете положительные отзывы от других, это мотивирует настолько, что потом сложно оторваться от экрана компьютера.
Программируйте не отвлекаясь в течение 2-х минут. Скорее всего, произойдет эффект снежного кома и вы продолжите кодить.
Покажите свой код другим. Если вы знаете, что люди могут его видеть, то, как правило, будете держать его актуальным и чистым.
Я поставил на заставку рабочего стола такую картинку. Это первое, что я вижу, когда сажусь за компьютер, отлично помогает направить свою деятельность в нужное русло:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Juan Gallardo, Ruby programmer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Хитрость заключается в том, чтобы найти проекты, которые мотивируют. И не имеет никакого значения, что это будет. Кошачий блог, социальная сеть для мопсов и т.д. Просто найдите то, что вас увлекает или заставляет смеяться и работайте над этим. Например, я сделал Myspace для кошек.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Nikith Shetty&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Посмотрите какую-то научную фантастику или фильм про секретных агентов наподобие “Миссия невыполнима”, где видно, на что способны хакеры. Или “Социальную сеть” и вдохновитесь тем, как Марк Цукерберг за одну ночь укладывает сервера Гарварда.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—M.Santhosh Kumar&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;По моему опыту, новички начинают программировать по двум причинам:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;обучение&lt;/li&gt;
&lt;li&gt;развлечение&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;В первом варианте они часто сдаются из-за скуки и путаницы. Те же, кто начинает знакомство с программированием в качестве развлечения, чаще всего углубляются и начинают уделять ему всё больше времени. Они-то на самом деле начинают учиться.
Программирование проще всего изучать тогда, когда вы делаете это в последнюю очередь. Учитесь играючи.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Laveena Bachani, CS graduate&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Программирование, как видеоигра. Нужно несколько шагов, чтобы разобраться в правилах. Когда концепция понятна, то пробуешь выиграть, но это редко получается с первого раза. Это вызов. Это заставляет играть до победного конца. Медленно, но верно вы подбираетесь к секретной формуле успеха, разбираетесь в тактике и овладеваете ей в совершенстве.
То же самое с программированием. Нужно побеждать. Вы отлаживаете код, но он опять выдает ошибку, опять отлаживаете, опять ошибки. Но в определенный момент вы находите решение!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Abir Bhattacharyya, Software Engineer and Statistical Data Analyst&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Я бы всё время валялся на диване, ел мороженое, пиццу и леденцы. Почему я, всё таки, выбираю программирование? Потому что, занимаясь им, я могу заслужить любовь, заработать деньги, наслаждаться созданием крутых вещей, радоваться тому, что люди используют мои крутые вещи… и обеспечить своим кошкам счастливую жизнь.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Raghav Yadav&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Любопытство - это ключ.
Думаю, что будущее за программированием. Не могу представить мир без него. Я часто пишу код большую часть рабочего дня и потом программирую в свободное время для себя. Это моя мотивация. Один из примеров - я написал приложение для настройки субтитров во время просмотра фильма на тот случай, если они не соответствуют звуковому ряду. Похожие небольшие утилиты помогают решать надоедливые проблемы.
Программирование это прекрасно!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Puneet Khanduri, Platform Engineer at Twitter&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Программирование - это возможность воплотить идеи в реальность. Это самая сильная мотивация для большинства программистов.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Christopher Reiss&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Закройте социальные сети. Никаких “я только проверю сообщения”.
Тусуйтесь с теми, кто тоже кодит. Такое общение - это отличный способ оставаться “в теме”, будь это профессиональный юмор или обсуждение серьезных вопросов.
Помогает музыка. Что-нибудь атмосферное, чтобы не отвлекало, а, наоборот, настраивало на нужный лад.
Если совсем трудно сконцентрироваться, возможно, нужно посоветоваться с врачом на предмет синдрома дефицита внимания. Некоторым очень умным людям отлично помогли препараты, улучшающие концентрацию.
Спросите себя: программирование - это мое? Мне действительно это нравится? Если нужно каждый раз прилагать геркулесово усилие, чтобы заниматься им, то, возможно, это не ваше. Это нормально, большая ошибка насиловать себя, занимаясь тем, что не вызывает особого желания.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Raphael John&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Скажу только одно: “Мастерство начинается с небольших шагов”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Hridesh Kumar&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Цель стать хорошим программистом должна быть краткосрочной, нужно представлять более масштабную картину того, кем вы хотите видеть себя через 5 лет.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Jaime López, Programmer, Code Designer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Меня мотивирует создание собственных видеоигр в качестве развлечения.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Gene Sewell, Programmer, designer, wanderer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Мотивация растет тогда, когда вы видите результат своих стараний. Но если вы, на самом деле, не очень заинтересованны в программировании, то не получите отдачи от достигнутого. Важно выбрать такой род деятельности, где результат будет иметь для вас большую ценность.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Yu LongYing, c++ programmer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Попробуйте сделать какую-нибудь интересную штуку, которая привлечет внимание вашей девушки/парня. Помните, гордость - это ваша мотивация, а упорство - залог успеха.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Deepankur Singh&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Честно говоря, меня мотивирует большая зарплата, которая у программистов достаточно высока.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;—Douglas Walter, Full Stack Developer&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Когда я чувствую себя инертным, мне нравится переключаться и фокусироваться некоторое время на другом языке. Кроме того, ничто так не заводит, как работа над чем-то своим и тем, во что ты веришь.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;Резюмируя, можно сделать вывод, что все блестящие достижения в программировании - это результат кропотливой работы шаг за шагом. Возьмите курс на нечто большее, чем обучиться программированию, и день за днем, следуя этому курсу, мотивируйте себя делать небольшие шаги. Вам будет гораздо проще, если слово "работа" заменить на "развлечение". Сложно назвать работой или учебой то, что всецело захватывает, как любимая игра. Линус Торвальдс, создатель Linux, утверждает: “большинство хороших программистов делают свою работу не потому, что ожидают оплаты или признания, а потому что получают удовольствие от программирования”. Научитесь получать удовольствие - это лучшая мотивация.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;©geekbrains&lt;/em&gt;&lt;/p&gt;</summary><category term="geektimes"></category></entry><entry><title>Ремесло программиста. Золотые правила</title><link href="https://stonedastronaut.github.io/remeslo-programmista-zolotye-pravila.html" rel="alternate"></link><updated>2015-07-16T18:48:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-16:remeslo-programmista-zolotye-pravila.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Данный пост представляет собой выдержку «золотых правил» из примечательной книги Питера Гудлифа &lt;em&gt;«Ремесло программиста»&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Глава 1.&lt;/strong&gt; &lt;em&gt;Держим оборону&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Не делайте никаких допущений. Не зафиксированные формально допущения часто служат причиной отказов, особенно с ростом объема кода.
Чем больше спешки, тем меньше скорость. Всегда думайте, что вы собираетесь ввести с клавиатуры.
Не верьте никому. Кто угодно, включая вас самих, может сделать ошибки в логике вашей программы. Ко всем входным и выходным данным относитесь с подозрением, пока не проверите, что они допустимы.
Предупреждения компилятора помогают выявить массу глупых ошибок. Всегда включайте их вывод. Держитесь того, чтобы ваш код компилировался молча.
Берегите все ограниченные ресурсы. Тщательно организуйте их захват и освобождение.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 2.&lt;/strong&gt; &lt;em&gt;Тонкий расчет&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Поймите, кто реально станет читать ваш исходный код: другие программисты. Пишите с расчетом на них.
Выясните, какие стандарты кода есть для выбранного вами языка, и освойте каждый из них на практике. Оцените преимущества и недостатки каждого.
Выберите какой-то один правильный стиль кодирования и придерживайтесь его постоянно.
Если в вашей группе принят некий стандарт кодирования, придерживайтесь его. Свой собственный излюбленный стиль оставьте в стороне.
Скажи «нет» религиозным войнам. Не вступай в них. Отойди в сторону.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 3.&lt;/strong&gt; &lt;em&gt;Что в имени тебе моем?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Учитесь давать объектам прозрачные имена — они должны ясно описывать то, что за ними скрывается.
Чтобы придумать хорошее имя, главное — четко понимать, для кого оно предназначено. Только в этом случае имя может стать осмысленным. Если не удается придумать хорошее имя объекту, спросите себя, понятно ли его назначение.
Изучите правила образования имен в языке, с которым работаете. Еще важнее изучить идиомы этого языка. Есть стандартные способы формирования имен? Вот ими и пользуйтесь.
Ясность имени предпочтительнее его краткости.
Следует учитывать относительные достоинства коротких и длинных имен, особенно в зависимости от области действия переменной.
Предпочтительней такое правило именования, которое различает имена переменных и имена типов.
Давайте функциям имена с внешней точки зрения, в виде фраз, выражающих действия. Описывайте логическую операцию, а не способ реализации.
Избегайте в именах лишних слов. В частности, в именах типов — таких слов, как class, data, object и type.
Давайте пространствам имен и пакетам имена, логически связанные с содержимым.
Макросы в С/С++ всегда выделяют прописными буквами, чтобы сделать хорошо заметными, и тщательно выбирают их имена, чтобы избежать конфликтов. Никогда не выделяйте прописными буквами другие объекты.
Выберите единообразную системы именования и последовательно применяйте ее.
Степень необходимой детализации имени зависит от контекста его применения. Создавая имена, учитывайте контекстную информацию.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 4.&lt;/strong&gt; &lt;em&gt;Литературоведение&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Не пишите код, который нуждается во внешней документации. Он ненадежен. Пишите такой код, который понятен без посторонней документации.
Пишите код, который может прочесть нормальный человек, причем без напряжения. Компилятор как-нибудь справится.
Избегайте волшебных чисел. Пользуйтесь именованными константами.
Важный участки кода должны выделяться на общем фоне и быть легко читаемыми. Спрячьте все, что не должно интересовать клиентов.
Старайтесь группировать родственную информацию. Делайте эту группировку наглядной с помощью средств языка.
Не выводите бессмысленных сообщений об ошибках. В зависимости от контекста представьте наиболее уместную информацию.
Помещайте в код комментарии только в том случае, если не удается облегчить его понимание иными способами.
Пользуйтесь инструментариями грамотного документирования для автоматической генерации документации по вашему коду.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 5.&lt;/strong&gt; &lt;em&gt;Заметки на полях&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Учитесь писать ровно столько комментариев, сколько необходимо. Отдайте предпочтение качеству, а не количеству.
Не пожалейте труда, чтобы ваш код не требовал поддержки в виде уймы комментариев.
Хорошие комментарии объясняют «почему», а не «как».
Один источник для каждого факта. Не копируйте код в комментариях.
Обнаружив, что вы пишете многословные комментарии, описывающие ваш код, остановитесь и задумайтесь. Не признак ли это того, что существует некая проблема более высокого порядка?
Думайте, что пишете в комментариях; не давите бездумно на клавиши. Прочтите комментарий снова в контексте кода. Ту ли информацию он содержит?
Комментарии — часть повествования кода. Размещайте их так, чтобы порядок чтения был естественным.
Снабжайте каждый файл исходного кода прологом в виде комментария.
Комментарии должны касаться настоящего, а не прошлого. Не описывайте того, что претерпело изменения, и не рассказывайте о том, что было раньше.
Если вы изменили код, проверьте правильность комментариев, находящихся рядом с ним.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 6.&lt;/strong&gt; &lt;em&gt;Людям свойственно ошибаться&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Обработка ошибок — дело серьезное. От нее зависит стабильность вашего кода.
Не оставляйте сбойную ситуацию без внимания. Если вы не знаете, как справиться с проблемой, сигнализируйте об отказе вызвавшему коду. Не заметайте мусор под ковер в надежде, что все как-нибудь обойдется.
Никогда не пренебрегайте поступающими вам сообщениями об ошибках. Если существует канал для сообщений об ошибках, значит, для этого есть причины.
Обрабатывайте все ошибки в наиболее благоприятном контексте, когда становится ясно, как корректно с ней справиться.
Игнорирование ошибок не экономит вашего времени. Вы потратите больше времени на выяснение причин некорректного поведения программы, чем вам понадобилось бы для написания обработчика ошибок.
Если вы пишете код, который может отказать, одновременно с ним пишите код для обнаружения и обработки ошибок. Не откладывайте это на будущее. Если вы все же вынуждены отложить обработку, по крайней мере, напишите оснастку для обнаружения ошибок.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 7.&lt;/strong&gt; &lt;em&gt;Инструментарий программиста&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Изучите свои стандартные инструменты вдоль и поперек. Время, которое вы потратите на их изучение, незамедлительно окупится.
Относитесь к инструментам программирования прагматически; пользуйтесь ими, только если они облегчают вашу жизнь.
Узнайте, какие виды инструментов существуют. Выясните, где их можно взять, даже если в данный момент они вам не нужны.
Для каждой задачи есть свой инструмент. Не стоит щелкать орехи кувалдой.
Следите за выпуском новейших версий своего инструмента, но проявляйте осторожность при обновлении.
Выбор редактора кода имеет решающее значение; он оказывает огромное влияние на то, как вы будете писать код.
Выучите несколько языков. В каждом вы обнаружите особый способ решения задач. Рассматривайте их как набор инструментов и выбирайте тот, который наиболее эффективен в конкретной ситуации.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 8.&lt;/strong&gt; &lt;em&gt;Время испытаний&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Тестирование может вскрыть только наличие ошибок. Оно не может доказать отсутствие неисправностей. Не поддавайтесь ложному чувству спокойствия, если код прошел ряд неадекватных тестов.
Тестируйте каждый написанный вами фрагмент кода. Не рассчитывайте, что кто-то другой сделает это за вас.
Чтобы сделать тестирование эффективным, его нужно начинать заранее, когда выявляемые ошибки еще не могут принести большого вреда. Тестовый код можно писать раньше, чем рабочий!
Пишите тесты для всех выявленных ошибок.
Прогоняйте свои тесты как можно чаще.
Читая код, очень легко обмануться и поверить, что он работает правильно. Если вы написали код, то при его чтении вы будете видеть то, чтособирались написать, а не то, что написали на самом деле. Учитесь читать код с циничным недоверием.
Напишите полный набор тестов, каждый из которых будет проверять определенный аспект кода. Пятнадцать тестов, которые демонстрируют одну и ту же ошибку, менее полезны, чем 15 тестов, демонстрирующих 15 разных ошибок.
Архитектура кода должна облегчать его тестирование.
Насколько это возможно, автоматизируйте тестирование кода. Это быстрее и проще, чем выполнять тесты вручную, и гораздо надежнее: более вероятно, что тесты станут выполняться регулярно.
Выполняйте тестирование автоматически в ходе процедуры сборки.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 9.&lt;/strong&gt; &lt;em&gt;Поиск ошибок&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Компилируйте код при включенном выводе компилятором всех предупредительных сообщений. Тем самым вы обнаружите потенциальные проблемы раньше, чем столкнетесь с ними реально.
Следуйте золотому правилу отладки: думать головой.
Установите разумное временное ограничение на «бессистемную» отладку, и если она окажется безуспешной, переходите на более методичный способ.
Изучите отлаживаемый код — трудно найти ошибки в коде, который вам непонятен.
Когда вы ищете ошибку, неверьте никому. Проверьте самые невероятные причины, вместо того чтобы сходу отвергнуть их. Не принимайте ничего на веру.
Если сборка продукта не прошла, смотрите на первую ошибку компилятора. Последующие сообщения заслуживают гораздо меньше доверия.
Отладка — это методичная работа, медленно сужающая кольцо вокруг места нахождения ошибки. Не следует относиться к ней как к игре в укадайку.
Первый шаг на пути установления места ошибки — это определение способа ее уверенного воспроизведения.
Начните с известного места, например, с точки аварийного завершения программы. Затем двигайтесь в обратном направлении в сторону причины, вызвавшей сбой.
Если вам показалось, что вы нашли причину ошибки, досконально исследуйте ее и убедитесь, что не ошиблись. Не принимайте безрассудно первую же гипотезу.
Отладка заканчивается лишь тогда, когда вы докажете, что ошибка устранена и проблема решена навсегда.
Проявляйте крайнюю осторожность при исправлении ошибок. Следите, чтобы ваша модификация не покалечила ничего остального.
Исправляя ошибку, проверьте, не повторяется ли она в близких разделах кода. Уничтожьте ошибку раз и навсегда: исправьте все ее дубликаты немедленно.
Из каждой исправленной ошибки делайте выводы. Можно ли было ее избежать? Можно ли было обнаружить ее быстрее?
Столкнувшись с поведением, которое вы не можете объяснить, умеренно пользуйтесь отладчиками. Не привыкайте к тому, чтобы сразу бросаться на них, не попытавшись сначала понять, как работает ваш код.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Глава 10.&lt;/strong&gt; &lt;em&gt;Код, который построил Джек&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Считайте систему сборки частью дерева исходного кода и ведите их совместно. Они тесно связаны между собой.
Все программисты, участвующие в проекте, должны пользоваться единой системой сборки. Иначе все они будут собираться разные программные пакеты.
Правильная система сборки позволяет многократно создавать физически идентичные бинарные файлы.
Вы должны быть в состоянии достать дерево исходные кодов трехлетней давности и правильно собрать его заново.
Правильная система выглядит как одна операция. Достаточно нажать кнопку или выполнить одну команду.
Для каждого правила сборки напишите соответствующее правило чистки, которое отменяет всю операцию.
Организуйте автоматическую процедуру сборки своего программного продукта. Проверяйте с ее помощью работоспособность вашего кода.
Финальные сборки всегда выполняются из чистого исходного кода. Позаботьтесь, чтобы потом всегда можно было получить этот чистый исходный код из архива или системы управления версиями.
Проводите тестирование финальной конфигурации своего приложения, а не только рабочих сборок.Небольшие различия между ними могут отрицательно сказаться на поведении кода.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;© habrahabr&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Продолжения: &lt;a href="http://habrahabr.ru/post/142262/"&gt;здесь&lt;/a&gt;&lt;/p&gt;</summary><category term="habr"></category></entry><entry><title>52 вопроса, которые вы должны задать на собеседовании</title><link href="https://stonedastronaut.github.io/52-voprosa-kotorye-vy-dolzhny-zadat-na-sobesedovanii.html" rel="alternate"></link><updated>2015-07-16T16:30:00+06:00</updated><author><name>Stoned Astronaut</name></author><id>tag:stonedastronaut.github.io,2015-07-16:52-voprosa-kotorye-vy-dolzhny-zadat-na-sobesedovanii.html</id><summary type="html">&lt;p&gt;Вы, наверное, уже знаете, что интервью — это не просто очередной этап при устройстве на работу, это также ваша возможность разобраться, подходит ли вам эта работа. Для этого важно задать некоторые вопросы. Что вы хотите знать об этой должности? О компании? О подразделении? О команде? О корпоративной культуре?&lt;/p&gt;
&lt;p&gt;Задавать вопросы бывает сложно. Мы это знаем. Для того, чтобы упростить вам это задание, мы приводим список ключевых вопросов для интервью. Мы определённо не рекомендуем задавать их все. Пожалейте рекрутера!&lt;/p&gt;
&lt;p&gt;Когда в конце интервью или его части вас спрашивают: «Итак, есть ли у вас к нам вопросы?», то обязательно воспользуйтесь данным списком (попробуйте восстановить в памяти), чтобы убедиться, что вы охватили все интересующие вас моменты и показали ваш профессионализм.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Работа в целом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Сначала убедитесь, что это именно то, чем вы хотите заниматься изо дня в день в обозримом будущем.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как выглядит типичный рабочий день?&lt;/li&gt;
&lt;li&gt;Что из себя представляют проекты, которыми необходимо будет заняться в первую очередь?&lt;/li&gt;
&lt;li&gt;Можете ли показать мне примеры проектов, над которыми я буду работать?&lt;/li&gt;
&lt;li&gt;Какие навыки и какой опыт вы ищете в идеальном кандидате?&lt;/li&gt;
&lt;li&gt;Что необходимо для того, чтобы стать действительно успешным на этой должности?&lt;/li&gt;
&lt;li&gt;Какие виды навыков отсутствуют в команде, которые вы хотите получить, наняв нового сотрудника?&lt;/li&gt;
&lt;li&gt;Какие самые большие проблемы, с которыми предстоит столкнуться человеку на этой позиции?&lt;/li&gt;
&lt;li&gt;Каков уровень бюджета, с которым мне предстоит работать?&lt;/li&gt;
&lt;li&gt;Это новая роль в компании?&lt;/li&gt;
&lt;li&gt;Предполагаете ли Вы, что основной круг обязанностей для этой должности изменится в ближайшие полгода-год?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Обучение и профессиональное развитие&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Думайте о каждой новой работе не просто как о работе, а как о следующем шаге на пути к карьерному (или какому-либо иному) успеху. Как эта должность поможет вам его добиться?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как я буду обучаться?&lt;/li&gt;
&lt;li&gt;Какие учебные программы доступны для ваших сотрудников?&lt;/li&gt;
&lt;li&gt;Какие существуют возможности карьерного роста и профессионального развития?&lt;/li&gt;
&lt;li&gt;Смогу ли я представлять компанию на отраслевых конференциях?&lt;/li&gt;
&lt;li&gt;Куда перешёл предыдущий работник, ранее занимавший эту должность?&lt;/li&gt;
&lt;li&gt;Как продвигались успешные сотрудники, ранее занимавшие эту должность?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Оценка вашего труда&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Убедитесь, что вы понимаете, какие цели перед вами будут поставлены и то, как ваша работа будет оцениваться.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Какие наиболее важные вещи, по вашему мнению, я должен буду сделать за первые 30, 60 и 90 дней работы?&lt;/li&gt;
&lt;li&gt;Какие результаты от человека на данной позиции ожидаются в течение первых 12 месяцев?&lt;/li&gt;
&lt;li&gt;Расскажите про систему оценки эффективности деятельности сотрудников в компании. Как часто данный процесс происходит?&lt;/li&gt;
&lt;li&gt;По каким показателям моя деятельность будет оцениваться?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Интервьюер&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Задавая вопросы интервьюеру вы показываете, что заинтересовались им как человеком, а это отличный способ наладить контакт. Только давайте без комплиментов и лести.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Как давно вы работаете в этой компании?&lt;/li&gt;
&lt;li&gt;Как ваша роль изменилась с тех пор?&lt;/li&gt;
&lt;li&gt;Чем вы занимались до этой работы?&lt;/li&gt;
&lt;li&gt;Почему вы устроились в эту компанию?&lt;/li&gt;
&lt;li&gt;Что вам больше всего нравится в работе здесь?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Компания в целом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Вы не просто работаете на вашего босса или на ваш отдел, вы работаете “на” и “с” всей компанией в целом.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Я читал о том, как была основана компания, но был бы благодарен, если бы вы смогли рассказать мне больше?&lt;/li&gt;
&lt;li&gt;Какой вы видите эту компанию в ближайшие несколько лет?&lt;/li&gt;
&lt;li&gt;Что вы можете рассказать мне о вашей новой продукции и/или планах роста?&lt;/li&gt;
&lt;li&gt;Каковы главные цели компании в настоящий момент и как она работает над их достижением?&lt;/li&gt;
&lt;li&gt;Что вас больше всего воодушевляет в будущем компании?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Команда&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Люди, с которыми вам предстоит работать изо дня в день, могут действительно влиять на вашу работу, на желание вставать по утрам и даже на вашу эффективность. Задайте несколько вопросов, чтобы определить, насколько это подходящая для вас команда.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Можете ли вы рассказать мне о команде, в которой я буду работать?&lt;/li&gt;
&lt;li&gt;С кем я буду работать наиболее тесно?&lt;/li&gt;
&lt;li&gt;Кому я буду непосредственно подчиняться?&lt;/li&gt;
&lt;li&gt;Можете ли вы рассказать мне о моих прямых подчинённых? Каковы их сильные и слабые стороны?&lt;/li&gt;
&lt;li&gt;Планируете ли вы нанимать ещё людей в это подразделение в ближайшие шесть месяцев?&lt;/li&gt;
&lt;li&gt;С какими подразделениями компании придется взаимодействовать чаще всего?&lt;/li&gt;
&lt;li&gt;Какие общие карьерные перспективы в этом подразделении?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Культура&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Соблюдается в офисе дресс-код или нет? Есть ли жизнь вне офиса? и т.д. Узнайте тонкие, но такие важные детали корпоративной культуры.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Какова культура компании в целом и команды в частности? Какие главные аспекты вы могли бы выделить?&lt;/li&gt;
&lt;li&gt;Как бы вы описали рабочую среду здесь, это, как правило, работа в команде или по одиночке?&lt;/li&gt;
&lt;li&gt;Можете ли вы рассказать мне о последнем совместном командном мероприятии?&lt;/li&gt;
&lt;li&gt;Какие у компании миссия и ценности? (Примечание: убедитесь, что данную информацию невозможно “загуглить” — в таком случае не задавайте этот вопрос).&lt;/li&gt;
&lt;li&gt;Какая ваша любимая офисная традиция?&lt;/li&gt;
&lt;li&gt;Что вы обычно делаете во время обеденного перерыва? (Конечно, помимо самого обеда).&lt;/li&gt;
&lt;li&gt;Собираются ли сотрудники компании/команды вне офиса?&lt;/li&gt;
&lt;li&gt;Вы когда-нибудь организовывали совместные мероприятия с другими компаниями или отделами?&lt;/li&gt;
&lt;li&gt;Что отличает работу здесь от других мест, где вы работали?&lt;/li&gt;
&lt;li&gt;Как изменилась компания с момента вашего прихода?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Следующие шаги&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Перед уходом убедитесь, что интервьюер получил всю необходимую ему информацию. Для того, чтобы выяснить, как будут развиваться события дальше, задайте эти вопросы.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Насколько, по вашему мнению, моя квалификация соответствует данной роли?&lt;/li&gt;
&lt;li&gt;Каковы следующие шаги по процессу рассмотрения на данную позицию?&lt;/li&gt;
&lt;li&gt;Что ещё с моей стороны может понадобиться?&lt;/li&gt;
&lt;li&gt;Могу ли я ответить на какие-либо ещё интересующие вас вопросы?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;©megamozg&lt;/em&gt;&lt;/p&gt;</summary><category term="habr"></category><category term="interview"></category></entry></feed>