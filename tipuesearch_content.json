{"pages":[{"text":"Привет. Этот блог сделан на Pelican . Здесь буду размещать всякие материалы о IT. Пример кода: @app.route ( '/' ) def index (): return render_template ( 'index.html' , posts = blog . posts )","url":"https://stonedastronaut.github.io/pages/o-saite.html","title":"О сайте","tags":"pages"},{"text":"/bin/bash -c \"`xdg-settings get default-web-broswer | sed 's/.desktop//g'`\"","url":"https://stonedastronaut.github.io/hotkey-dlia-brouzera-v-kde.html","title":"Hotkey для броузера в Kde","tags":"misc"},{"text":"Никакой волшебно новой информации здесь не будет, скорее это самому себе объяснение, что за зверь такой декораторы в python. Т.к. в pyhton ф-ии являются объектами, то к ним можно применить шаблон проектирования декоратор . Сам шаблон я на момент написания этих строк не разбирал, посему тут может быть не совсем корректная информация о том насколько правильно реализуется данный шаблон в случае ф-ий языка python. Итак. Декоратор - это возможность расширения ф-нала имеющейся ф-ии(объекта). Получается что-то типа наследования, но без создания новой сущности. Для реализации декораторов необходимо написать сам декоратор, это ф-ия которая принимает в качестве параметра другую ф-ю(именно её адрес, а не её вызов) и оборачивает её како-либо логикой. Например: def decorator ( some_func ): def wrapper (): # делаем что-то перед вызовом оборачиваемой ф-ии print ( \"before\" ) # вызываем оборачиваемую ф-ю some_func () # делаем что-то после вызова обернутой ф-ии print ( \"after\" ) return wrapper def just_func (): print ( \"Я не изменюсь, но меня можно обернуть\" ) теперь обернем just_func decorator ( just_func )() # before # Я не изменюсь, но меня можно обернуть # after Можно подобному вызову ф-ии присовить имя: just_func_wrapped = decorator ( just_func ) И при вызове just_func_wrapped получим тоже самое: just_func_wrapped () # before # Я не изменюсь, но меня можно обернуть # after Мы почти добрались до сути. Собственно как это можно было записать при помощи синтаксиса декораторов: @decorator def just_func (): print ( \"Я обернутая ф-я\" ) И вызвав just_func получим: just_func () # before # Я обернутая ф-я # after Т.е. синтаксис декоторов это синтаксический сахар заменяющий такую конструкцию: def just_func (): pass just_func = decorator ( just_func ) # равносильно такой записи @decorator def just_func (): pass Передача аргументов внутрь обертки Также можно, а точнее это и нужно, передавать агрументы внутрь ф-ии декоратора, оборачиваемой ф-ии. def decorator ( just_func ): def wrapper ( arg1 , arg2 ): print ( \"before\" ) print ( \"Я получил внутрь аргументы \" + arg1 + \" \" + arg2 ) # вызываем ф-ию с аргументами just_func ( arg1 , arg2 ) print ( \"after\" ) return wrapper @decorator def just_func ( str1 , str2 ): print ( str1 + \" \" + str2 ) just_func ( \"Привет\" , \"Мир\" ) # before # Я получил внутрь аргументы Привет Мир # Привет Мир # after Декор методов в классах Всё то же самое за исключением, что метод отличается от ф-ии тем, что первым аргументом метода, всегда является ссылка на свой класс. def decorator ( class_method ): def wrapper ( self , some ): print ( \"Это обёртка для метода класса\" ) print ( 1000 + some ) return class_method ( self , some ) return wrapper class MyClass ( object ): def __init__ ( self ): self . var = 2 @decorator def my_method ( self , some ): print ( self . var + some ) m = MyClass () m . my_method ( 1 ) # 1003 # Хотя по-идее мы могли бы ожидать 1 + 2, но благодаря обертке мы смогли # изменить функционал Передача *args и **kwargs декорируемой ф-ии Ничего волшебного: def decorator ( just_func ): def wrapper ( * args , ** kwargs ): return just_func ( * args , ** kwargs ) return wrapper @decorator def just_func ( * args , ** kwargs ): print ( args ) print ( kwargs ) just_func () # () # {} Передача аргументов декоратору Логично возникает вопрос: \"А как же передать аргументы в декоратор, если декоратор по определению должен принимать на вход только имя декорируемой ф-ии?\". Решение есть, но не лёгкое. Задекорируем декоратор (crazy). # ф-ия создающая декоратор def decorator_for_decorator (): # ф-я декоратор (т.е. изменяющая ф-ал оборачиваемой ф-ии) def decorator ( func ): # ф-ия обертка def wrapper (): # some logic func () return wrapper return decorator new_decorator = decorator_for_decorator () # создаем декоратор и присваиваем его переменной def just_func (): print ( \"Я просто ф-я\" ) # задекорируем ф-ю just_func = new_decorator ( just_func ) # и теперь можем вызвать задекорированную ф-ю just_func () Или можно записать так: def just_func (): print ( \"я декорируемая ф-я\" ) just_func = decorator ()( just_func ) # и вызов задекорированной ф-ии just_func () А теперь то же самое, но только при помощи @ : @decorator_for_decorator () def just_func (): print ( \"я декорируемая ф-я\" ) just_func () Т.к. декоратор теперь есть вызов ф-ии, то можем передать ему некие аргументы: def deco_for_deco ( deco_arg1 , deco_arg2 ): print ( deco_arg1 + deco_arg2 ) def decorator ( just_func ): def wrapper ( func_arg1 , func_arg2 ): # данная обертка теперь имеет доступ как к аргументам # декоратора, так и к аргументам декорируемой ф-ии return just_func ( func_arg1 , func_arg2 ) return wrapper return decorator @deco_for_deco ( \"Привет\" , \"Мир\" ) def just_func ( arg1 , arg2 ): print ( \"Меня задекорировали, и знаю только\" + \\ \"о своих аргументах %s и %s \" % ( arg1 , arg2 )) # выведет: \"ПриветМир\" just_func ( \"один\" , \"два\" ) # выведет: Меня задекорировали, и знаю только о своих аргументах один и два Зная всё что здесь написано можно сделать декоратор для декораторов которому можно передавать любые аргументы: def deco_for_deco ( decorataion_decorator ): def decorator_maker ( * args , ** kwargs ): def decorator_wrapper ( func ): return decoration_decorator ( func , * args , ** kwargs ) return decorator_wrapper return decorator_maker Теперь посмотрим как воспользоваться этой адовой смесью: @deco_for_deco def decorated_decorator ( func , * args , ** kwargs ): def wrapper ( func_arg1 , func_arg2 ): print ( \"Я знаю о %s и %s \" % ( args , kwargs )) return func ( func_arg1 , func_arg2 ) return wrapper Теперь декорируем нужные нам ф-ии передавая любые аргументы декоратору: @decorated_decorator ( 42 , 404 , 1024 ) def just_func ( arg1 , arg2 ): print ( \"Привет\" + arg1 + arg2 ) just_func ( \" Жвачка и \" , \"Мир\" ) # выведет: # Я знаю о (42, 404, 1024) и {} # Привет Жвачка и Мир Подводя итоги В общем этот длиннопост переработанный изхабра, создавался когда я врубался в подсмотренный код в django, где в 4 строках скрыто целая тьма смысла и материала для изучения. Там создавался класс mixin в котором декорировался некий метод который обезапасивал доступ к сайту. Ацкая смесь без развернутых пояснений на англ. языке. Ну вот собственно с декораторами вроде разобрался. Где еще применяется декорирование? Декораторы могут быть использованы для расширения возможностей функций из сторонних библиотек (код которых мы не можем изменять), или для упрощения отладки (мы не хотим изменять код, который ещё не устоялся). Так же полезно использовать декораторы для расширения различных функций одним и тем же кодом, без повторного его переписывания каждый раз, например: def benchmark ( func ): \"\"\" Декоратор, выводящий время, которое заняло выполнение декорируемой функции. \"\"\" import time def wrapper ( * args , ** kwargs ): t = time . clock () res = func ( * args , ** kwargs ) print func . __name__ , time . clock () - t return res return wrapper def logging ( func ): \"\"\" Декоратор, логирующий работу кода. (хорошо, он просто выводит вызовы, но тут могло быть и логирование!) \"\"\" def wrapper ( * args , ** kwargs ): res = func ( * args , ** kwargs ) print func . __name__ , args , kwargs return res return wrapper def counter ( func ): \"\"\" Декоратор, считающий и выводящий количество вызовов декорируемой функции. \"\"\" def wrapper ( * args , ** kwargs ): wrapper . count += 1 res = func ( * args , ** kwargs ) print \"{0} была вызвана: {1}x\" . format ( func . __name__ , wrapper . count ) return res wrapper . count = 0 return wrapper @benchmark @logging @counter def reverse_string ( string ): return str ( reversed ( string )) print reverse_string ( \"А роза упала на лапу Азора\" ) print reverse_string ( \"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!\" ) # выведет: # reverse_string ('А роза упала на лапу Азора',) {} # wrapper 0.0 # reverse_string была вызвана: 1x # арозА упал ан алапу азор А # reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {} # wrapper 0.0 # reverse_string была вызвана: 2x # !amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A Скопипащенно © отсюда","url":"https://stonedastronaut.github.io/dekoratory-v-python.html","title":"Декораторы в Python","tags":"misc"},{"text":"Моя история может быть полезна всем, кто уже начинает зарабатывать на своем веб-сайте или только хочет попробовать. Меня зовут Александр. Я родился в Казахстане в 1992 году. В 12 лет я потерял отца и переехал в Приднестровье, а затем и в Румынию, когда мне было 16 лет. В данный момент заканчиваю в Румынии университет. В будущем планирую двинуть в Лондон и окончить магистратуру по e-commerce. Семейная трагедия придала огромный импульс в том, чтобы учиться делать деньги разными способами, от купли и продажи металлолома в поселке городского типа до заработка на веб-сайте в интернете. В данной публикации я затрону 3 самые важные темы, которые отражают мой опыт: I. Веб-сайт: — Деньги на создание сайта; — Какую платформу и хостинг выбрал для веб-сайта; — С какими проблемами сталкивался. II. Продвижение через Фэйсбук и подписчиков: — Как за полтора года я сделал 250 тыс. подписчиков, которые приносили мне большой (для румынского медиа) трафик; — Стратегии использования Фэйсбук-страниц как источника дохода для веб-сайта. III. Монетизация через Google Adsense: — Как начать; — Пару лайфхаков, как поднять количество кликов по рекламе; — Как не переборщить. Предупреждаю, излагать буду в хронологическом порядке, вы поймете связь, а важные советы буду помечать вот так: *** Как все начиналось В 2011 году (я тогда заканчивал среднюю школу) сделал фан-страницу на Facebook {Nu ai sa crezi}, где постил разную интересную информацию с книг и рунета (в переводе на румынский язык), а так же большое количество фотографий по теме (вы можете увидеть их по этой ссылке). Получал много замечаний. Ну, что там замечания… меня покрывали 10-ти этажным матом за орфографические и лексические ошибки, так как тогда не очень хорошо румынским языком. Тем самым пользователи своими высказываниями помогали мне изучать еще лучше румынский язык. Помню, за месяц я набрал 10 тысяч пользователей на фан-странице, а дальше процесс сам запустился… Люди «комментили» и «лайкали» мои посты, тем самым увеличивая охват и популярность страницы. Внимание, ответ на вопрос, как я сделал первые 10 тыс лайков: *** У моих знакомых на «Фэйсбуке» большое количество людей в друзьях. У кого 500 друзей, у кого 3 тысячи, у кого по 100-200; я не выпускал никого из виду. На каждой вечеринке, а их было много, перед тем, как перейти к вину или пиву, я вежливо (при необходимости добавляя долю ироничной жалости или грубости) просил сделать друзей администраторами страницы, это позволяло мне приглашать всех их друзей ставить лайки, отмечая мою страницу как понравившуюся. Данный способ и сейчас эффективен, к вашему счастью «Фэйсбук» сделал эту опцию видимой для всех пользователей страницы (те, кто «лайкнул» ее), и нет никакой необходимости назначать вашего друга админом, чтобы отправить приглашение. Расширяйте как можно больше свою армию друзей и знакомых и помогайте друг другу. Как я создавал веб-сайт Далее передо мной возник вопрос, как сделать сайт и монетизировать его… Нужны были деньги для хостинга и веб-сайта. В тот период я начал торговать недорогой фэшн-бижутерией на центральной улице возле антикварной лавки, рядом с мной стояли хэнд-мэйд умельцы, которые продавали свои собственные изделия, и все мы вместе платили арендую плату за место. Но почему-то умельцы смотрели косо в мою сторону, так как девушки-студентки наседали на мою бижутерию (которую я покупал килограммами и продавал поштучно ) как пчелы на мед. Никогда не любил зависть. Так за сезон я сделал достаточную сумму денег, чтобы оплатить первый год в университете, купить ноутбук, а остальное инвестировать в создание веб-сайта и его продвижение. Первое, что я сделал, это зарегистрировал доменное имя и купил простой хостинг у американцев, который обошелся мне в триста с лишним долларов в год. Здесь я совершил ошибку, купив всяких тупых функций, которые вообще НЕ НУЖНЫ, так как в этом ничего не понимал тогда. Хватило мне его на 3 месяца, дальше возник вопрос, что делать, чтобы сервер не падал от большого количества трафика. Если на сайт заходило 100 чел, он падал. Значит, отказался я от их услуг и по совету службы поддержки купил VPS-cервер в Канаде — уже за 450 долларов в год, но который держал 1 000-3 000 пользователей на сайте одновременно. Для сайта я использовал Wordpress — cамую популярную платформу среди блогеров и даже серьезных новостных сайтов. . Потом я купил тему Wordpress и установил ее… И снова ошибка! Ошибка состояла в том, что я не обращал внимания на корректность кода или оптимизацию, так как не разбирался в этом. Так что перед покупкой советуйтесь с программистами или с теми, кто в курсе. Когда сайт был готов, страница на Фэйсбуке уже имела 30 тыс лайкнувших ее пользователей. Были времена, когда мои посты на сайте доходили до 100 тыс, что приносило мне большое количество трафика. Вывод: не жалуйтесь, что у вас нет лишних денег на создание профессионального блога, зарабатывайте любыми способами (желательно, легальными). Один в поле не воин, или как я создал мини-редакцию Я не справляся с переводами и всем остальным. Пришлось брать талантливых знакомых в команду, 2 переводчика и редактор, плюс отдельно работал программист. Тогда мы переводили все самые крутые статьи с Рунета и адаптировали их под румынскую публику. На сайт приходило много трафика, во всяком случае, для румынского медиа. Руководить всем этим процессом… одно это уже вам понравится! Да и работать с командой — это большой дар. Cайт стал популярным, так как большинство медиа писали полную ерунду. А я, можно сказать, изменил румынское медиа, благодаря своей двуязычной мультикультуре, и большинство блогеров начали копировать или использовать «наш» стиль контента. Со временем я понял, что людям нравится больше всего, и какой тип статей вызывает у них эмоции, которыми они готовы делиться, принося, таким образом, все больше и больше трафика. Я работал на трафик и качество. Как я продвигал сайт через Facebook, или Facebook — золотой ресурс трафика для сайта Очень важно найти другие страницы на Facebook и совершать взаимообмен. Так, я сотрудничал с 4 страницами на «Фейсбуке». Мы каждый раз обменивались материалами, фотографиями, тем самым обоюдно обеспечивая рост страниц + трафик на сайт (бесплатно). Платите за рекламу и продвижение в том случае, если доходы от нее хотя бы покрывают ваши расходы. Общайтесь со своими поклонниками как с друзьями, не называйте их фанами. Стройте добрые отношения с каждым, кто дал лайк, делитесь с ними своим опытом. Знаю, это тяжело и убивает много времени. Но результаты стоят того. Нужно создать армию, которая будет следовать за вами, и которая будет приносить победы в разных формах: больше трафика, больше прибыли и т.д. Это я осознал очень поздно, к сожалению. Титул и фотки:http://vk.cc/3B6H7y Очень большую роль играют название статьи и фотография, от этого зависит конверсия «Фэйсбук»-трафика. Это два Туза в кармане! Очень важно, чтобы и то, и другое вызывало эмоцию, cтрасть. На сайте, где кнопка лайк (и другие копки, типа share), придумайте прикольную фразу, чтобы люди делились постами, ни в коем случае не унижайтесь. Отвечайте на зло добром. Ни с кем не ругайтесь. Добавьте все возможные маты в черный список. ** Не забудьте про разнообразие постов на сайте: одно фото-много текста, много фото-мало текста, видео+текст, тесты, флэш-игры и т.д. Тестируйте материалы на разную тематику, сделайте анализ и узнайте, что приносит больше трафика на сайт. Дальше вы уже поймете, что приносит вам трафик, а что нет. Теперь, главный пункт повествования: Google Adsense как один из лучших способов монетизации веб-сайта Моя единственная возможность монетизировать сайт (в моем случае, румынское медиа) — Google Adsense, т.к. Affiliate (партнерские программы) плохо работали на сайте. Впрочем, с партнеров я тоже выжимал по 30-200 евро в месяц. Моя первая прибыль в Google Adsense составила 70 евро за месяц, деньги приходили через Western Union. Пожалуй, ничто не мотивирует делать больше денег, как желание заработать еще больше. С каждым месяцем я зарабатывал все больше и больше:http://vk.cc/3B6HO Для этого мне нужно было поднимать процент кликов по рекламе и трафик на сайт, в основном через FB. Изначально мой CTR варьировался в диапазоне от 0,40% до 0,80%. Все, кто пользуется Google Adsense, пытаются найти статьи про то, как поднимать СTR в этой рекламной сети (если на сайт зашло 100 человек, и один из них сделал клик по рекламе, то CTR=1%). Вперед к новым победам На деньги, которые сделал на Adsense, купил себе машину и инвестировал в разработку 2 новых веб-сайтов (магазин и, конечно, самое важное для меня – онлайн-журнал, где все лояльные читатели будут оформлять годовую или месячную подписку). Скоро планирую запуск. От нечего делать я создал проект, монетизация которого базируется на affiliate программах и на консультациях. Трафик пока маловат — 60-70 человек в день, но он уже растет с каждым днем. При достижении органического трафика в 100 человек в день мы планируем установить чат и давать бесплатные советы начинающим блогерам. Мой контракт с Google Adsense для меня закончился плачевно. Причиной этому стал большой уровень CTR для сайта с моей тематикой. Но вышел я из этого стресса с высоко поднятой головой, которую в нелегкие моменты осенили новые проекты, 2 из них будут готовы к этому лету. Как я уже упомянул, это онлайн-магазин, а так же новый блог, из которого я хочу сделать молодой платный журнал для «умных». Так же в планах запустить cеть cайтов под affiliate программы. Но самое главное — это терпение. То, что тебя не убивает, делает сильнее. Недавно мне попалась на глаза умная фраза. Я согласен с ней на 100%: «удивительно, люди говорят, что три года на создание своего бизнеса – это долго, а ходить на работу сорок лет – это нормально». Cтатья заканчивается, но не заканчивается сама тема, я готов развивать ее и передавать свой опыт, отвечая на ваши вопросы в комментариях к этой публикации. Бонус первым пятерым, кто пользуется Google Adsense, оставляйте в комментариях адрес вашего сайта, после того, как я его проанализирую, помогу дельными советами. Жду ваших вопросов, буду рад помочь поделиться своим опытом. Итак, у вас есть два варианта на выбор: Первый: «вы видите, что все реально, работайте и удача вам улыбнется! Встретимся на Багамах.» Второй: «вы видите, как все сложно, дурак не пробьется никогда, поэтому ищите что-нибудь по проще. Да, я и сам бросаю заниматься этой фигней и иду работать официантом.» Лично я бы остановился на первом варианте, а вообще, пусть каждый сам для себя решит, где он хочет провести остаток дней — на Гоа или в городе Тайшет. Все в ваших руках, ногах, голове и сердце. ©megamozg","url":"https://stonedastronaut.github.io/kak-v-20-let-ia-stal-zarabatyvat-po-2-3k-evro-v-mesiats-na-google-adsense-i-chem-eto-zakonchilos.html","title":"Как в 20 лет я стал зарабатывать по 2-3K евро в месяц на Google Adsense, и чем это закончилось","tags":"misc"},{"text":"Эти заповеди были описаны в книге «Психология компьютерного программирования», написанной в 1971 году. Несмотря на возраст, слова до сих пор актуальны. Я не читал саму книгу, но нашёл пост о ней в блоге Стивена Уайетта Буша. Стивену её посоветовал перед смертью его отец. Вот эти заповеди: Пойми и свыкнись с тем, что ты будешь совершать ошибки. Суть в том, что их нужно находить до того, как они на что-то повлияют. В нашей индустрии, к счастью, ошибки редко могут привести к фатальным результатам (это не относится к тем, кто работает над ПО управления ракетами в Лаборатории реактивного движения). Мы можем (и должны) учиться, смеяться над собой и двигаться дальше. Твой код — это не ты. Весь смысл проверок — в поиске недочётов. И когда их найдут, не принимай это близко к сердцу. Не важно, сколько хитрых приёмчиков ты знаешь, — всегда найдётся кто-нибудь круче тебя. И, если ты попросишь, этот человек может научить тебя парочке новых трюков. Слушай других, даже если тебе кажется, что это не нужно. Не переписывай код без обсуждения. Между исправлением кода и его переписыванием лежит тонкая грань. Пойми разницу, не меняй всё самостоятельно, добивайся изменений в рамках анализа кода. Относись к тем, кто знает меньше тебя, с уважением, терпением и пониманием. Почти все люди из нетехнического круга, которые постоянно взаимодействуют с разработчиками, считают нас, в лучшем случаем, самодовольными типами. В худшем — плаксами. Не укрепляй этот стереотип своей злостью и нетерпеливостью. Всё течёт, всё меняется. Будь открытым для изменений, принимай их с улыбкой. Воспринимай каждое изменение в требованиях, смену платформы или инструмента не как существенное неудобство, с которым нужно бороться, а как новое испытание. Настоящая власть исходит не из званий, а из знаний. Знания порождают власть, а власть порождает уважение — так что, если вы хотите уважения в безличном окружении, развивайте свои знания. Борись за то, во что веришь, но достойно принимай поражение. Пойми, иногда твои идеалы могут быть отвергнуты. Даже если ты прав, не пытайся отомстить и не говори «Я вас предупреждал». Не делай уже мёртвую идею своим лозунгом. Не будь «программистом в каморке». Не будь человеком, который выходит из своего тёмного офиса только за газировкой. Такой программист вне зоны видимости, взаимоотношений и контроля. Такой человек не имеет голоса в открытом окружении. Принимай участие в разговорах, участвуй в жизни своего офиса. Критикуй код, а не человека, — будь добр к программисту, но не к коду. Пусть все твои комментарии будут положительными и направленными на улучшение кода. Указывай в комментариях на местные стандарты, спецификации, улучшение производительности и т. д. ©habrahabr","url":"https://stonedastronaut.github.io/10-zapovedei-bezlichnogo-programmirovaniia.html","title":"10 заповедей безличного программирования","tags":"misc"},{"text":"Чем отличается ArrayList от LinkedList? В моем рейтинге это один из двух самых популярных вопросов о коллекции, задают в 90% случаев. Вызвал у меня проблему на моем первом собеседовании на Junior Developer`а. Вкратце ответ на этот вопрос сводится к следующему: ArrayList это список, реализованный на основе массива, а LinkedList — это классический связный список, основанный на объектах с ссылками между ними. Преимущества ArrayList: в возможности доступа к произвольному элементу по индексу за постоянное время (так как это массив), минимум накладных расходов при хранении такого списка, вставка в конец списка в среднем производится так же за постоянное время. В среднем потому, что массив имеет определенный начальный размер n (в коде это параметр capacity), по умолчанию n = 10, при записи n+1 элемента, будет создан новый массив размером (n * 3) / 2 + 1, в него будут помещены все элементы из старого массива + новый, добавляемый элемент. В итоге получаем, что при добавлении элемента при необходимости расширения массива, время добавления будет значительно больше, нежели при записи элемента в готовую пустую ячейку. Тем не менее, в среднем время вставки элемента в конец списка является постоянным. Удаление последнего элемента происходит за константное время. Недостатки ArrayList проявляются при вставке/удалении элемента в середине списка — это взывает перезапись всех элементов размещенных «правее» в списке на одну позицию влево, кроме того, при удалении элементов размер массива не уменьшается, до явного вызова метода trimToSize(). LinkedList наоборот, за постоянное время может выполнять вставку/удаление элементов в списке (именно вставку и удаление, поиск позиции вставки и удаления сюда не входит). Доступ к произвольному элементу осуществляется за линейное время (но доступ к первому и последнему элементу списка всегда осуществляется за константное время — ссылки постоянно хранятся на первый и последний, так что добавление элемента в конец списка вовсе не значит, что придется перебирать весь список в поисках последнего элемента). В целом же, LinkedList в абсолютных величинах проигрывает ArrayList и по потребляемой памяти и по скорости выполнения операций. LinkedList предпочтительно применять, когда происходит активная работа (вставка/удаление) с серединой списка или в случаях, когда необходимо гарантированное время добавления элемента в список. Что вы обычно используете (ArrayList или LinkedList)? Почему? Это вопрос является слегка замаскированной версией предыдущего, так как ответ на этот вопрос приведет к постепенному изложению ответа на предыдущей вопрос. В 90% случае ArrayList будет быстрее и экономичнее LinkedList, так что обычно используют ArrayList, но тем не менее всегда есть 10% случаев для LinkedList. Я говорю, что обычно ArrayList использую, ссылаясь на тесты и последний абзац из предыдущего вопроса, но не забываю и про LinkedList (в каких случаях? так же последний абзац предыдущего вопроса помогает). Что быстрее работает ArrayList или LinkedList? Еще одна замаскированная версия первого вопроса. Хитрее приведенных выше вариантов, что постановка вопроса подразумевает односложный ответ с выбором одного из предложенных вариантов, что, по задумке автора вопроса, как я понимаю, должно сразу выявить человека с неглубокими познаниями в collections. Правильным же действием будет встречный вопрос о том, какие действия будут выполняться над структурой. В итоге, диалог плавно переходит к ответу на первый вопрос. Необходимо добавить 1млн. элемент, какую структуру вы используете? Тоже довольно популярная скрытая версия первого вопроса. Так же постановка предполагает выбор одного из предложенных вариантов, хотя на самом деле информации для однозначного выбора нет. Нужно задавать дополнительные вопросы: в какую часть списка происходит добавление элементов? есть ли информация о том, что потом будет происходить с элементами списка? какие то ограничения по памяти или скорости выполнения? В целом, все тот же первый вопрос, но немного с другой стороны: вы через дополнительные вопросы, показываете глубину понимания работы Array и Linked List. Однажды я сам «клюнул» на этот крючок, домыслив про себя, что добавить — это «вставить» в конец списка и усиленно продвигал ArrayList, хотя ничего не знал (и не пытался узнать) про дальнейшие действие с этим списком и возможные ограничения. Как происходит удаление элементов из ArrayList? Как меняется в этом случае размер ArrayList? При удалении произвольного элемента из списка, все элементы находящиеся «правее» смещаются на одну ячейку влево и реальный размер массива (его емкость, capacity) не изменяется никак. Механизм автоматического «расширения» массива существует, а вот автоматического «сжатия» нет, можно только явно выполнить «сжатие» командой trimToSize(). Предложите эффективный алгоритм удаления нескольких рядом стоящих элементов из середины списка, реализуемого ArrayList. Допустим нужно удалить n элементов с позиции m в списке. Вместо выполнения удаления одного элемента n раз (каждый раз смещая на 1 позицию элементы, стоящие «правее» в списке), нужно выполнить смещение всех элементов, стоящих «правее» n+m позиции на n элементов левее к началу списка. Таким образом, вместо выполнения n итераций перемещения элементов списка, все выполняется за 1 проход. Как устроена HashMap? Вкратце, HashMap состоит из «корзин» (bucket`ов). С технической точки зрения «корзины» — это элементы массива, которые хранят ссылки на списки элементов. При добавлении новой пары ключ-значение, вычисляет хеш-код ключа, на основании которого вычисляется номер корзины (номер ячейки массива), в которую попадет новый элемент. Если корзина пустая, то в нее сохраняется ссылка на вновь добавляемый элемент, если же там уже есть элемент, то происходит последовательный переход по ссылкам между элементами в цепочке, в поисках последнего элемента, от которого и ставится ссылка на вновь добавленный элемент. Если в списке был найден элемент с таким же ключом, то он заменяется. Добавление, поиск и удаление элементов выполняется за константное время. Вроде все здорово, с одной оговоркой, хеш-функций должна равномерно распределять элементы по корзинам, в этом случае временная сложность для этих 3 операций будет не ниже lg N, а в среднем случае как раз константное время. Какое начальное количество корзин в HashMap? Ответ здесь — 16. Отвечая, стоит заметить, что можно используя конструкторы с параметрами: через параметр capacity задавать свое начальное количество корзин. Какая оценка временной сложности выборки элемента из HashMap? Гарантирует ли HashMap указанную сложность выборки элемента? Ответ на первую часть вопроса, можно найти в ответе на вопрос 7 — константное время необходимо для выборки элемента. Вот на второй части вопроса, я недавно растерялся. И устройство HashMap знал и про хеш-функцию тоже знал, а вот к такому вопросу не был готов, в уме кинулся вообще в другом направлении и сосредоточился на строении HashMap откинув проблему хеш-кода, который в голове всегда привык считать хеш-кодом с равномерным распределением. На самом деле ответ довольно простой и следует из ответа вопроса 7. Если вы возьмете хеш-функцию, которая постоянно будет возвращать одно и то же значение, то HashMap превратится в связный список, с отвратной производительностью. Затем даже, если вы будете использовать хеш-функцию с равномерным распределением, в предельном случае гарантироваться будет только временная сложность lg N. Так что, ответ на вторую часть вопроса — нет, не гарантируется. Роль equals и hashCode в HashMap? Ответ на этот вопрос следует из ответа на вопрос 7, хотя явно там и не прописан. hashCode позволяет определить корзину для поиска элемента, а equals используется для сравнения ключей элементов в списке внутри корзины и искомого ключа. Максимальное число значений hashCode()? Здесь все довольно просто, достаточно вспомнить сигнатуру метода: int hashCode(). То есть число значений равно диапазону типа int — 2&#94;32 (точного диапазона никогда не спрашивали, хватало такого ответа). Как и когда происходит увеличение количества корзин в HashMap? Вот это довольно тонкий вопрос. Как показал мой мини-опрос, если суть устройства HashMap себе представляют многие более-менее ясно, то этот вопрос часто ставил собеседника в тупик. Помимо capacity в HashMap есть еще параметр loadFactor, на основании которого, вычисляется предельное количество занятых корзин (capacity*loadFactor). По умолчанию loadFactor = 0,75. По достижению предельного значения, число корзин увеличивается в 2 раза. Для всех хранимых элементов вычисляется новое «местоположение» с учетом нового числа корзин. В каком случае может быть потерян элемент в HashMap? Этот интересный вопрос мне прислал LeoCcoder, у меня подобного не спрашивали и честно признаюсь, после прочтения сходу не смог придумать сценарий для потери элемента. Все опять же оказалось довольно просто, хоть и не так явно: допустим в качестве ключа используется не примитив, а объект с несколькими полями. После добавления элемента в HashMap у объекта, который выступает в качестве ключа, изменяют одно поле, которое участвует в вычислении хеш-кода. В результате при попытке найти данный элемент по исходному ключу, будет происходить обращение к правильной корзине, а вот equals (ведь equals и hashCode должны работать с одним и тем же набором полей) уже не найдет указанный ключ в списке элементов. Тем не менее, даже если equals реализован таким образом, что изменение данного поля объекта не влияет на результат, то после увеличения размера корзин и пересчета хеш-кодов элементов, указанный элемент, с измененным значением поля, с большой долей вероятности попадет совсем в другую корзину и тогда он уже совсем потеряется. В чем отличия TreeSet и HashSet? Начнем с того, что Set — это множество (так же называют «набором»). Set не допускает хранение двух одинаковых элементов. Формально говоря, термин «множество» и так обозначает совокупность различных элементов, очень важно, что именно различных элементов, так как это главное свойство Set. С учетом такого определения, пояснение про хранение одинаковых элементом не требуется, но в обиходе, понятие «множество» потеряло свой строгий смысл касательно уникальности элементов, входящих в него, поэтому все же уточняйте отдельно данное свойство множества. TreeSet обеспечивает упорядоченно хранение элементов в виде красно-черного дерева. Сложность выполнения основных операций в TreeSet lg N. HashSet использует для хранения элементов такой же подход, что и HashMap, за тем отличием, что в HashSet в качестве ключа выступает сам элемент, кроме того HashSet (как и HashMap) не поддерживает упорядоченное хранение элементов и обеспечивает временную сложность выполнения операций аналогично HashMap. Устройство TreeSet? Здесь достаточно краткого ответа, что TreeSet основан на красно-черном дереве. Как правило этого хватает и собеседник сразу переходит к следующему вопросу, у меня ни разу не спрашивали механизм балансировки дерева или другие подробности его реализации. Что будет, если добавлять элементы в TreeSet по возрастанию? Обычно данный вопрос собеседник предваряет фразой, что в основе TreeSet лежит бинарное дерево и если добавлять элементы по возрастанию, то как они будут распределены по дереву. Если нет точного представления об устройстве TreeSet, а есть общее понимание о том, что это бинарное дерево (в чем нас дополнительно уверяет собеседник), то данный вопрос может привести к интересному результату: все элементы после доабвления в обычное бинарное дерево будут находится в одной ветви длиной N элементов, что сводит на нет, все преимущества такой структуры, как дерево (фактически получается список). На самом, деле, как выше упоминалось в основе TreeSet лежит красно-черное дерево, которое умеет само себя балансировать. В итоге, TreeSet все равно в каком порядке вы добавляете в него элементы, преимущества этой структуры данных будут сохраняться. ©habrahabr","url":"https://stonedastronaut.github.io/java-sobesedovanie-kollektsii.html","title":"Java собеседование. Коллекции","tags":"misc"},{"text":"Хочу поделиться своим опытом написания многопользовательской браузерной стратегии с нуля до рабочего проекта. С точки зрения непосредственно программирования, архитектуры и возникших проблем. Это мой первый опыт создания игры. Но не суть важно — главное я довел дело до рабочего проекта и наверняка многим будет интересно узнать подробности. Что представляет собой игра? Видимо наиболее коротким описанием будет «клон Цивилизации» =). Но это не значит что у меня не хватило фантазии придумать что-то свое. Просто сделать «Цивилизацию» было моей мечтой. Вряд ли бы я получил столько удовлетворения от написания другой игры. Ну а фанаты Цивилизации наоборот считают, что моя игра совсем не похожа на Цивилизацию, разве что только с виду. Может это и к лучшему. Игра называется The Fate of Nation Расписывать архитектуру и логику работы приложения можно до бесконечности поэтому придется видимо разделить на несколько частей статью, если к ней будет интерес. Кроме того не вижу большого смысла приводить много кода, так как реализовать написанное мной можно на любом языке и платформе. Для создания игры я использовал php и MySQL на сервере, html и javascript на клиенте. Flash не используется. Из html5 есть только видео на сайте и несколько областей с канвасом в самой игре — включая поверхность карты и мини-карту. Объем кода клиентской части в несколько раз превышает серверную часть, поэтому в основном буду рассказывать о клиентской разработке, но начнем с сервера. Общая архитектура Общая архитектура приложения выглядит как полностью асинхронное веб приложение на JavaScript. Перезагрузок страниц не предусмотрено. Обмен данными с сервером исключительно через Ajax и JSON. В JSON'е передаются только данные, без html кода. Html разметка загружается отдельно в начале загрузки приложения и процессится с данными через клиентский шаблонизатор по мере загрузки данных с сервера. image На сервере никаких фреймворков не использовал — хотя начинал писать с использованием Zend Framework, который выкосил потом за ненадобностью. Вместо него создал свою простую архитектуру отдаленно напоминающую контроллеры и экшены из ZendFramework. Как видно из рисунка, на сервере одна точка входа — файл index.php. В процессе игры на сервер идут запросы вроде такого: /Unit/Move. И посылается JSON с параметрами, в данном случае это id юнита и координаты перемещения. Сервер перенаправляет этот запрос на index.php, в котором последовательно выполняется подключение к БД, проверка текущего пользователя и парсинг строки запроса для определения контроллера (Unit) и действия (Move). Если контроллер не задан то сервер выдает индексную страницу с кодом для построения клиентского приложения, но об этом позже. Если же контроллер задан то ищется файл этого контроллера, подключается его код и запускается обработка запросов этого контроллера, где соответственно ищется необходимый экшн, а в нем производится проверка входных данных и дергается бизнес логика. image Для работы с БД написан специальный класс абстракции базы данных через который проходят все запросы к БД от бизнес логики и контроллеров, экранирование данных и прочие небольшие удобства. Собственно на сервере все довольно просто с архитектурой, а зона ответственности сервера заключается лишь в проверке входных данных и выдаче информации из БД. Все остальное делает клиент. Теперь немного о самой игре. Карта Первое что было сделано это карта на которой происходят почти все игровые действия: строительство городов, улучшений (посевы, дороги), перемещение юнитов и исследование карты. Размер карты составил 1000 на 1000 клеток для каждой отдельная запись в БД. Я видел игры где карта сделана бесконечной и записи о клетках динамически вставлялись тогда, когда с клеткой производились какие-либо действия. Но меня такой подход немного пугал своей непредсказуемостью. Гораздо проще планировать игру, когда точно знаешь, что у тебя есть фиксированная карта. Можно запланировать расположение игроков их количество, количество городов и юнитов, приблизительно оценить нагрузку. Итого получилось 1000 * 1000 = 1 000 000 записей в БД для карты. До этого я не работал с таким количеством записей и меня это насторожило. Думал что будет тормозить. image Я решил перехитрить MySql и разместить карту в 10-ти таблицах по 100 000 записей в каждой с надеждой, что станет быстрее работать. В итоге пришлось написать дурацкую логику по выборке клеток из нескольких таблиц сразу, а замеры показали что производительность только упала. Вернул все назад в 1-у таблицу. image x, y — это координаты клетки. terrain — тип территории (луг, лес, гора...). resource — ресурс если он есть на клетке (глина, лошади). wens9_code — название поля произошло от west-east-north… 9 — означает что изображение данной клетки зависит от территорий 8-ми рядом стоящих клеток и естественно от территории самой этой клетки — всего 9. Эту логику я спер с 3-ей цивилизации, насмотревшись их спрайтов территорий там где по 512 вариантов иконок для одной клетки!)) Потом у меня вскипел мозг разбирая зависимости по которым они выбирали иконки и я понял, какой это большой геморрой. =) И все только для одного: чтобы спрайты имели жесткие концы в виде ромбиков 128 на 64 пикселя. В конце концов мы решили использовать png24 с полупрозрачными краями накладывающиеся друг на друга и создающих в 10 раз лучший и разнообразный ландшафт, чем в описанном примере из Цив3. А выбираем иконки случайно независимо от соседних клеток. Это видно на скрине — сразу не скажешь где там одинаковые иконки полей. Вот горы по краям размыть забыли и они имеют четкие границы — что плохо смотрится. starting_position — означает что в этой клетке появится игрок. Конечно это не весь список полей, но здесь и далее для упрощения буду приводить только те поля, о которых рассказываю в статье. Регионы Клиент написан таким образом, что он не запрашивает с сервера определенные клетки, а запрашивает их партиями по 100 штук (10 на 10), которые я назвал регионами. То есть каждая клетка принадлежит какому-то региону и клиент запрашивает регионы и не конкретные клетки. Как только игрок перемещает карту так, что становится виден новый регион, мы посылаем запрос на сервер за этим регионом и граничащими с ним. Данные каждого загруженного регионакешируются на 30 секунд на клиенте. Это позволяет легко прокручивать карту без тормозов и лишних запросов на сервер и избавляет от задержки при появлении нового региона на карте — так как мы загружаем все соседние наперед. Когда я делал эти «регионы» я не предполагал насколько они увеличат производительность. Оказалось выделить 100 клеток фильтруя по полю региона получается многократно быстрее чем фильтруя по координатам. Несмотря на то, что я объединил x и y координаты клетки в одно поле location = 1000*x + y. Сделал это прежде всего для удобства — чтобы легче было достать одну клетку. image Затем каждую сущность (города, юниты, ресурсы), которые располагаются на карте и имеют соответственно конкретные координаты, я также пометил регионом, что увеличило производительность выборок в сотни раз. Одно дело искать значения в таблице по ключу с миллионом уникальных значений и другое дело по ключу с 10 000 значений. Таким образом получилась такая система: клиент запрашивает регионы — сервер достает из БД карту и все сущности на ней, быстро фильтруя по регионам — клиент отрисовывает это все в браузере на канвасе. У каждой сущности есть такие поля как время до окончания битвы или время до перемещения в следующую клетку — в этом случае по истечении этих таймаутов мы обновляем локально только то что требуется. Например если мы исследуем карту то догружаем только что открытые клетки и не более. Если вражеский юнит переместился — догружаем следующую точку его перемещения. Исследование карты Однако меня терзал еще один вопрос. Мне позарез хотелось сделать исследование карты — чтобы изначально она была не разведана и нужно было ходить по ней чтобы что-то увидеть. image Такого я не видел еще в браузерных играх (собственно как и юнитов передвигающихся по карте, а не по воздуху). Я принялся за расчеты. Стартовая позиция игрока расположена внутри региона. То есть максимальное количество игроков 10 000 как и регионов. Каждый игрок может разведать всю карту. Итого 10 000 * 1 000 000 = 10 миллиардов записей может быть в таблице пермишенов на клетки! Таблица карты показалась на фоне этого детским лепетом =). Конечно эта цифра завышена. Вряд ли кому-то удастся разведать всю карту — она очень большая. Но десятки и сотни миллионов записей в таблице пермишенов точно могут быть в конце игры. И на эту таблицу нужно было джойнить все сущности включая саму карту каждый раз при выборке регионов. Здесь опять спас меня ключ по полю региона, который позволил делать эти джоины намного быстрее. image Провести нагрузочное тестирование чтобы определить на каком этапе сервер начнет тормозить не удалось еще. Максимум что я видел это чуть более 2-ух миллионов записей в таблице пермишенов. Перемещение юнитов Чтобы сделать перемещение юнитов пришлось тоже подумать и переписать логику несколько раз. Первое что нам нужно, это точно отслеживать время открытия новых клеток чтобы можно было отфильтровывать клетки, юниты и города по этим данным. Сразу напрашивается использовать таблицу пермишенов на карту, но со спец-полем — означающим время когда эта запись станет активной. Так и было сделано. Клиент отправляет id юнита, и новую координату дислокации. Сервер просчитывает текущую позицию юнита, координаты клеток по которым он будет перемещаться, и в зависимости от территории этих клеток, типа юнита и других параметров высчитывает время когда этот юнит будет в каждой клетке. Затем дополнительно просчитываются таким же образом соседние клетки в зависимости от радиуса обзора юнита. Все это вставляется в таблицу пермишенов на клетки и карта работает как часы. Юнит ходит по карте, при каждом его перемещении мы запрашиваем клетки вокруг него, стандартными методами, которые отфильтруют сущности уже по новым данным пермишенов учитывая время активации пермишена, где будут заветные открытые области. Далее записи пермишенов, которые говорят о перемещении юнита мы помечаем еще 2 полями: id юнита и типом записи: 'обзорные клетки' или 'клетки по которым идет юнит'. Первое поле нужно чтобы при остановке юнита или смене пункта назначения можно было их удалить, второе нужно чтобы при выборке юнита записать ему времена смены дислокации. image Затем коллеги по работе мне подсказали еще один довольно очевидный момент: ввести поле означающее время выхода юнита с данной клетки. Я назвал его out_timestamp. Это позволило легко выбирать текущие позиции всех юнитов и соответственно фильтровать вражеских юнитов по видимым нами клеткам. Уверен, что мой пример не самая удачная архитектура для подобной игры, но вроде работает =) В следующих статьях могу рассказать о клиентской архитектуре, кешировании, используемом фреймворке и о том, как мне удалось сделать демонстрационную версию игры работающую без запросов к серверу, чисто на клиенте. Да, кстати, часто после различных постов об игре народ начинает хвалить графику, а не геймплей. Так что скажу сразу — я ее не рисовал!!! Это все наш художник-дизайнер Максим Кудрицкий. ©habrahabr","url":"https://stonedastronaut.github.io/razrabotka-brauzernoi-strategii.html","title":"Разработка браузерной стратегии","tags":"misc"},{"text":"Emacs Line Navigation Screen navigation Word navigation Special navigation Paragraph navigation Search navigation Navigation from command line Table of Contents Example Example2 Third Example Example Example2 Third Example If you don't have an emacs editor, install emacs editor as we discussed earlier. Notation used in this article: C-a : Ctrl-a M-a : Meta-a ( If you don't have Meta key, use Esc key ) C-M-a : Ctrl-Meta-a Emacs Line Navigation Following four navigation can be done line by line. C-p : go to previous line C-n : go to next line C-f : go forward one character C-b : go backward one character Repeat factor By using the repeat factor in EMACS we can do this operation for N times. For example, when you want to go down by 10 lines, then type C-u 10 C-p Within a line if you want to navigate to different position, you have following two options. C-a : go to the starting of the current line. C-e : go to the end of the current line. At thegeekstuff, we love Vim editor. We've written lot of articles on Vim editor. If you are new to the Vim editor, refer to our Vim editor navigation fundamentals article. 2. Emacs Screen Navigation Following three navigation can be done in relation to text shown in the screen. C-v : Jump forward one full screen. M-v : Jump backwards one full screen. ( If you dont have Meta key, use ESC key ) C-l : Make the current line as center line of window. You can also use Page Up, Page Down for screen navigation. 3. Emacs Special Navigation Following are couple of special navigation that are used to go to the start or end of buffer. M-< : Go to the start of file M-> : Go to the end of file Emacs Word Navigation Following are two word navigation keys. M-f : navigate a word forward. M-b : navigate a word backward. Emacs Paragraph Navigation M-a : Go to the beginning of the current paragraph. By pressing M-a again and again move to the previous paragraph beginnings. M-e : Go to the end of the current paragraph. By pressing M-e again and again move to the next paragraph end, and again. Emacs Search Navigation When you want to search by giving the plain text, C-s : Type Ctrl+s followed by the word to Search. Press Ctrl+s continuously to move to the next occurrences. Press enter to terminate search. C-r : Do a reverse search. All other explanation are like Ctrl+s When you want to search using regular expression, C-M-s : Type Ctrl+s followed by the regex to Search. Press Ctrl+s continuously to move to the next occurrences. Press enter to terminate search. C-M-r : Do a reverse search. All other explanation are like Ctrl+Meta+s Emacs Navigation from Command Line Emacs +N filename: Go to the Nth line of the file after opening it. $ emacs +10 /etc/passwd","url":"https://stonedastronaut.github.io/emacs-navigation-options-en.html","title":"Emacs navigation options","tags":"misc"},{"text":"Часто, когда разрабатываешь сайт, замечаешь, как на одни и те же грабли наступают разработчики при проектировании базы данных. Сегодня я решил опубликовать свои шпаргалки, на самые часто встречающиеся ошибки при работе с MySQL. Работа с бекапами Делаем бекап mysqldump -u USER -pPASSWORD DATABASE > /path/to/file/dump.sql Создаём структуру базы без данных mysqldump —no-data - u USER -pPASSWORD DATABASE > /path/to/file/schema.sql Если нужно сделать дамп только одной или нескольких таблиц mysqldump -u USER -pPASSWORD DATABASE TABLE1 TABLE2 TABLE3 > /path/to/file/dump_table.sql Создаём бекап и сразу его архивируем mysqldump -u USER -pPASSWORD DATABASE | gzip > /path/to/outputfile.sql.gz Создание бекапа с указанием его даты mysqldump -u USER -pPASSWORD DATABASE | gzip > date +/path/to/outputfile.sql.%Y%m%d.%H%M%S.gz Заливаем бекап в базу данных mysql -u USER -pPASSWORD DATABASE < /path/to/dump.sql Заливаем архив бекапа в базу gunzip < /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE или так zcat /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE Создаём новую базу данных mysqladmin -u USER -pPASSWORD create NEWDATABASE Удобно использовать бекап с дополнительными опциями -Q -c -e, т.е. mysqldump -Q -c -e -u USER -pPASSWORD DATABASE > /path/to/file/dump.sql, где: -Q оборачивает имена обратными кавычками -c делает полную вставку, включая имена колонок -e делает расширенную вставку. Итоговый файл получается меньше и делается он чуть быстрее Для просмотра списка баз данных можно использовать команду: mysqlshow -u USER -pPASSWORD А так же можно посмотреть список таблиц базы: mysqlshow -u USER -pPASSWORD DATABASE Для таблиц InnoDB надо добавлять —single-transaction, это гарантирует целостность данных бекапа. Для таблиц MyISAN это не актуально, ибо они не поддерживают транзакционность. Подробнее Общие факты Полезно под каждую базу на боевом сервере создавать своего пользователя Кодировка базы может быть любой, если она UTF8 В большинстве случаев лучше использовать движок InnoDB В php лучше забыть про сильно устаревшее расширение mysql и по-возможности использовать pdo или mysqli Новую копию MySQL всегда можно настроить и оптимизировать Без особой нужды не стоит открывать MySQL наружу. Вместо этого можно сделать проброс портов ssh -fNL LOCAL_PORT:localhost:3306 REMOTE_USER@REMOTE_HOST Работа с данными Числа На 32-битных системах практически нет смысла ставить для типа INTEGER свойство UNSIGNED, так как такие большие числа в php не поддерживаются. На 64-битных системах, php поддерживает большие числа, вплоть до MySQL BIGINT со знаком. Связанные таблицы («Foreign keys») должны иметь полное сходство по структуре ключей. Т.е. если у нас на одной таблице для поля указано «INTEGER UNSIGNED DEFAULT 0 NOT NULL» то и на другой должно быть указано аналогично Для хранения булевых значений, нужно использовать TINYINT(1) А деньги лучше хранить в DECIMAL(10, 2), где первое число обозначает количество всех знаков, включая запятую, а второе — количество знаков после запятой. Итого, у нас получится что DECIMAL(10,2) может сохранить 9999999,99 Строки В старых версиях (до 5.0.3) VARCHAR была ограничена 255 символами, но сейчас можно указывать до 65535 символов Помните, что тип TEXT ограничен только 64 килобитами, поэтому что бы сохранять «Войну и Мир» пользуйтесь «LONGTEXT» Самая правильная кодировка для вашей БД UTF8 Даты Не забывайте, что DATE, TIME, DATETIME — выводятся в виде строк, поэтому поиск и сравнение дат происходит через преобразование TIMESTAMP — хранится в виде UNIX_TIMESTAMP, и можно указать автоматически обновлять колонку Сравнивая типы данных DATETIME и TIMESTAMP, не забывайте делать преобразование типов, например: SELECT * FROM table WHERE datetime = DATE( timestamp ) Перечисления Для перечислений правильно использовать тип ENUM Правильно пишется так: ENUM('мама', 'мыла', 'раму') Можно ставить значение по-умолчанию, как и для любой строки В базе поле с перечислением хранится как число, поэтому скорость работы — потрясающе высокая Количество перечислений ~ 65 тысяч dev.mysql.com/doc/refman/4.1/en/storage-requirements... help.scibit.com/mascon/masconMySQL_Field_Types.html Отладка Если запросы тормозят, то можно включить лог для медленных запросов в /etc/mysql/my.cnf А потом оптимизировать запросы через EXPLAIN И наблюдать за запросами удобно через программу mytop ©habrahabr","url":"https://stonedastronaut.github.io/mysql-shpargalki.html","title":"MySQL шпаргалки","tags":"misc"},{"text":"Мне приходится очень много читать код. Это и open source, и всяческие фреймворки, и код enterprise приложений. Именно о последних я хотел бы сегодня поговорить. Большая часть кода enterprise приложений — отстой. Приложения глючат и тормозят, их сложно тестировать, постоянно проблемы с развертыванием и обновлением. Это как бы никого не удивляет. Но удивляют люди, написавшие отстойный код. Эти люди, с немалым опытом, знают несколько языков, прочитали много книг, знают ООП, SOLID, рефакторинг, паттерны и другие малопонятные слова. То есть примерно такие, как многие из вас, читающих этот пост. Теория разбитых окон В 1969 году был проведен эксперимент. В ходе эксперимента две одинаковые машины были оставлены в двух местах – в благополучном университетском городке и неблагополучном районе крупного города. Не удивительно что в неблагополучном месте машина простояла всего пару дней и была выпотрошена, а в благополучном машина простояла нетронутой неделю. Но как только в уцелевшей машине разбили стекло, жители этого самого благополучного городка за несколько часов разобрали её на детали и перевернули вверх дном. В последствии ученые назвали это явление \"Теорией разбитых окон\". Согласно теории, любое проявление беспорядка или нарушение норм провоцирует людей также забыть о правилах. Теория получила несколько экспериментальных подтверждений и её можно считать вполне достоверной. Есть также и обратный эффект. Поддержание порядка приводит к тому, что окружающие также поддерживают порядок. Как это влияет на код В enterprise разработке прессинг сроков и неопределенности требований бывает настолько высок, что кажется сделать \"быстро и грязно\" – гораздо лучший вариант, чем сделать правильно. Моментально подход \"быстро и грязно\" начинает распространяться по всему приложению, как путем clipboard inheritance (aka copy-paste), так и за счет эффекта разбитых окон. Еще один фактор влияющий на качество кода – сложность и несовершенство платформ и фреймворков, используемых в разработке. Из-за этого в коде часто появляются хаки и нелепые workaround-ы. Со временем начинает казаться что эти хаки и есть хороший код. Даже когда проблемы фреймворков исправляют, люди продолжают использовать хаки. Кстати эти хаки со временем могут попадать в интернет через форумы, блоги или pastebin и распространяться далеко за пределы одного приложения. Вы можете сказать, что качество кода не влияет на качество приложения. Увы, еще как влияет. Программисты допускают ошибки. Чем более плохой код, тем сложнее эти ошибки найти и исправить так, чтобы не создать новых. Прессинг сроков и сложности, скорее всего, не даст написать хороший код и появится еще один хак. В open source и продуктовой разработке такое встречается реже. Там больше следят за качеством и меньше прессинг сроков. Код пишется для людей Часто программисты забывают что код программ пишется в первую очередь для людей. Даже если вы пишите программу в одиночку, то посмотрев на нее через месяц, вы не вспомните почему написали тот или иной кусок кода и за что он отвечает. Хороший код должен, в первую очередь, очень ясно выражать намерения. К сожалению \"быстрые и грязные\" способы разработки бьют в первую очередь по понимаемости кода. Улучшение кода осознанно откладывается до лучших времен, когда будет пауза чтобы провести рефакторинг. Те самые лучшие времена никогда не наступают, а код начинают читать и дорабатывать сразу же после попадания в source control. Даже если вы полностью довольны свои кодом (в большинстве случаев программисты свои кодом довольны), то подумайте о том как будет ваш код читать другой человек (в большинстве случаев программисты недовольны чужим кодом). Приверженность качеству Единственный способ добиться высокой продуктивности и эффективности – писать хороший код сразу. Единственный инструмент повышения качества кода – вы сами. Если вы не стремитесь всегда делать хороший код, то вам не помогут ни тесты, ни инструменты статического анализа. Даже ревью других программистов не поможет. Код всегда можно сделать настолько запутанным, что в нем невозможно будет найти ошибку при чтении, при этом сделать вид, что код очень важен и никто не возьмется его переписать. В первую очередь необходимо думать о структуре и именовании. Код с зашифрованными идентификаторами и малопонятным потоком исполнения скорее всего будет содержать ошибки. Не допускайте такого кода, это гораздо дешевле, чем исправлять ошибки. Ясно выражайте намерения в своем коде, сводите к минимуму неочевидные неявные аспекты. Не надо стремиться сделать код максимально лаконичным, стремитесь сделать его максимально понятным. Если вам приходится править код, то не создавайте хаков. Потратьте немного времени, напишите нормально. Сэкономите на поддержке. Если же код совсем плохой, был сделан \"быстро и грязно\" и оброс хаками, то просто выкиньте его и перепишите. Только не надо пытаться переписать все. Учитывайте продуктивность: программист пишет 40-60 отлаженных строк кода в день в нормальном темпе и 120-200 в ускоренном (высокая концентрация, четкая цель, понятно что делать). Если вы сами пишете \"быстро и грязно\", например прототип для уточнения требований, то выкиньте код и перепишите нормально сразу после того, как ваш код сделает свое дело. Если вы скопировали часть кода из другого места или, не дай бог, из интернета, то разберитесь как он работает, прежде чем заливать изменения в source control. Вообще не используйте непонятные для вас фрагменты кода. Всегда поддерживайте чистоту и порядок в вашем коде, пользуйтесь инструментами, которые помогают вам это делать. Не будете этого делать – код очень быстро превратится в помойку. Собирайте статистику по плотности проблем в коде, это поможет вам лучше понять, как писать хороший код. Перечитывайте свой код. Проводите рефакторинг постоянно в процессе написания. Помните, что рефакторинг \"потом\" никогда не наступает. Думайте о том, какой код вы хотите написать, до того как начать его писать. Само написание кода – настолько поглощающий процесс, что думать о качестве некогда. Состояние потока – это состояние свободы самовыражения. Необходимо заранее ограничить самовыражение, чтобы код получился хорошим. Экономика качества кода Ошибка найденная и устраненная на этапе кодирования в 10 раз дешевле, чем ошибка найденная при тестировании и в 100 раз дешевле ошибки, найденной в production. В истории есть реальные примеры ошибок, исправление которых обошлось в десятки тысяч долларов. Поэтому очень важно устранять ошибки на этапе разработки, причем усилиями самих разработчиков. Напоследок Не путайте хороший и идеальный код. Идеального кода не существует, нет смысла заниматься бесконечным улучшением в стремлении к идеалу. Хороший код – это код который читаем, понятен, решает задачу, правильно структурирован и не содержит ошибок. Писать хороший код не просто ваша цель, это ваша обязанность. ©habrahabr","url":"https://stonedastronaut.github.io/kak-vazhno-pisat-khoroshii-kod.html","title":"Как важно писать хороший код","tags":"misc"},{"text":"Согласно поговорке, программисты — это устройства, преобразующие кофеин в код. Если спросить первого попавшегося программиста, когда он наиболее продуктивен, — скорее всего, он назовёт ночь. Кто-то пораньше, кто-то попозже. Популярен вариант встать в 4 утра и сделать работу до начала дневной суматохи. А некоторые предпочитают ложиться в 4 утра. Цель всего этого — избавиться от отвлекающих факторов. Но можно было бы просто закрыть дверь… Что же такого особенного в ночи? Я думаю, что всё сводится к трём вещам: расписанию творца, сонному мозгу, и яркому экрану компьютера. Расписание творца В 2009 году Пол Грэм написал о «расписании творца» (maker's schedule). По его мнению, в мире есть два основных типа расписаний. В традиционном «распорядке менеджера» день разделяется на отдельные часы, и десятиминутная помеха обходится максимум в час потерянного времени. Часовой механизмДругой вариант Грэм называет расписанием творца — того, кто что-то создаёт, творит, производит. Работа над большими абстрактными системами требует размещать их целиком в своей голове. Это можно сравнить с постройкой дома из хрусталя: стоит отвлечься, как всё осыпается и разбивается вдребезги. Поэтому программистов так раздражает, когда их отвлекают. Из-за этого огромного умственного вклада мы просто не начинаем работать, пока не можем рассчитывать на пару часов покоя. Не имеет смысла строить в голове всеобъемлющую модель системы только для того, чтобы через полчаса её кто-то сломал. В самом деле, поговорив с руководителями компаний вы узнаете, что они просто не могут закончить никакую работу в течение дня. Постоянная канонада помех: важных дел™, требующих внимания, и писем, требующих ответа, — просто не позволяет что-либо сделать. Поэтому они выполняют бо́льшую часть работы ночью, когда все остальные спят. Сонный мозг Но даже программистам нужно спать по ночам. Мы не какие-нибудь суперлюди. Даже программисты более внимательны именно днём. Пик БалмераТогда почему же мы выполняем самую сложную умственную работу когда мозг хочет спать, а более простые задания — когда разум остр и ясен? Потому что усталость делает нас лучшими кодерами. Как с пиком Балмера, усталость заставляет нас собраться потому, что уставший мозг просто вынужден сосредоточиться! У него элементарно не остаётся лишних сил, чтобы позволить себе потерять концентрацию. Например, моя продуктивность минимальна после чрезмерного количества чая или невовремя выпитого энергетического напитка: они делают меня гиперактивным, и я то проверяю твиттер, то читаю Hacker News, — в общем, просто прыгаю туда-сюда. Казалось бы, я должен работать лучше — столько энергии, такой разогнанный мозг. Однако, вместо этого я сам путаюсь у себя в ногах, потому что не могу сконцентрироваться больше чем на две секунды. С другой стороны, когда я немного уставший, я просто плюхаюсь за стол и пишу. Со слегка утомлённой головой я могу писать код часами, даже не думая заглянуть в твиттер или фейсбук. Интернет как будто перестаёт существовать. Мне кажется, это верно для большинства программистов. Наши умственные силы избыточны для ~80% задач: согласитесь, реализация интересного алгоритма часто требует написания ещё раз в десять большего объёма вспомогательного кода. Даже если вы занимаетесь самым сложным машинным обучением, какое только можно представить, большой кусок работы — это просто подготовка данных и вывод результатов в красивом видe. А когда мозг не работает на полную мощность, он ищет какое-нибудь занятие. Усталость притупляет разум настолько, что ему становится достаточно и одной текущей задачи. Яркие экраны компьютеров Здесь всё просто. Продолжайте вечерами пялиться на яркий источник света, и ваш режим сна начнёт задерживаться. Вы забываете об усталости до трёх часов ночи, потом просыпаетесь в 11, и когда наступает вечер — вы просто ещё не устали, потому что на ногах всего с одиннадцати утра! Ночной Инсбрук После нескольких повторений такой подход запросто утащит вас в другой часовой пояс. Что интересно, сдвиг не бесконечен, и однажды попав в равновесную точку отхода ко сну между 3 и 4 часами, вы, как правило, там и останетесь. А быть может, дело в будильниках, поднимающих нас по утрам, — потому что общество называет нас паршивыми лентяями, если мы начинаем завтрак в два часа пополудни. Заключение Итак, программисты работают по ночам, потому что это не требует прекратить работу к определённому времени (что позволяет работать более расслабленно), мозг не отвлекается, а яркий экран прогоняет сон. ©megamozg","url":"https://stonedastronaut.github.io/pochemu-programmisty-rabotaiut-po-nocham.html","title":"Почему программисты работают по ночам","tags":"misc"},{"text":"Вы потеряли ту страсть, которая была у вас к программированию? Влияет ли это на мотивацию завершать свои задачи? Трудно ли вам заканчивать проекты? Если да, то для вас есть хорошие новости: это случается с каждым, так что не отчаивайтесь. Представьте, что костёр в вашем лагере потух. Вместо того, чтобы переживать об этом, лучше успокоиться, глубоко вздохнуть и подумать о том, как снова его зажечь. Это может быть не легко, но это возможно. Если вы не будете торопиться, то всё будет хорошо. Проводите время с программистами-единомышленниками Когда вы чувствуете безразличие и скуку, худшее, что можно сделать — это страдать в одиночестве. Если вы ещё не окружены единомышленниками, вам стоит поискать сообщество. Личное общение идеально, но онлайн-взаимодействие лучше, чем ничего. Нужно прояснить: речь не идёт о том, достаточно ли вы сильны для того, чтобы самому тянуть себя вперёд. Быть немотивированным не значит быть слабым. Просто важно сохранять связь с реальностью, а это сложно, если вы не видите свою ситуацию со стороны благодаря другим программистам. Помните: цель не в том, чтобы жаловаться и делиться своей печалью. Это плохо и к тому же может понизить мотивацию других людей. Цель в том, чтобы поделиться своим беспокойством, или может быть мелочами, которые убивают ваше вдохновение. Если вы не уверены в себе или чувствуете дискомфорт, будет полезным найти наставника. Наставник может проверять качество вашего кода и давать обратную связь. Также он может быть внешним мотиватором, когда вы захотите сдаться. Меняйте темы и изучайте новое Во многих случаях мотивация падает из-за скуки. Если вы долго работали разработчиком ПО, вы можете ощущать себя застрявшим на бесперспективной работе. Может быть, код, с которым вы работаете, тривиальный и не требует умственного напряжения. Что делать? Нужно переключиться. Половина удовольствия от программирования приходит от решения творческих задач. Без этого программирование превращается в рутину, особенно если написание кода даётся легко. В зависимости от возможностей вашей фирмы, попросите руководителя переключить вас на другой проект. Если вы можете себе позволить, переключитесь на другую область (например, вы могли писать образовательное ПО под Windows, а теперь попробовать писать социальные сети). Или вы можете выбрать несколько сторонних хобби-проектов, где используются новые для вас области программирования. Например, попробуйте сделать мобильную игру в свободное время. Вы можете быть удивлены тем, как много энергии могут дать вам личные проекты. Главное, убедитесь, что сторонние проекты значительно отличаются от того, чем вы итак занимаетесь. Развивайте умственное и эмоциональное здоровье Недостаток мотивации может быть симптомом более глубокой проблемы, начиная с обезвоживания и заканчивая депрессией. Иногда глотка воды достаточно, чтобы вернуть себе вдохновение. Но если недостаток мотивации проявляется долгое время, лечение может оказаться не таким простым. Для компьютерных профессий, таких как программист, нужно соблюдать 3 принципа касательно здоровья. Во-первых, надо регулярно заниматься физическими упражнениями. Если времени мало, можно выполнять простые упражнения на рабочем месте. Во-вторых, минимизируйте своё утомление от компьютера. В-третьих, нормализуйте свой сон. Умственная усталость также является следствием статичности окружающей обстановки. Смотреть на одни и те же 4 стены каждый день довольно монотонно. А монотонность ведёт к скуке. Это можно вылечить сменой вашей обстановки, например путём перестановки мебели, смены места или хотя бы фона рабочего стола. Наконец, недостаток мотивации часто связан с промедлением в выполнении задач. Здесь очень полезной окажется техника Pomodoro. Она разделяет ваш рабочий день на периоды работы и отдыха. Никогда не пробовали? Потестируйте хотя бы 1 или 2 недели. Результаты могут вас приятно удивить. Выводы Программирование — это весело! Программирование — это скучно. Это снова весело! Это снова скучно. Каждый раз эти ощущения несколько разные, но советы, описанные выше, всегда работают. Ещё одна вещь, которая может вам помочь — это онлайн-соревнования по программированию. Это потребует определённых личностных качеств, но дух соревнования может возродить и поддерживать в вас страсть. Перевод «Programming Burnout: How to Regain Your Lost Motivation» ©tproger","url":"https://stonedastronaut.github.io/kak-vozrodit-poteriannuiu-motivatsiiu.html","title":"Как возродить потерянную мотивацию","tags":"misc"},{"text":"Как разработчик, вы сидите на золотой жиле. Вы осознаете это? Нет, серьезно, на @#$% золотой жиле! Никогда в истории не существовало возможностей так легко создать что-то с нуля, с маленьким или отсутствующим начальным капиталом и маркетинговой моделью, ограниченной только вашим воображением. Подумайте о крупнейших сайтах, которые вы постоянно посещаете: Facebook, Twitter, Flickr, Foursquare, или даже Google — все они были созданы разработчиками, у которых была лишь идея. Было ли это легко? Черт, нет. Но это могло быть сделано только в наше время. Так, черт побери, почему вы просиживаете день за днем, работая на кого-то? Да, я тоже наемный работник. И я ненавижу это. Если вокруг есть столько прекрасных возможностей, почему большинство разработчиков не работают на себя? Я думаю, есть несколько отговорок, которые мы придумываем сами себе. Но ни одна из них не является серьезной. Миф №1: у вас нет времени Я часто слышу эту отговорку и каждый раз смеюсь. Сколько времени вы проводите за телевизором или игрой в XBox, Wii, Playstation и так далее? От силы час в день, так? А сколько времени вы проводите в Facebook'е и Twitter'е? (Скорее всего, минутку сейчас, минутку потом?) А что вы делаете каждый день в обеденный перерыв? Это ведь целый час времени. Вот что я скажу: час тут, час там — у вас на самом деле есть время. Суть в том, как вы его проводите. Если вы действительно хотите что-то сделать, вам нужно найти идею (действительно хорошую идею) и загореться ею! Если вы увлечетесь чем-то, вы найдете время. И в итоге придете к тому, что вам некомфортно работать над чем-то кроме вашей идеи. Мне 31 год, я женат, и у нас трое маленьких детей. Я целый день работаю, а потом прихожу домой к чудесной жене, которая к концу дня не знает, куда деваться от детей. Я считаю себя довольно занятым человеком, но тем не менее мне удается находить как минимум 20 часов в неделю для того чтобы поработать над моей идеей, которая поможет мне освободиться из зарплатной ловушки, куда я сам себя заманил. Я пишу этот текст сидя в уютном кресле в кафе через дорогу от моей работы. Я захожу сюда практически каждый день, и это составляет почти 5 дополнительных часов продуктивной работы в неделю! Никаких бегающих детей вокруг, никаких отвлекающий факторов, только я, мой лэптоп и мои наушники. Миф №2: я не могу придумать идею Если вы только начинаете работу, вы постоянно слышите от людей фразы типа «Идеи ничего не стоят» и «Я легко могу придумать идею, просто у меня нет времени на реализацию». Когда вы сидите и пытаетесь придумать Очередную Клевую Штуку (очередной Facebook, очередной Reddit и т.д.), вам кажется, что все хорошие идеи уже реализованы! И вы не можете придумать ничего стоящего. Попросите основателя любого крупного веб-сайта сравнить текущее положение дел с тем, каким он его представлял, и, я уверен, он рассмеется. Все они вряд ли пошли тем путем, которым собирались пойти. Сейчас эти сайты имеют огромную посещаемость благодаря тому, что их создатели были достаточно умны, чтобы улучшать и создавать функции, которые нравятся пользователям. Поэтому перестаньте пытаться сделать хоумран (прим. пер. — в бейсболе удар через все поле, позволяющий набрать очко), лучше попытайтесь сперва добежать до базы! Создайте что-то полезное. Что-то, что нужно людям, а затем улучшайте это, снова и снова. Начните с простого и развивайте. Если вы чересчур увлечены конечным результатом (яхта и частный остров в Карибском море), то вы всего лишь фантазер. Сделайте что-нибудь, покажите это людям, получите отзывы и улучшайте. Вот что я делаю, когда пытаюсь придумать новую забавную идею для работы: 1. Слушаю National Public Radio (или любое другое ток-шоу). Люди обожают жаловаться. Я смотрю на любую жалобу как на возможность! Например, мой текущий проект родился во время празднования столетия движения бойскаутов. Я сам бывший бойскаут, был лидером скаутов. Однако я успел позабыть обо всех сложностях. Радиопередача подкинула мне идею, над которой я сейчас работаю. Это довольно узкая ниша, но она предоставляет много возможностей. Еще мне приходит на ум много плохих идей, но это нормально! Это как упражнение. Чем больше вы открыты, тем легче мысли приходят в голову и тем легче оценивать их. Найдите то, что люди ненавидят, что доставляет им неудобство, и сделайте что-то, за что они захотят заплатить (неважно, напрямую или косвенно). 2. Чем вы любите заниматься? Что вам больше всего нравится? Займитесь тем, что вам нравится, иначе вскоре это может действительно надоесть, и вам будет хотеться заняться чем-то другим. Перед тем, как вы начнете, убедитесь, что вы готовы думать о вашей идее круглые сутки в течение недели, иначе у вас ничего не получится. Одно из моих увлечений — погружение с аквалангом. Я бы очень хотел жить в мире, где не нужно думать ни о чем другом, кроме погружений. Так что у меня есть несколько идей в этой области, которые я пока обдумываю. 3. Ведите записи. Google Docs вам в помощь. У меня есть документ, который я называю «Идеи для моих программ». Когда у меня появляется идея — не важно насколько она тривиальна или уникальна — я немедленно записываю ее в этот документ. Некоторые люди для этой цели держат блокноты на прикроватной тумбочке. Даже не знаю, сколько раз за рулем у меня возникали идеи, а к тому времени, когда я добирался домой, забывал их. Не то что бы это были плохие идеи, просто я отвлекался и забывал о них. Через некоторое время они возвращались ко мне, однако было все равно неприятно. Ведение записей позволит вам упорядочивать ваши идеи, добавлять к ним заметки и размышления. Никогда не начинайте работу в тот же день, как придумали идею. Обдумайте ее по крайней мере день или два. Убедитесь, что она стоит того, чтобы потратить на нее следующие несколько лет вашей жизни. Не делайте что-то ради того, чтобы посмотреть, понравится ли это людям. Сперва прочтите «Да, но кто вам сказал, что они КУПЯТ эту штуку?» (прим. пер. — ссылка ведет на непереведенную статью) и возвращайтесь. Давайте, я подожду. Миф №3: у меня нет денег Кто сказал «деньги»? Только если ваша идея совершенно точно требует вложений, что является довольно редким явлением в Интернете, вы можете начать с нулем. Нуль. Ничего. Ничегошеньки. Будьте изобретательны, чтобы достигнуть нужного результата. Меняйтесь, продавайте, консультируйте. Возьмите за правило тратить как можно меньше, чтобы добиться результата. А лучше не тратьте деньги вообще до тех пор, пока не станете получать их от своих клиентов. Я потратил кучу денег на хостинг для Django в моем текущем проекте. Хостинг мне нравится, однако я считаю это роскошью. Я мог бы использовать Google App Engine бесплатно, но черт, я способен потратить сто баксов в год. Я планирую использовать бесплатный Chargify до тех пор, пока не стану получать от проекта достаточно денег, чтобы тратить их на хостинг. Для старта вам не нужны деньги. Если вы думаете иначе, и особенно если вы впервые занимаетесь своим делом, вам стоит подумать еще раз. Миф №4: я ничего не знаю о маркетинге/дизайне/и т.п. Это не самая лучшая отговорка от старта своего дела, однако самая популярная. Как разработчик, я прихожу в ужас от того, что нужно продавать. Я ненавижу висеть на телефоне. Я не люблю думать о том, как бы привлечь побольше народу на мой сайт. Я люблю создавать что-то. Если сейчас вы соглашаетесь со мной, то у вас есть два пути: 1. Найдите партнера, который разбирается в том, в чем не разбираетесь вы. Сосредоточьтесь на том, что вы делаете хорошо. Если вы разработчик, слушайте, что говорят пользователи и тратьте все свое время на создание действительно классного продукта. Продажи и маркетинг могут отнять все свободное время. Это действительно трудно управляться с обоими направлениями. Если у вас два партнера-технаря, мы можете разделить между собой задачи по продажам и маркетингу, и в конце концов обнаружите, что тот, кто справляется с ними лучше, будет ими заниматься все время. Однако тот факт, что вы «разработчик», не означает, что вы не должны участвовать в продажах или маркетинге! Хотя на сильных сторонах необходимо сосредотачивать свои усилия, однако также нужно знать, как работают продажи, маркетинг, PR и все с этим связанное. Это предотвратит фразы типа «Черт, почему Джон не может привести ни одного клиента? Мне кажется, что я делаю всю работу.» Вы станете больше ценить продажи и маркетинг после того, как узнаете, насколько тяжело ими заниматься! Давайте! Не будьте бабой! (Дамы, прощу прощения за выражение.) И наоборот, дайте вашему партнеру, который соображает в продажах или маркетинге, просмотреть код хотя бы по диагонали. Устройте этакое сотрудничество. По крайней мере, если он будет знать, сколько времени занимает ваша работа, он сначала проконсультируется с вами насчет новой фичи, а не пойдет продавать несуществующую функциональность. Уберите завесу тайны и вникайте в дела друг друга! 2. Не будьте тряпкой и научитесь этому! Это значит, что вам нужно будет отложить код в сторонку и научиться продавать и стать настоящим продажником или пиарщиком. Это потребует времени, только не сдавайтесь! Хорошая новость: что то, что работает для одной компании или сайта, необязательно будет работать для другой. Что? Это больше похоже на плохую новость? Взгляните на это с другой стороны: худшее, что вы можете сделать, это не справиться. Я иронизирую, но это правда. Если вы провалитесь в маркетинговой компании, что тогда? ПОПРОБУЙТЕ сделать это другим способом. Добавьте неудачный вариант в список плохих способов и двигайтесь дальше. Изучите книги, форумы, сайты, руководства, а затем идите и ЭКСПЕРИМЕНТИРУЙТЕ. Для этого вам даже не нужны деньги. Будьте изобретательны и находчивы. Вам нужно узнать, какой подход работает именно для вас, а не для кого-то другого. Учитесь и пробуйте. Миф №5: я не могу бросить работу — мне нужен стабильный доход Это больше похоже на реальную причину, нежели на отговорку, однако зачем мириться с существующим положением вещей? Вы действительно хотите до конца жизни каждый день на кого-то работать, соглашаясь с предложенными условиями? Нет? Ну что ж, тогда придется чем-то пожертвовать. И вы об этом знаете, иначе не читали бы эту статью! При малейшей возможности лучшее что вы можете сделать — уйти с работы и уделять 100% времени вашему стартапу. Это заставит вас сосредоточиться на продукте и сделать что-то, за что люди заплатят. Необходимость оплачивать счета и покупать еду — это очень хорошие мотиваторы. Если у вас тоже есть дети и уход с работы невозможен, вы все равно можете найти время. Просто проект займет больше времени. Смотрите «Миф №1: у вас нет времени». Все большие стартапы не делались за одну ночь. Иногда потребуются годы, чтобы чего-то достичь. Главное не сдаваться! Как только у вас появится работающий прототип, вам нужно пойти к людям, которые говорили, что идея хорошая, и узнать, что они думают о вашем продукте. Это действительно придает сил. Найдутся и те, кому ваш продукт не понравится, однако не принимайте это близко к сердцу. Учтите критику и сделайте ваш продукт еще лучше. Худшее, что может случиться, это люди, которые говорят приятные вам вещи только потому, что не хотят обидеть вас. В таком случае у вас получится заурядная вещь, которая никому не нужна. После того, как вы начали получать отзывы и привлекать пользователей, начните привлекать инвестиции в ваш проект. Просите об этом знакомых, общайтесь с бизнес-ангелами. Даже если вам не удастся убедить их вложить деньги, это еще не означает, что ваша идея плоха, это означает, что вы должны улучшить ее и привлечь больше пользователей. Если вы можете привлечь и удержать людей, значит вы чего-то стоите. В наше время необязательно иметь хорошо проинвестированный или модный проект, чтобы зарабатывать деньги! Миф №6: я не могу найти партнера Плохое партнерство — самая частая причина провала стартапов. Ссоры или партнеры, которые не вкладываются в работу, убивают дело очень быстро. Очень важно найти такого же увлеченного партнера, как и вы. Не думайте, что кто-то сразу загорится вашей идее так же сильно. Вы гораздо дольше размышляли и мечтали о ней. При обсуждении идеи критика и игра в «адвоката дьявола» приветствуются. Вы действительно думаете, что ваше мнение — это мнение всех? Поэтому приветствуйте несогласия и расхождения во взглядах, по крайней мере до тех пор, пока они не выходят за пределы конструктивной критики. Где искать хорошего партнера? Лучше всего среди знакомых вам людей. Таким образом снижается риск несовместимости, потому что вы уже знаете людей, их привычки и пристрастия. Также вам необходим тот, кто понимает, что в начале пути стартап предполагает тяжелую работу и маленькую отдачу. Участвуйте в сообществах, таких как Hacker News и Founders Mix, чтобы найти подходящих вам людей. Если недалеко от вас проходят встречи Gangplank, сходите потусите там. Послушайте, что говорят люди, и не бойтесь поделиться с ними своей идеей. Не пытайтесь угадать, что нужно людям, а СПРОСИТЕ их об этом прямо! Это глупо болтаться рядом и бояться высказать вслух свою идею, потому что «они могут украсть ее». Идеи ничего не стоят. Если вы думаете, что кто-то может реализовать ваши задумки лучше, у вас большие проблемы. А теперь возьмите и сделайте что-то, что нужно людям! ©megamozg","url":"https://stonedastronaut.github.io/vy-razrabotchik-tak-pochemu-vy-do-sikh-por-na-kogo-to-rabotaete.html","title":"Вы разработчик? Так почему вы до сих пор на кого-то работаете?","tags":"misc"},{"text":"Две минуты безделья на DoNothingFor2Minutes.com . Дождливое настроение на Rainy Mood . Спокойствие и только спокойствие на Calm.com . Просто шум на SimplyNoise . Просто дождь на SimplyRain . Вы в кафе на Coffitivity . Звуки природы на naturesoundsfor.me . Поток музыки Focus@Will , которая увеличивает внимание. Оптимистичная музыка на Get Work Done Music .","url":"https://stonedastronaut.github.io/9-rasslabliaiushchikh-saitov-dlia-podderzhaniia-spokoistviia-i-khoroshego-nastroeniia.html","title":"9 расслабляющих сайтов для поддержания спокойствия и хорошего настроения","tags":"misc"},{"text":"Сколько люди будут учиться программированию, столько будут совершать одни и те же ошибки. Существуют грабли, на которые просто невозможно не наступить. Тем не менее небольшая ошибка в начале разработки может обернуться сильной головной болью для программиста и его коллег в будущем. Хочется верить, что читатели этой статьи смогут сократить количество неверно принятых решений в ходе разработки программ до минимума. Неумение кататься на велосипедах Неожиданно, да? На самом деле мы хотели сказать, что в эпоху дот-нетов, мак буков и web 2.0 всё (ну или почти всё) уже написано. На любой более-менее популярный язык программирования — по несколько фреймворков и сред разработки, в том числе множество бесплатного, но качественного софта и огромное количество CMS'ок и движков сайтов, для коих, в свою очередь, тысячи плагинов, расширяющих их функционал. Но начинающие программисты часто либо забывают про этот факт, либо его игнорируют. Они, может быть, и понимают, что кто-то уже решил задачу, которая перед ними стоит, и предлагает решение абсолютно бесплатно, но это почему-то не останавливает их от изобретения велосипедов, которые в большинстве случаев оказываются менее качественными, чем существующие. А ведь вместо придумывания лучше найти хороший пример с открытым кодом и сосредоточиться на других задачах. Использование неподходящих средств разработки Знаете, некоторые прям-таки с гордостью заявляют, что пишут веб страницы в блокноте Windows. По их мнению, этим фактом они подчеркивают некий аскетичный стиль программирования, которому следуют, а на самом деле — еще раз демонстрируют свою глупость. Опять же, в наше время существует множество удобных сред и средств разработки, которые упрощают написание кода, заранее проверяют в нём ошибки, выдают подсказки и прочее, и прочее. Зачем пренебрегать имеющимися благами программирования? Видимо для того, чтобы сделать больше ошибок и потратить лишнее время на отладку — иных причин я не вижу. Используйте блокнот как блокнот. Вопросы, на которые уже 100 раз ответили Перед тем, как начать спрашивать что-либо на форумах и в сообществах, просто поищите ответ на свой вопрос. Если Вы начинающий программист, то наверняка кто-то до Вас уже интересовался тем, что Вам непонятно. Сначала ищите информацию в мануалах, документации, на форумах, в разделах FAQ, а только потом, в случае неудачи, спрашивайте у других. Костыли У новичков код пестрит неочевидными ходами и решениями. Некоторые из них появляются в результате того, что при тестировании программа начинает вести себя не так, как ожидается. Вместо того, чтобы докопаться до сути проблемы, неопытный программист на скорую руку начинает вставлять в код заплатки, которые уродуют программу. Доходит до смешного. Например, на сайте была форма, куда пользователь должен был ввести число от 0 до 999. Вместо того, чтобы получить из поля данные и проверить, действительно ли это число находится в заданном диапазоне, человек сделал проверку на количество символов не больше трех. В итоге в логике программы становится трудно разобраться. Ещё сложнее становится вносить изменения и расширять функционал. «Этого точно никогда не будет» Любимый прием новичка – игнорировать обработку некорректных входных данных. Мотив: «Этого точно никогда не будет». А ведь будет наверняка! Закон программистской подлости — случится именно то, чего ты не предусмотрел. Надо быть готовым, что там, где должны ввести год рождения, будут вводить все, что угодно, кроме нужных четырех цифр. При этом еще нужно придумать правильные ограничивающие условия. Некрасивый код Стоит ли говорить, что вначале многие не задумываются о длине строчек кода, размере функции, забывают о комментариях и т.д. Не задумываются в основном потому, что не имеют опыта длительной разработки, когда начинаешь понимать, что всё то, что на первый взгляд кажется мелочью, на самом деле очень важно для жизнеспособности программы в дальнейшем. Не получилось с первого раза — ищем простой путь Наверное, все за собой замечали: по какой-то непонятной причине программа работает некорректно, а в чем дело — мы никак определить не можем. Тогда мы и начинаем подставлять костыли из пункта 5. Например, есть файл с объявлениями констант и функциями, который используют разные модули программы. В одном модуле этот файл забыли включить, что в ходе выполнения привело к выводу ошибки интерпретатором о том, что не нашлась константа с таким-то именем. Вместо того, чтобы разобраться, где она объявлена и почему не нашлась, мы берем и ещё раз объявляем её в проблемном модуле. Это очень плохое решение. Не делайте так, ищите корень проблемы. Учимся на своих ошибках и не забываем: хорошо написанная программа – плюс один в карму! ©GeekBrains","url":"https://stonedastronaut.github.io/7-tipichnykh-oshibok-neopytnykh-programmistov.html","title":"7 типичных ошибок неопытных программистов","tags":"misc"},{"text":"Известный криптограф Ади Шамир с коллегами опубликовал научную работу под названием «Извлечение ключа RSA путем криптоанализа с низкой частотой дискретизации» (http://www.tau.ac.il/~tromer/papers/acoustic-20131218..). Многие компьютеры издают высокочастотный звук во время работы, из-за вибрации в некоторых электронных компонентах (конденсаторах) из-за микроскопического изменения напряжения в CPU при различной нагрузке на него. Теоретически, эти звуковые колебания можно проанализировать и получить информацию о запущенном программном обеспечении, в том числе о криптографических вычислениях. В 2004 году Шамир с коллегами доказали (http://www.cs.tau.ac.il/~tromer/acoustic/ec04rump/), что разные ключи RSA вызывают разные звуковые паттерны, но тогда было непонятно, как извлекать отдельные биты ключей. Основная проблема заключалась в том, что звуковое оборудование не способно записывать звук с достаточно высокой частотой дискретизации: всего лишь 20 КГц для обычных микрофонов и не более нескольких сотен килогерц для ультразвуковых микрофонов. Это на много порядков меньше частоты в несколько гигагерц, на которой работают современные компьютеры. Теперь удалось создать программное обеспечение, которое извлекает полные 4096-битные ключи GnuPG с компьютеров различных моделей после часа прослушивания, если компьютер все это время осуществляет дешифровку. Проведена успешная демонстрация подобной атаки при помощи смартфона, который лежал в 30 см от компьютера. При использовании направленных микрофонов атаку можно проводить с расстояния до 4 метров. Если использовать миниатюрные скрытые микрофоны, то максимальное расстояние составляет около 1 метра. Все оборудование на фотографии, кроме микрофонов, можно спрятать под стол или в другом месте. Кроме акустики, подобную атаку можно осуществлять, замеряя электрический потенциал компьютерного корпуса. Для этого соответствующим образом экипированному злоумышленнику достаточно дотронуться до корпуса голой рукой либо подключиться к контактам заземления на другом конце кабеля VGA, USB или Ethernet.","url":"https://stonedastronaut.github.io/izvlechenie-kliuchei-rsa-metodom-akusticheskogo-kriptoanaliza.html","title":"Извлечение ключей RSA методом акустического криптоанализа","tags":"misc"},{"text":"Существует такая проблема: вы хотите добавить огромный список (сотни мегабайт) или запустить поиск по регулярному выражению (grep) на нем, или совершить какую-то еще трудно распараллеливаемую операцию. У вас, вероятно, есть четыре ядра или даже больше, но наши проверенные и надежные инструменты grep, bzip2, wc, awk, sed и т.д. однопоточные и будут использовать всего одно ядро. Как сказал бы Картман, «Как мне добраться до этих ядер?» Давайте использовать все четыре ядра нашей Linux-машины с помощью GNU Parallel, небольшой map-reduce магии и малоизвестного параметра --pipes (также известного как --spreadstdin). Поверьте, удовольствие от работы прямо пропорционально количеству задействованных ядер! BZIP2 bzip2 сжимает лучше, чем gzip, но он такой медленый! К счатью, эта проблема решаема. Просто вместо этого: cat bigfile.bin | bzip2 --best > compressedfile.bz2 можно написать вот это: cat bigfile.bin | parallel --pipe --recend '' -k bzip2 --best > compressedfile.bz2 GNU Parallel особенно ускоряет bzip2 за счет работы на нескольких ядрах. Дайте ему свободу и вы будете вознаграждены. GREP Если у вас имеется огромный текстовый файл для прогона grep'ом, то лучше используйте вместо этого: grep pattern bigfile.txt вот это: cat bigfile.txt | parallel --pipe grep 'pattern' или это: cat bigfile.txt | parallel --block 10M --pipe grep 'pattern' Вторая рекомендуемая команда показывает, как использовать команду --block с 10MB данных из вашего файла. С этим параметром можно поиграться, чтобы понять, какой объем данных вы хотите обрабатывать одним ядром. Вот здесь можно посмотреть, как обрабатывать grep'ом не один файл, а несколько. AWK А вот это пример того, как с помощью awk добавить числа в очень большой файл. Вместо этого: cat rands20M.txt | awk '{s+=$1} END {print s}' попробуйте это: cat rands20M.txt | parallel --pipe awk \\'{s+=\\$1} END {print s}\\' | awk '{s+=$1} END {print s}' Здесь --pipe позволяет использовать несколько чанков для вызова awk, записывая промежуточные результаты, а которые затем сливаются в конечный. WC Хотите запустить супер-распараллеленный подсчет строк в файле? Тогда вместо этого: wc -l bigfile.txt запустите вот это: cat bigfile.txt | parallel --pipe wc -l | awk '{s+=$1} END {print s}' Вот это уже здорово. Что происходит? При распараллеленном вызове мы направляем несколько вызовов wc -l, формируя промежуточные результаты, а затем вызываем awk. SED Захотелось сделать огромное количество перемещений в большом файле? Тогда забудьте об этом: sed s&#94;old&#94;new&#94;g bigfile.txt и используйте вот это: cat bigfile.txt | parallel --pipe sed s&#94;old&#94;new&#94;g ... и затем направьте вывод в ваш любимый файл. source","url":"https://stonedastronaut.github.io/awk-sed-bzip2-grep-wc-na-vsekh-iadrakh.html","title":"awk, sed, bzip2, grep, wc на всех ядрах","tags":"misc"},{"text":"Строковый пул, или множество строк, Java располагается в области памяти, именуемой Java Heap – куча , в которой хранятся все переменные, созданные программно вашим приложением. Естественно, появление этой структуры связано с оптимизацией способов хранения строк как объектов в языке. Тип String – один из самых часто используемых в Java и довольно дорогой для хранения: 4 -символьная строка занимает 56 байт памяти, т.е. реальные данные (4 символа) занимают только 14% выделенной под объект памяти. В связи с этим возникает необходимость оптимизировать способ хранения строк в памяти виртуальной машины. Так, было решено использовать подход Flyweight ( приспособленец ): если используется множество одинаковых данных (объектов), то гораздо экономнее создать только один экземпляр, чем несколько копий. 1. Работа пула на примерах. Давайте рассмотрим следующий пример: public class StringConcatenationExample { public static void main ( String [] args ) { String str1 = \"abc\" ; String str2 = \"abc\" ; System . out . println ( str1 == str2 ); System . out . println ( str1 == \"abc\" ); } } Выводом этого фрагмента кода будет следующее: true true Как видите, str1 и str2 ссылаются на один и тот же объект (т.к. равенство == будет достигнуто только в случае равенства ссылок). Изобразить это можно следующим образом: Как видите, если вы создаете новый объект String и вручную, т.е. литерами, задаете его значение ( \"Hello, world\" ), а объект с таким значением уже есть в пуле, то новая строка не создается, а просто переменная, являющаяся указателем, ссылается на уже созданный объект с тем же значением. Равенство, естественно, проверяется методом String.equals(String) . Таким образом, строковые переменные, имеющие при инициализации одинаковые значения, будут указывать на один и тот же объект. Теперь вы понимаете, почему строки в Java являются неизменяемыми: если бы в одном потоке была создана строка, и с таким же значением в другом потоке была бы создана еще одна строка, то изменение строки в одном из потоков повлекло бы ее изменение в другом. Сравним результат выполнения предыдущего фрагмента кода с этим: public class StringConcatenationExample { public static void main ( String [] args ) { String str1 = \"abc\" ; String str2 = \"abc\" ; String str3 = new String ( \"abc\" ); System . out . println ( str1 == str2 ); System . out . println ( str1 == str3 ); } } Вывод в данном случае будет: true false т.к. объекты, на которые указывают str1 и str3 уже отличаются, ведь для создания str3 был вручную вызван конструктор ( new ), что повлекло создание нового объекта. И теперь этот объект помещается не в строковом пуле, а в \"обычном\" сегменте памяти JVM. Теперь рассмотрим такой пример: public class StringConcatenationExample { public static void main ( String [] args ) { String str1 = \"abc\" ; String str2 = \"ab\" ; str2 = str2 + \"c\" ; System . out . println ( \"str1 :\" + str1 + \", str2 :\" + str2 ); System . out . println ( str1 == str2 ); } } Вывод: str1 : abc , str2 : abc false Как было указано выше, строки в Java, как объекты, изменить нельзя. Поэтому когда в коде программы мы \"изменили\" str2 на самом деле был создан новый объект-строка с новым значением. При этом str1 , очевидно, остался указывать на тот же объект, что и раньше, поэтому равенство str1 == str2 на этот раз не выполнилось. Теперь рассмотрим код, где для конкатенации используется StringBuffer . Его использование гарантирует то, что строка находится не в строковом пуле, а в \"нормальной\" области памяти. import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class StringConcatenationExample { public static void main ( String [] args ) throws IOException { String str1 = \"abc\" ; BufferedReader bufferRead = new BufferedReader ( new InputStreamReader ( System . in )); System . out . print ( \"Type in a string :\" ); String str2 = bufferRead . readLine (); System . out . println ( \"str1 :\" + str1 + \", str2 :\" + str2 ); System . out . println ( str1 == str2 ); } } Результатом выполнения этого кода будет следующий вывод: Type in a string :abc str1 :abc, str2 :abc false Таким образом, в результате тестирования вышележащих сниппетов можно заключить, что строковые переменные будут ссылаться на один и тот же строковый объект только в том случае, если эти объекты были инициализированы одинаковыми значениями. 2. Ручное помещение строки в пул Как мы заметили, строковый пул не всегда используется автоматически. Но что же делать, если его использование может существенно уменьшить количество используемой памяти? Пусть мы создаем класс, описывающий адрес человека. Как известно, более 10 миллионов человек сегодня проживает в Москве. Представляете, как много места может занять использование отдельного объекта-строки для каждого из жителей Москвы? Для того, чтобы вручную поместить строку в пул, необходимо использовать метод String.intern() . Рассмотрим пример: String s1 = \"abc\" ; String s2 = \"abc\" ; String s3 = new String ( \"abc\" ) ; System.out.println ( s1 == s2 ) ; System.out.println ( s1 == s3 ) ; s3 = s3.intern () ; System.out.println ( s1 == s3 ) ; Результат выполнения этого кода будет представлять из себя следующий набор строк: true false true То есть вызов этого метода равносилен созданию строки, для которой значение введено заново с использованием литер. Но будьте аккуратны. До Java 7 в памяти существовала отдельная область PermGen , в которой и располагался пул, которому было отведено ограниченное количество памяти. Начиная с Java 7 , строковый пул помещается в той же области кучи, что и все остальные объекты, что делает строки доступными для сборщика мусора. Указать объем отводимой под строки памяти (которые хранятся в виде хэш-мапа) можно с использованием опции XX:StringTableSize . Так Вы, фактически, создаете свой собственный пул строк, но впрочем, не забивайте голову. ©javacodegeeks","url":"https://stonedastronaut.github.io/strokovyi-pul-java.html","title":"Строковый пул Java","tags":"misc"},{"text":"Создаём разделы физические Вот такая структура диска. /dev/sda1 -> /boot /dev/sda2 -> LVM Шифруем раздел LVM cryptsetup luksFormat -c aes-xts-plain64 -s 512 /dev/sda2 больше о параметрах шифрования см. здесь cryptsetup open --type luks /dev/sda2 lvm Создаём разделы на LVM создаём физический раздел LVM: pvcreate /dev/mapper/lvm создаём группу разделов LVM: vgcreate MyStorage /dev/mapper/lvm создаём логические разделы LVM: lvcreate -L 8G MyStorage -n swapvol lvcreate -L 15G MyStorage -n rootvol lvcreate -l +100%FREE MyStorage -n homevol форматируем разделы: mkfs.ext4 /dev/mapper/MyStorage-rootvol mkfs.ext4 /dev/mapper/MyStorage-homevol mkswap /dev/mapper/MyStorage-swapvol наконец-то монтируем mount /dev/MyStorage/rootvol /mnt mkdir /mnt/home mount /dev/MyStorage/homevol /mnt/home swapon /dev/MyStorage/swapvol подготавливаем boot mkfs.ext2 /dev/sda1 mkdir /mnt/boot mount /dev/sda1 /mnt/boot Дальше идёт обычная установка системы, до момента генерации initramfs . Для того, что бы можно было загружаться с lvm надо добавить в /etc/mkinitcpio.conf : /etc/mkinitcpio.conf: HOOKS = \"... encrypt lvm2 resume ... filesystems ...\" encrypted , lvm2 и resume должны стоять перед filesystems конфигурация загрузчика Перед генерацией конфига grub , необходимо добавить информацию о зашифрованных разделах в /etc/default/grub : ... GRUB_CMDLINE_LINUX_DEFAULT = \"quiet resume=/dev/MyStorage/swapvol\" GRUB_CMDLINE_LINUX = \"cryptdevice=/dev/sda2:MyStorage \\ root=/dev/mapper/MyStorage-rootvol\" ... Собственно всё. ссылка на оригинал","url":"https://stonedastronaut.github.io/lvm-on-luks-na-primere-arch.html","title":"LVM on LUKS на примере arch","tags":"misc"},{"text":"1. Регулярная практика программирования Постоянно программируйте, если Вы действительно хотите стать профессионалом мастером своего дела. Вы будете писать ужасные программы, но сможете подняться на новую ступень уже тогда, когда поймете, что они ужасны. Вы начнете писать по-другому, сделав выводы и переосмыслив ошибки. Вам будет казаться, что теперь Ваш код вполне хорош. Но вскоре снова возникнет понимание того, что он далек от совершенства, что разработанная архитектура громоздка и неповоротлива. И это будет новой ступенью на лестнице Вашего профессионального развития. О типичных ошибках можно и нужно читать книги, статьи в Интернете, но без реальной практики программирования, без проб и ошибок ценность этой информации будет нулевая. 2. Культура программирования Относитесь к коду разрабатываемой программы, как к собственному лицу. Выработайте правила оформления текста и постоянно придерживайтесь их. Не загромождайте текст ненужными функциями, закомментированными блоками старого кода и прочим мусором. Старайтесь постоянно улучшать качество кода, стремитесь сделать его как можно более понятным, лаконичным и концептуальным. 3. Храбрость Если Вам кажется, что от кода \"дурно пахнет\", и Вы знаете, как его улучшить, - немедленно удалите этот код и напишите заново. Да, да - именно удалите. Не надо комментировать старое ненужное барахло, думая, что оно еще когда-нибудь пригодится и сработает. Просто возьмите, удалите и напишите с чистого листа новый качественный код. 4. Вера в свои силы Иногда возникает настолько сложная проблема, что руки опускаются. Просто непонятно, что дальше делать. Не паникуйте, а порадуйтесь возможности решить сложную задачу, обогатив свой опыт. Посмотрите на ситуацию аналитически. Создайте прототип проблемы и постепенно приближайте его к самой проблеме. Например, недавно мы с коллегой мучились, пытаясь скомпилировать огромную старую систему, использующую кучу сторонних компонент на древнем компиляторе. В итоге возникала ошибка линковщика, которая не говорила нам решительно ни о чем. Мы создали новый пустой проект и постепенно стали добавлять туда модули злосчастной программы. Так мы смогли локализовать ошибку. Ну, а когда знаешь, в чем именно проблема, - решить ее становится значительно проще! Верьте в свои силы. Человек умнее машины! 5. Быть в авангарде ИТ развиваются быстро и замедляться не планируют. Можно писать замечательные консольные программы на Паскале, но только вряд ли они найдут благодарных пользователей. Все потому, что средства разработки совершенствуются постоянно. Та область, в которой сегодня Вы пионер, завтра будет использоваться повсеместно. То, что сегодня используется миллионами, завтра станет вчерашним днем, \"legacy\", \"deprecated\". Нужно постоянно держать руку на пульсе, чтобы в один прекрасный день не оказаться за бортом парохода современности. На самом деле следить за технологиями не так уж и сложно. В ИТ, как и везде, все новое – это хорошо забытое старое. Нельзя сказать, что за последние годы в программировании появилось нечто принципиально новое, кардинально отличающееся от всего известного ранее. Все, что человек придумывает, основывается на его предыдущем опыте. Секрет в том, что помимо чьих-то там технологий есть Ваш личный опыт, собственная база знаний и технический склад ума, которые от Вас никуда не денутся. И если Вы обладаете этим бесценным багажом, то оставаться в авангарде информационных технологий оказывается вовсе и не сложно. 6. Английский язык Без этого никуда. Пока все новое в сфере как программирования, так и ИТ в целом идет к нам с Запада. Самая лучшая документация, самые полезные форумы, самые интересные блоги всегда были и будут на английском языке. В ИТ индустрии английский давным-давно завоевал полное господство и перемен не предвидится. Техническую документацию придется читать любому программисту. Впрочем, нет никакой необходимости доводить свой английский до Upper Intermediate. Достаточно знать столько, сколько необходимо для работы. Программист обязан уметь читать по-английски. Говорить и писать не так критично, хотя и крайне желательно, но читать обязан. 7. Книги \"must read\" Есть литература, которая обязательно должна быть прочитана любым уважающим себя программистом. Причем читать ее лучше не один раз, а время от времени возвращаясь к некоторым главам или же перечитывая книгу целиком. Понимание многих вещей приходит только с опытом, которого на момент первого прочтения может не быть. Безусловно, прочтение такой литературы поднимает Вас, как специалиста, на новую ступень. Хороших книг много, но эти просто жемчужина литературы: \"Искусство программирования\" , Дональд Э. Кнут \"Объектно-ориентированный анализ и проектирование\" , Гради Буч \"Совершенный код\" , Стив Макконел \"Мифический человеко-месяц\" , Хилл Чапел, Фредерик Брукс \"Приемы объктно-ориентированного проектирования. Паттерны проектирования\" , Э. Гамма, Р. Хелм, Р. Джонсон, Д. Влиссилес А что читаете Вы ? ©geekbrains","url":"https://stonedastronaut.github.io/7-sovetov-dlia-professionalnogo-rosta-programmista.html","title":"7 советов для профессионального роста программиста","tags":"misc"},{"text":"Если в Вашей системе используется systemd, то логичнее не порождать сущности, а использовать те инструменты которые уже есть. Так бгомерзкий systemd в моём обиходе заменил еще и cron... Итак, для","url":"https://stonedastronaut.github.io/systemd-timer-zamena-cron.html","title":"systemd timer - замена cron","tags":"misc"},{"text":"Пост о роликовых коньках. Здесь я опишу какие стили катания существуют, и соответсвенно какие ролики выбрать под понравившийся стиль, если Вы новичёк в этом вопросе. Преамбула: независимо от того кто Вы и что Вы думаете, покупая роликовые коньки Вы должны знать, что покупка роликов это не только пара \"сапог\" с колесами, это еще и комплект защиты включая шлем. Данное требования вывел лично на собственном опыте. Лушче быть в броне, дико упасть, подняться и дальше чудить, чем валяться в больнице, просрав сезон катания, и кучу денег/времени на лечение. Минимальный рекомендуемый комплект брони: каска наколенники запястья Вопрос с влиянием погоды на катание. Безусловно мокрая дорога может стать причиной падения, сила трения между асфальтом/бетоном и колесами уменьшается => что вероятность подскользнуться растёт. Но если колеса твёрдые, и не гнать 30-40 км в час, то можно вполне скопойно рассекать по лужам. Но я не рекомендую :-) Температурный режим для катания достаточно большой: от -10°C. Но нужен асфальт или бетон. По снегу не пробовал. Основные стили: Fitness . Просто катаемся по городу/парку. Вместо ходьбы или пробежки. Не требует каких либо особых навыков. Просто ездим. FSK . Стиль катания, в котором rider ездит по городу, преодалевая любые препятсвия на своём пути, перепрыгивая их, или просто пробегая не проезжаемые участки пути. Эдакий паркур на колёсах. Здесь понадобятся достаточно сильные ноги и пресс, хотя в процессе осовения данного стиля, они сами собой прокачаются. Используются в основном 2 вида торможения: T-stop . Очень простой в исполнении, и самый важный, без уверенного исполнения данного торможения, лучше не выезжать на улицу. Parallel slide . Один из самых трудных, но самый быстрый вариант торможения. С уверенным исполнением данного слайда, можно разгонятся до скорости света, и ничего не боятся. Также учимся прыгать в длину и высоту. Для катания в этом стиле нам нужны уже хорошие ролики, с крепкой рамой и хорошими жесткими колесами, диаметром 80 мм. Именно этот стиль мне больше всех нравится. Вот пара ссылок на видео с Greg Mirzoyan, наверное лучший FSK rider: Greg Mirzoyan - London 2011 6 years with Greg Mirzoyan Agressive . Думаю название говорит само за себя. Это те самые ребята на рампах, ямах, и скользящие по перилкам. Дико травмоопасный стиль.Многие райдеры в этом стиле не признают защиту, якобы она мешает выполнять трюки, но при этом разбиваются частенько в кровь, и переломы. В этом стиле используются специальные ролики, которые слабо фиксируют голеностопный сустав, и на которых стоит специальная рама для возможности скользить по перилкам, парапетам и пр. выступам. Носим с собой парафин, иначе особо не поскользим. Ссыль на поглазеть THE 2015 XSJADO TEAM Slalom . Это когда катают вокруг конусов. Берем ролики для FSK, ставим на них колёса 76-80-80-76 (мм, для маневренности), конусы, едем в ближайший парк, или пустую парковку, и кружим вокруг конусов. Удовольствие сомнительное, на мой вгляд, но очень многим такой стиль нравится. Ссыль на поглазеть PSWC 2012' Paris Slalom World Cup PowerBlade . Не знаю как сильно он распространён, но когда я его увидел, то мне он сразу понравился. Это симбиоз FSK и Agressive , т.е. к харакетрным трюкам FSK добавляем скольжение по всяким выступам и получаем сабж. Ссыль на поглазеть PowerBlade the Waterway SpeedSkate . Этот стиль для любителей скорости. Особенность здесь заключается в роликах. Сам ботинок выглядит как футбольная бутса, а колеса ставятся большого диаметра, от 100 мм. Ссыль на поглазеть Pamplona - Puente la Reina 2014 Inline Speed Skating International Marathon Выбор роликов: Существует несколько самых распространненых производителей роликовых коньков. Настоятельно рекомендовать какой-то опрелённый не буду, потому как будущие свои ролики нужно обязательно мерить. И т.к. ноги у каждого разные Вам может подойти, то что мне не подойдет. Fitness . Да тут и выбирать собственно долго нет смысла. Подойдут любые. Главное на них потом, не начать осваивать FSK или Slalom, иначе кончится может травмами. Если твёрдо уверены, что трюкачить - это не Ваше, то можете брать любые ролики. Но я рекомендую выбирать из списка для FSK. Производители роликов для FSK, также выпускают ролики и для Fitness и др. стилей. FSK . Здесь могу выделить 3 основных производителя, и еще пару других: Seba PowerSlide Rollerblade Fila K2 Seba, PowerSlide и RollerBlade - лидеры в производстве роликовых коньков в принципе, и в частности для FSK. Из Seba порекомендую модели FR1 или High. Из моделей Rollerblade - Fusion или Twister. В моделях PowerSlide, увы, не разбираюсь. Fila - та же Seba, только сбоку, да и были скандалы, что Fila тупо копирует Seba при этом продает за такие же деньги. Хотя кому-то Fila пришлась по душе больше, чем Seba. K2 - в основном делает ролики для агрессивщиков, моделей для FSK у них не много. Agressive . USD Xsjado Razors Seba Remz тысячи их... Могу выделить из них Xsjado за их дизайн. Они выполнены очень удобно, скелет ботинка в который мы вставляем ногу, в своей обуви. И крепления сделаны удобно, что надевать и снимать ролики достаточно быстро. В общем идеал если часто надеваем, снимаем ролики. И купите Вашему любимцу рюкзак. Лично мне нравится USD рюкзак. Защита Каска - производители всё те же, что и раньше, но лично у меня TSG. Выбираем понравившийся, меряем, покупаем и наша голова в поряде. По массе выбираем в районе 300 - 450 граммов, меньше будет сдувать ветром, а больше - просто тяжело. Бронь - производители опять таки, всё те же. Но от себя могу сказать, что у Seba годная защита на запястья, а у USD удобная и прочная защита (USD делает для агрессивщиков, а здесь и уровень защиты высокий и всё очень эластично выполено. Комфорт Рекомендую приобрести носки для роликов, иначе в обычных могут возникнуть проблемы с мазолями и т.д. Из всех что довелось использовать мне и моим знакомым, самые годные носки у seba. Они потому что не просто носки, а нано-носки :-) PS: Роллер спорт достаточно экстремальный и, в зависимости от вида катания, травмоопасный. Но если Вы дружите с головой, купите защиту, и будете выполнять трюки осознавая свои силы, то травм можно избежать вовсе. Но у него есть и неоспоримые плюсы. Тренируется практически всё тело. Некоторые качки, даже сушатся именно на роликах. Человек на роликах попадает, какбы в другое измерение, он вроде уже не пешеход, но еще и не велосипедист. Хотя последних по скорости может смело уделать, даже на 80-х колёсах. пара фоток:","url":"https://stonedastronaut.github.io/rolikovye-konki-inline-skates.html","title":"Роликовые коньки (inline skates)","tags":"misc"},{"text":"Из всего, что я делаю или использую сегодня, единственное, что у меня осталось общего с моей первой работой — это написание кода. Все остальное менялось и изменялось, и изменялось снова. Если вы все время не продолжаете учиться, читать, совершенствовать свои навыки, то, в конечном счете, этот мерзкий каток позади раздавит вас окончательно. И тут ваша карьера, скорее всего, закончена. Когда я устроился на мою первую работу, я и понятия не имел, что будет дальше. В 1981 году ничего не предвещало, что все будет меняться гигантскими темпами. Люди все еще писали пакетные приложения на мэйнфреймах, везде были мини-ЭВМ с терминалами и персональные компьютеры были немногим больше, чем игрушками. Мало кто имел компьютер у себя дома, не было никакой электронной почты за пределами крупных компаний и даже это практически не использовалось. И, конечно, не было никакого Интернета. Было лишь несколько языков программирования и большинство из них были созданы в 1950 году. Было несколько журналов, которые писали о программировании и не было ничего, даже отдаленно напоминающего выставки. У меня даже были друзья, которые получили степень CS(Computer Science) и которые даже не касались ничего из того, что недавно было разработано. Люди могли получить работу программиста даже без опыта или образования, также как и я. Вы либо учились этому самостоятельно, либо, может быть, на работе. В мой первый день я почти совсем не представлял, что за всем этим стоял громыхающий монстр, который только начинал свой разбег. Мои первые два года состояли, в основном, в программировании на Fortran с небольшими вставками ассемблера. Я продолжал работать с Basic и различными диалектами ассемблера, и даже баловался с Pascal дома. Я читал все, что можно было найти, только потому, что это было интересно. Когда я попал в группу, занимавшуюся микрокомпьютерами, темп жизни неожиданно начал ускоряться. После моих усилий в написании \"яблочного\" приложения\", появился IBM PC и я должен был писать для него в Pascal. Меня попросили проверить комплект портативных Unix-боксов, которые должны были быть направлены потенциальным клиентам для проверки спецификаций F-16. Это было мое первое знакомство с C, которое и привело меня к заказу компилятора C на работу. Никто на работе не слышал о нем. В то же время я кратко ознакомился с Lisa, но при этом, понятия не имел об Object Pascal. Я видел рекламу Mac, но у нас не было ни одного, хотя я бы хотел поработать с одним из них. Когда я уволился и начал свой стартап(когда-нибудь я об этом расскажу) по созданию программы для электронных таблиц для Mac(Trapeze), мы решили сделать ее на С, хотя Apple, на тот момент, все еще предпочитали Pascal. В последующем, С оказался верным выбором, так как C господствовал в течение длительного времени (и до сих пор является основным для Linux). Примерно в то же время я прочитал знаменитый номер журнала Byte о Smalltalk и сразу же понял, что за объектами будущее, и что мне нужно немедленно разобраться в них. Сейчас я действительно начал понимать, что темпы изменений в программировании никогда уже не замедлятся снова. Даже во время конца 80-х, без интернета или электронной почты, скорость с которой появлялось что-то новое вырисовывалась все более явно. После продажи стартапа и начала консультаций по программированию на Mac, со временем мы начали DeltaGraph (это уже другая история), и я создал несколько расширений С для работы с объектами. C++ все еще не существовало, по крайней мере, юзабельного, но я хотел использовать его преимущества, поэтому я написал несколько банальных расширений, которые позволили мне собрать несколько драйверов вывода, но по-прежнему оставить только один внутренний генератор выхода. Наконец, в начале 90-х появился C++ и я уже понимал, как проектировать с применением ОО. Конечно, я по-прежнему время от времени кодил на С. В какой-то момент я прочитал о так называемом \"web\" и немного поработал с текстовым браузером и задумался над тем, куда все это приведет. В конечном итоге, я работал в Bay Area около года в середине 90-х и помню тот день, когда Netscape вышла в мир. Но даже видя это, в тот момент я совсем не понимал, какие огромные изменения должны были произойти. Мысленно возвращаясь в то время, я помню, как читал о новом языке Java и изучал его. К тому времени Интернет уже начал развиваться, он был все еще так примитивен и я не был уверен, куда все это шло, но теперь я знал достаточно, чтобы участвовать. Когда начинаются значительные изменения в мире, вы можете не знать, что будет в дальнейшем, но вы уже должны шагать в ногу с ними. Я устроился на работу в веб-консалтинговую фирму, которая специализировалась на NeXT WebObjects которые были разработана в некоем извращенном языке, называемом Objective-C. Очевидно, некоторые люди в начале 80-х как и я были очарованы C и Smalltalk, за одним исключением — они сделали настоящий язык из него. Я не только изучил этот новый язык, но нашел другой странный язык — Javascript, который имел мало общего с Java. Добавьте к этому HTML и внезапно у меня появилась совершенно новая платформа для работы. Примерно в это же время я начал встречаться с людьми, которые тоже рассказывали о других языках программирования. Оглядываясь на времена моей первой работы, я понял, что больше я не смогу знать обо всем, что происходит в программировании. Я должен был научиться сосредотачиваться на определенных моментах, и достаточно уделять внимания другим, чтобы ничего не упустить. Большой каток начал свое движение. Во время этой первой волны веб-программирования некоторые из моих друзей, которые получили CS степень, когда я только начал работать, внезапно оказались безработными, поскольку люди начали отказываться от мейнфреймов и Cobol, а они ничему не научились за прошедшее время. В отличие от меня, они были сосредоточены только на том, что они узнали и с чем работали на протяжении почти двух десятилетий, и все это вдруг исчезло. Они были раздавлены. Когда только появился Java и J2EE (ныне JEE) сначала я просто попробовал поработать с ним, а в конечном результате начал демонстрировать его остальным. Я назвал его «Чуждая Технология». Довольно скоро мы перешли на создании веб-приложений с использованием Java J2EE, именно тем примитивным, каким он был тогда. Работая в середине 00-х, я прочитал о так называемом AJAX и решил использовать его в паре внутренних приложений, которые я проектировал. Когда я упомянул об этом в команде проектировщиков, они обвинили меня в применении новых технологий! Мне пришлось объяснить, что это был простой Javascript. Они сказали мне, что Javascript умирает, что незачем тратить время на попытки сделать что-то новое с ним. А люди смешные. Теперь, когда интернет работает на всю катушку и понятие открытого исходного кода стало общеупотребительным, разверзся настоящий ад. Я даже близко не успевал за развитием всего этого. Теперь нужно было выбирать то, в чем вы будете хороши, что-то для интереса и развития и надеяться, что вы по крайней мере знаете названия всего остального. Вся эта ситуация усугубляется и по сей день, и, вообще-то, иногда даже пугает. Каждую неделю появляется еще один новый язык. Добавьте к этому все фреймворки. HTML5, CSS3 и еще больше сокращений, которые никто не сможет вспомнить все разом. Сегодня программирование является огромным водоворотом новых идей. Некоторые из них поразительны, некоторые имеют огромный потенциал, многие оканчиваются ничем. Но во всем этом море программирования вы должны выбрать правильное направление! Этот долбанный каток сейчас ускоряется и программисты работают как сумасшедшие, чтобы успевать впереди него. Мне нужно заниматься ROR или писать только приложения на JavaScript? Должен ли я учить Python или Scala? SQL или NоSQL? IOS или Android? Облака или нет? Безумный или сумасшедший, выбери свой яд сам. Вспоминая три десятилетия работы в режиме успевать-впереди-катка, я не могу поверить, как много изменилось с того момента, когда я писал Fortran на бумаге, потому что у нас было 7 человек за одним терминалом. За это время произошло много изменений, и многие люди вынуждены были стать менеджерами или заняться сетями или продавать гамбургеры. Что будет в ближайшие 30 лет, как быть? Останутся ли программисты или мы все будем раздавлены? Я не могу вспомнить ни один период в истории, когда так много менялось с такой огромной скоростью в одной отрасли. Уже нет времени передохнуть, не изучая что-то новое на тот случай, если то, что вы знаете сегодня, завтра уже устареет. Не имеет значения, 20 лет вам или 55, знаете вы что-то или совсем ничего, то, что вы сделаете сегодня, уже не будет актуально через 10-20 лет. Я наблюдал за этим раз за разом. Одним из моих любимых выражений является «Единственная вещь, которая никогда не меняется, так это возможность изменить себя». Только я думаю, что можно добавить кое-что — изменения продолжают ускоряться. И скрежещущий монстр дышит вам в затылок и топливо у него не кончается. © habrahabr","url":"https://stonedastronaut.github.io/katok-nikogo-ne-zhdiot.html","title":"Каток никого не ждёт","tags":"misc"},{"text":"Прошлой осенью работа над моими побочными проектами зашла в тупик: я практически не продвигался вперёд и у меня никак не получалось делать больше, не принося в жертву свою основную работу. В моей организации работы обнаружилось несколько серьёзных проблем. В основном я работал по выходным и иногда по вечерам. Как оказалось, это не самая лучшая для меня стратегия. Необходимость сделать за выходные как можно больше и лучше сильно давила на меня, а если мне не удавалось доделать задуманное, это ощущалось как провал. Проблему усугубляло и то, что не было никакой гарантии, что очередные выходные будут свободны, и даже если так — не факт, что я захочу кодить с утра до вечера все эти два дня — надо ведь иногда как-то развлечься или просто расслабиться. Кроме того, недельный перерыв — это слишком много, очень легко забыть, над чем ты работал и на чём остановился, даже если делать заметки. А уж если в выходные поработать не удавалось — то перерыв растягивался на две недели. Такие многонедельные переключения контекста могут быть смертельными — многие мои проекты погибли, не родившись, от такого недостатка внимания. Услышав о невероятном эксперименте Дженнифер Девальт, которая решила изучить программирование, создав 180 сайтов за 180 дней, я отважился испробовать сходную тактику: работать над побочными проектами каждый день. Я установил для себя несколько правил: Я обязан кодить каждый день. Я могу заниматься другими вещами — писать документацию или статьи в блог, но только в дополнение к работе над кодом. Это должен быть функциональный код. Возня с отступами, переформатирование, и, насколько это возможно, рефакторинг — не считаются. Я могу заниматься всем этим, но это не может быть основной частью дневной нормы. Считается только код, написанный до полуночи. Весь код должен быть открытым и публиковаться на Гитхабе. Некоторые из этих правил кажутся надуманными. Технически, нет никакой нужды писать код исключительно до полуночи, но я хотел заставить себя не засиживаться допоздна, чтобы код не был грязным. Также не обязательно публиковать всё написанное на Гитхабе. Мне это правило было нужно, чтобы внимательней относиться к коду — как можно раньше задумываться о повторном использовании или модульности. Эта тактика оказалась очень эффективной, и сейчас приближается уже двадцатая неделя непрерывной работы. Я захотел написать об этом, так как это полностью изменило мой стиль работы и сильно повлияло на мою жизнь и душевное состояние. Эти изменения в рабочих привычках принесли множество интересных результатов: Минимальный рабочий код. Мне пришлось выделять для работы над кодом не меньше получаса в день. Очень трудно написать что-то осмысленное за меньшее время, особенно учитывая, что приходится вспоминать, на чём остановился вчера. Иногда мне удавалось поработать чуть больше (но обычно не больше часа), а по выходным бывало, что и весь день. Программирование как привычка Думаю, что это самый важный итог моего эксперимента: главное, чтобы вы хотели что-то изменить для себя, а не произвести своей работой внешнее впечатление на кого-то другого. То же самое верно и для любой диеты или физических упражнений: вам никогда не добиться успеха, если вы делаете их не для себя самого. Победа над тревогой До начала своего эксперимента я часто чувствовал сильное беспокойство от того, что не успел сделать «достаточно» работы, или продвинуться «достаточно» далеко (хотя измерить эту «достаточность» я не мог, так как у побочных проектов не было конкретных дедлайнов). Я понял, что ощущуение прогресса в работе настолько же важно как и сам прогресс. У меня открылись глаза! Как только я начал стабильно продвигаться вперёд каждый день, вся моя тревога постепенно растаяла. Я был удовлетворён объёмом сделанной работы и больше не испытывал одержимости сделать как можно больше в один присест. Выходные Работа по выходным раньше была ключевым способом добиться заметного прогресса в побочных проектах, так как это было единственное время, когда я успевал как следует продвинуться. Теперь выходные уже не так важны — и это очень хорошо. Планы и ожидания, копившиеся целую неделю, чаще всего приводили только к разочарованиям. Мне редко удавалось сделать всё, что я задумал, и это заставляло меня в следующие выходные отказаться от развлечений — сходить в кафе или в музей, погулять в парке или провести время с девушкой. Как бы ни были важны для вас побочные проекты, они не должны занимать всю жизнь. Фоновая обработка Интересный побочный эффект от регулярной ежедневной работы над проектом заключается в том, что ваш разум начинает работать над ним и в фоновом режиме. Очень часто, когда я просто иду по улице, или принимаю душ, или занимаюсь чем-то ещё, что не требует умственных усилий, я думаю над тем, что мне предстоит сделать, и часто нахожу решение текущих проблем. Такого не было, когда я программировал лишь раз в неделю. В течение недели голова была занята другими задачами, или вообще беспокойством по поводу того, что я никак не успеваю поработать над побочным проектом. Переключение контекста Каждый раз, возобновляя работу над побочным проектом, приходится тратить время на переключение контекста. К сожалению, после недельного перерыва это переключение идёт с большим трудом. Ежедневная работа в этом смысле гораздо эффективнее, так как перерывы гораздо меньше, и восстановить контекст можно гораздо быстрее. Управление временем Один из самых важных для меня аспектов эксперимента — я научился лучше распределять время между работой, побочными проектами и остальной жизнью. Зная, что мне придётся сделать хоть немного ежедневно, я просто обязан был научиться лучше планировать свой день. Если у меня были другие планы на вечер, мне приходилось переносить работу над проектом на более раннее время, до начала основной работы. Если я не успел поработать, но задерживался где-то, мне приходилось вернуться домой пораньше, чтобы успеть закончить, вместо того, чтобы просто пропустить день. Признаюсь, у меня стало оставаться меньше времени на хобби (гравюры укиё-э и другое), но тут уж ничего не поделаешь, приходится выбирать. Внешнее восприятие Ещё один плюс появляется, когда твои близкие привыкают к твоим новым правилам. Моя девушка понимает, что я должен хоть немного поработать над проектами каждый день, и другие дела иногда приходится планировать с учётом этого. Очень приятно, когда ты можешь сказать «Да, мы можем пойти прогуляться (сходить в кино и т.п.) но после этого мне надо закончить работу» — и знать, что к этому отнесутся с пониманием. Сколько кода я написал? Мне с трудом верится в то, насколько много я успел написать за последние несколько месяцев. Я сделал пару сайтов, переписал несколько фреймворков и написал кучу новых модулей для Node. Я сделал настолько много, что иногда даже не помню всё, что я написал — то, что было всего несколько недель назад, кажется далёким прошлым. Я чрезвычайно удовлетворён объёмом проделанной работы. Я считаю, что мой эксперимент прошёл с огромным успехом и хочу придерживаться новых привычек настолько долго, насколько смогу. Я настоятельно рекомендую эту тактику всем, кто хочет как следует продвинуться в своих побочных проектах. Если попробуете, дайте мне знать, сработало это для вас или нет — мне очень интересно услышать как можно больше реальных историй. ©habrahabr","url":"https://stonedastronaut.github.io/dzhon-rezig-pishite-kod-kazhdyi-den.html","title":"Джон Резиг - Пишите код каждый день","tags":"misc"},{"text":"Залог успеха в программировании - это регулярные занятия. Мы собрали самые полезные советы о том, как побороть прокрастинацию и мотивировать себя в обучении. Но, недостаток мотивации часто приводит к тому, что находятся более \"важные\" дела, а программированию уделяется всё меньше времени. Многие новички забрасывают занятия, так и не получив ощутимых результатов. Мы собрали самые полезные советы пользователей Quora, среди которых много практикующих программистов, о том, как побороть прокрастинацию и мотивировать себя в обучении: —Nathan Burchfield, IT Administrator and Developer Окружите себя контентом, связанным с программированием. Подпишитесь на тематические блоги и Twitter. Поделитесь своими идеями с близкими друзьями или семьей. Иногда, когда вы получаете положительные отзывы от других, это мотивирует настолько, что потом сложно оторваться от экрана компьютера. Программируйте не отвлекаясь в течение 2-х минут. Скорее всего, произойдет эффект снежного кома и вы продолжите кодить. Покажите свой код другим. Если вы знаете, что люди могут его видеть, то, как правило, будете держать его актуальным и чистым. Я поставил на заставку рабочего стола такую картинку. Это первое, что я вижу, когда сажусь за компьютер, отлично помогает направить свою деятельность в нужное русло: —Juan Gallardo, Ruby programmer Хитрость заключается в том, чтобы найти проекты, которые мотивируют. И не имеет никакого значения, что это будет. Кошачий блог, социальная сеть для мопсов и т.д. Просто найдите то, что вас увлекает или заставляет смеяться и работайте над этим. Например, я сделал Myspace для кошек. —Nikith Shetty Посмотрите какую-то научную фантастику или фильм про секретных агентов наподобие \"Миссия невыполнима\", где видно, на что способны хакеры. Или \"Социальную сеть\" и вдохновитесь тем, как Марк Цукерберг за одну ночь укладывает сервера Гарварда. —M.Santhosh Kumar По моему опыту, новички начинают программировать по двум причинам: обучение развлечение В первом варианте они часто сдаются из-за скуки и путаницы. Те же, кто начинает знакомство с программированием в качестве развлечения, чаще всего углубляются и начинают уделять ему всё больше времени. Они-то на самом деле начинают учиться. Программирование проще всего изучать тогда, когда вы делаете это в последнюю очередь. Учитесь играючи. —Laveena Bachani, CS graduate Программирование, как видеоигра. Нужно несколько шагов, чтобы разобраться в правилах. Когда концепция понятна, то пробуешь выиграть, но это редко получается с первого раза. Это вызов. Это заставляет играть до победного конца. Медленно, но верно вы подбираетесь к секретной формуле успеха, разбираетесь в тактике и овладеваете ей в совершенстве. То же самое с программированием. Нужно побеждать. Вы отлаживаете код, но он опять выдает ошибку, опять отлаживаете, опять ошибки. Но в определенный момент вы находите решение! —Abir Bhattacharyya, Software Engineer and Statistical Data Analyst Я бы всё время валялся на диване, ел мороженое, пиццу и леденцы. Почему я, всё таки, выбираю программирование? Потому что, занимаясь им, я могу заслужить любовь, заработать деньги, наслаждаться созданием крутых вещей, радоваться тому, что люди используют мои крутые вещи… и обеспечить своим кошкам счастливую жизнь. —Raghav Yadav Любопытство - это ключ. Думаю, что будущее за программированием. Не могу представить мир без него. Я часто пишу код большую часть рабочего дня и потом программирую в свободное время для себя. Это моя мотивация. Один из примеров - я написал приложение для настройки субтитров во время просмотра фильма на тот случай, если они не соответствуют звуковому ряду. Похожие небольшие утилиты помогают решать надоедливые проблемы. Программирование это прекрасно! —Puneet Khanduri, Platform Engineer at Twitter Программирование - это возможность воплотить идеи в реальность. Это самая сильная мотивация для большинства программистов. —Christopher Reiss Закройте социальные сети. Никаких \"я только проверю сообщения\". Тусуйтесь с теми, кто тоже кодит. Такое общение - это отличный способ оставаться \"в теме\", будь это профессиональный юмор или обсуждение серьезных вопросов. Помогает музыка. Что-нибудь атмосферное, чтобы не отвлекало, а, наоборот, настраивало на нужный лад. Если совсем трудно сконцентрироваться, возможно, нужно посоветоваться с врачом на предмет синдрома дефицита внимания. Некоторым очень умным людям отлично помогли препараты, улучшающие концентрацию. Спросите себя: программирование - это мое? Мне действительно это нравится? Если нужно каждый раз прилагать геркулесово усилие, чтобы заниматься им, то, возможно, это не ваше. Это нормально, большая ошибка насиловать себя, занимаясь тем, что не вызывает особого желания. —Raphael John Скажу только одно: \"Мастерство начинается с небольших шагов\". —Hridesh Kumar Цель стать хорошим программистом должна быть краткосрочной, нужно представлять более масштабную картину того, кем вы хотите видеть себя через 5 лет. —Jaime López, Programmer, Code Designer Меня мотивирует создание собственных видеоигр в качестве развлечения. —Gene Sewell, Programmer, designer, wanderer Мотивация растет тогда, когда вы видите результат своих стараний. Но если вы, на самом деле, не очень заинтересованны в программировании, то не получите отдачи от достигнутого. Важно выбрать такой род деятельности, где результат будет иметь для вас большую ценность. —Yu LongYing, c++ programmer Попробуйте сделать какую-нибудь интересную штуку, которая привлечет внимание вашей девушки/парня. Помните, гордость - это ваша мотивация, а упорство - залог успеха. —Deepankur Singh Честно говоря, меня мотивирует большая зарплата, которая у программистов достаточно высока. —Douglas Walter, Full Stack Developer Когда я чувствую себя инертным, мне нравится переключаться и фокусироваться некоторое время на другом языке. Кроме того, ничто так не заводит, как работа над чем-то своим и тем, во что ты веришь. Резюмируя, можно сделать вывод, что все блестящие достижения в программировании - это результат кропотливой работы шаг за шагом. Возьмите курс на нечто большее, чем обучиться программированию, и день за днем, следуя этому курсу, мотивируйте себя делать небольшие шаги. Вам будет гораздо проще, если слово \"работа\" заменить на \"развлечение\". Сложно назвать работой или учебой то, что всецело захватывает, как любимая игра. Линус Торвальдс, создатель Linux, утверждает: \"большинство хороших программистов делают свою работу не потому, что ожидают оплаты или признания, а потому что получают удовольствие от программирования\". Научитесь получать удовольствие - это лучшая мотивация. ©geekbrains","url":"https://stonedastronaut.github.io/kak-podderzhivat-motivatsiiu-dlia-zaniatii-programmirovaniem.html","title":"Как поддерживать мотивацию для занятий программированием?","tags":"misc"},{"text":"Данный пост представляет собой выдержку «золотых правил» из примечательной книги Питера Гудлифа «Ремесло программиста» . Глава 1. Держим оборону Не делайте никаких допущений. Не зафиксированные формально допущения часто служат причиной отказов, особенно с ростом объема кода. Чем больше спешки, тем меньше скорость. Всегда думайте, что вы собираетесь ввести с клавиатуры. Не верьте никому. Кто угодно, включая вас самих, может сделать ошибки в логике вашей программы. Ко всем входным и выходным данным относитесь с подозрением, пока не проверите, что они допустимы. Предупреждения компилятора помогают выявить массу глупых ошибок. Всегда включайте их вывод. Держитесь того, чтобы ваш код компилировался молча. Берегите все ограниченные ресурсы. Тщательно организуйте их захват и освобождение. Глава 2. Тонкий расчет Поймите, кто реально станет читать ваш исходный код: другие программисты. Пишите с расчетом на них. Выясните, какие стандарты кода есть для выбранного вами языка, и освойте каждый из них на практике. Оцените преимущества и недостатки каждого. Выберите какой-то один правильный стиль кодирования и придерживайтесь его постоянно. Если в вашей группе принят некий стандарт кодирования, придерживайтесь его. Свой собственный излюбленный стиль оставьте в стороне. Скажи «нет» религиозным войнам. Не вступай в них. Отойди в сторону. Глава 3. Что в имени тебе моем? Учитесь давать объектам прозрачные имена — они должны ясно описывать то, что за ними скрывается. Чтобы придумать хорошее имя, главное — четко понимать, для кого оно предназначено. Только в этом случае имя может стать осмысленным. Если не удается придумать хорошее имя объекту, спросите себя, понятно ли его назначение. Изучите правила образования имен в языке, с которым работаете. Еще важнее изучить идиомы этого языка. Есть стандартные способы формирования имен? Вот ими и пользуйтесь. Ясность имени предпочтительнее его краткости. Следует учитывать относительные достоинства коротких и длинных имен, особенно в зависимости от области действия переменной. Предпочтительней такое правило именования, которое различает имена переменных и имена типов. Давайте функциям имена с внешней точки зрения, в виде фраз, выражающих действия. Описывайте логическую операцию, а не способ реализации. Избегайте в именах лишних слов. В частности, в именах типов — таких слов, как class, data, object и type. Давайте пространствам имен и пакетам имена, логически связанные с содержимым. Макросы в С/С++ всегда выделяют прописными буквами, чтобы сделать хорошо заметными, и тщательно выбирают их имена, чтобы избежать конфликтов. Никогда не выделяйте прописными буквами другие объекты. Выберите единообразную системы именования и последовательно применяйте ее. Степень необходимой детализации имени зависит от контекста его применения. Создавая имена, учитывайте контекстную информацию. Глава 4. Литературоведение Не пишите код, который нуждается во внешней документации. Он ненадежен. Пишите такой код, который понятен без посторонней документации. Пишите код, который может прочесть нормальный человек, причем без напряжения. Компилятор как-нибудь справится. Избегайте волшебных чисел. Пользуйтесь именованными константами. Важный участки кода должны выделяться на общем фоне и быть легко читаемыми. Спрячьте все, что не должно интересовать клиентов. Старайтесь группировать родственную информацию. Делайте эту группировку наглядной с помощью средств языка. Не выводите бессмысленных сообщений об ошибках. В зависимости от контекста представьте наиболее уместную информацию. Помещайте в код комментарии только в том случае, если не удается облегчить его понимание иными способами. Пользуйтесь инструментариями грамотного документирования для автоматической генерации документации по вашему коду. Глава 5. Заметки на полях Учитесь писать ровно столько комментариев, сколько необходимо. Отдайте предпочтение качеству, а не количеству. Не пожалейте труда, чтобы ваш код не требовал поддержки в виде уймы комментариев. Хорошие комментарии объясняют «почему», а не «как». Один источник для каждого факта. Не копируйте код в комментариях. Обнаружив, что вы пишете многословные комментарии, описывающие ваш код, остановитесь и задумайтесь. Не признак ли это того, что существует некая проблема более высокого порядка? Думайте, что пишете в комментариях; не давите бездумно на клавиши. Прочтите комментарий снова в контексте кода. Ту ли информацию он содержит? Комментарии — часть повествования кода. Размещайте их так, чтобы порядок чтения был естественным. Снабжайте каждый файл исходного кода прологом в виде комментария. Комментарии должны касаться настоящего, а не прошлого. Не описывайте того, что претерпело изменения, и не рассказывайте о том, что было раньше. Если вы изменили код, проверьте правильность комментариев, находящихся рядом с ним. Глава 6. Людям свойственно ошибаться Обработка ошибок — дело серьезное. От нее зависит стабильность вашего кода. Не оставляйте сбойную ситуацию без внимания. Если вы не знаете, как справиться с проблемой, сигнализируйте об отказе вызвавшему коду. Не заметайте мусор под ковер в надежде, что все как-нибудь обойдется. Никогда не пренебрегайте поступающими вам сообщениями об ошибках. Если существует канал для сообщений об ошибках, значит, для этого есть причины. Обрабатывайте все ошибки в наиболее благоприятном контексте, когда становится ясно, как корректно с ней справиться. Игнорирование ошибок не экономит вашего времени. Вы потратите больше времени на выяснение причин некорректного поведения программы, чем вам понадобилось бы для написания обработчика ошибок. Если вы пишете код, который может отказать, одновременно с ним пишите код для обнаружения и обработки ошибок. Не откладывайте это на будущее. Если вы все же вынуждены отложить обработку, по крайней мере, напишите оснастку для обнаружения ошибок. Глава 7. Инструментарий программиста Изучите свои стандартные инструменты вдоль и поперек. Время, которое вы потратите на их изучение, незамедлительно окупится. Относитесь к инструментам программирования прагматически; пользуйтесь ими, только если они облегчают вашу жизнь. Узнайте, какие виды инструментов существуют. Выясните, где их можно взять, даже если в данный момент они вам не нужны. Для каждой задачи есть свой инструмент. Не стоит щелкать орехи кувалдой. Следите за выпуском новейших версий своего инструмента, но проявляйте осторожность при обновлении. Выбор редактора кода имеет решающее значение; он оказывает огромное влияние на то, как вы будете писать код. Выучите несколько языков. В каждом вы обнаружите особый способ решения задач. Рассматривайте их как набор инструментов и выбирайте тот, который наиболее эффективен в конкретной ситуации. Глава 8. Время испытаний Тестирование может вскрыть только наличие ошибок. Оно не может доказать отсутствие неисправностей. Не поддавайтесь ложному чувству спокойствия, если код прошел ряд неадекватных тестов. Тестируйте каждый написанный вами фрагмент кода. Не рассчитывайте, что кто-то другой сделает это за вас. Чтобы сделать тестирование эффективным, его нужно начинать заранее, когда выявляемые ошибки еще не могут принести большого вреда. Тестовый код можно писать раньше, чем рабочий! Пишите тесты для всех выявленных ошибок. Прогоняйте свои тесты как можно чаще. Читая код, очень легко обмануться и поверить, что он работает правильно. Если вы написали код, то при его чтении вы будете видеть то, чтособирались написать, а не то, что написали на самом деле. Учитесь читать код с циничным недоверием. Напишите полный набор тестов, каждый из которых будет проверять определенный аспект кода. Пятнадцать тестов, которые демонстрируют одну и ту же ошибку, менее полезны, чем 15 тестов, демонстрирующих 15 разных ошибок. Архитектура кода должна облегчать его тестирование. Насколько это возможно, автоматизируйте тестирование кода. Это быстрее и проще, чем выполнять тесты вручную, и гораздо надежнее: более вероятно, что тесты станут выполняться регулярно. Выполняйте тестирование автоматически в ходе процедуры сборки. Глава 9. Поиск ошибок Компилируйте код при включенном выводе компилятором всех предупредительных сообщений. Тем самым вы обнаружите потенциальные проблемы раньше, чем столкнетесь с ними реально. Следуйте золотому правилу отладки: думать головой. Установите разумное временное ограничение на «бессистемную» отладку, и если она окажется безуспешной, переходите на более методичный способ. Изучите отлаживаемый код — трудно найти ошибки в коде, который вам непонятен. Когда вы ищете ошибку, неверьте никому. Проверьте самые невероятные причины, вместо того чтобы сходу отвергнуть их. Не принимайте ничего на веру. Если сборка продукта не прошла, смотрите на первую ошибку компилятора. Последующие сообщения заслуживают гораздо меньше доверия. Отладка — это методичная работа, медленно сужающая кольцо вокруг места нахождения ошибки. Не следует относиться к ней как к игре в укадайку. Первый шаг на пути установления места ошибки — это определение способа ее уверенного воспроизведения. Начните с известного места, например, с точки аварийного завершения программы. Затем двигайтесь в обратном направлении в сторону причины, вызвавшей сбой. Если вам показалось, что вы нашли причину ошибки, досконально исследуйте ее и убедитесь, что не ошиблись. Не принимайте безрассудно первую же гипотезу. Отладка заканчивается лишь тогда, когда вы докажете, что ошибка устранена и проблема решена навсегда. Проявляйте крайнюю осторожность при исправлении ошибок. Следите, чтобы ваша модификация не покалечила ничего остального. Исправляя ошибку, проверьте, не повторяется ли она в близких разделах кода. Уничтожьте ошибку раз и навсегда: исправьте все ее дубликаты немедленно. Из каждой исправленной ошибки делайте выводы. Можно ли было ее избежать? Можно ли было обнаружить ее быстрее? Столкнувшись с поведением, которое вы не можете объяснить, умеренно пользуйтесь отладчиками. Не привыкайте к тому, чтобы сразу бросаться на них, не попытавшись сначала понять, как работает ваш код. Глава 10. Код, который построил Джек Считайте систему сборки частью дерева исходного кода и ведите их совместно. Они тесно связаны между собой. Все программисты, участвующие в проекте, должны пользоваться единой системой сборки. Иначе все они будут собираться разные программные пакеты. Правильная система сборки позволяет многократно создавать физически идентичные бинарные файлы. Вы должны быть в состоянии достать дерево исходные кодов трехлетней давности и правильно собрать его заново. Правильная система выглядит как одна операция. Достаточно нажать кнопку или выполнить одну команду. Для каждого правила сборки напишите соответствующее правило чистки, которое отменяет всю операцию. Организуйте автоматическую процедуру сборки своего программного продукта. Проверяйте с ее помощью работоспособность вашего кода. Финальные сборки всегда выполняются из чистого исходного кода. Позаботьтесь, чтобы потом всегда можно было получить этот чистый исходный код из архива или системы управления версиями. Проводите тестирование финальной конфигурации своего приложения, а не только рабочих сборок.Небольшие различия между ними могут отрицательно сказаться на поведении кода. © habrahabr Продолжения: здесь","url":"https://stonedastronaut.github.io/remeslo-programmista-zolotye-pravila.html","title":"Ремесло программиста. Золотые правила","tags":"misc"},{"text":"Вы, наверное, уже знаете, что интервью — это не просто очередной этап при устройстве на работу, это также ваша возможность разобраться, подходит ли вам эта работа. Для этого важно задать некоторые вопросы. Что вы хотите знать об этой должности? О компании? О подразделении? О команде? О корпоративной культуре? Задавать вопросы бывает сложно. Мы это знаем. Для того, чтобы упростить вам это задание, мы приводим список ключевых вопросов для интервью. Мы определённо не рекомендуем задавать их все. Пожалейте рекрутера! Когда в конце интервью или его части вас спрашивают: «Итак, есть ли у вас к нам вопросы?», то обязательно воспользуйтесь данным списком (попробуйте восстановить в памяти), чтобы убедиться, что вы охватили все интересующие вас моменты и показали ваш профессионализм. Работа в целом Сначала убедитесь, что это именно то, чем вы хотите заниматься изо дня в день в обозримом будущем. Как выглядит типичный рабочий день? Что из себя представляют проекты, которыми необходимо будет заняться в первую очередь? Можете ли показать мне примеры проектов, над которыми я буду работать? Какие навыки и какой опыт вы ищете в идеальном кандидате? Что необходимо для того, чтобы стать действительно успешным на этой должности? Какие виды навыков отсутствуют в команде, которые вы хотите получить, наняв нового сотрудника? Какие самые большие проблемы, с которыми предстоит столкнуться человеку на этой позиции? Каков уровень бюджета, с которым мне предстоит работать? Это новая роль в компании? Предполагаете ли Вы, что основной круг обязанностей для этой должности изменится в ближайшие полгода-год? Обучение и профессиональное развитие Думайте о каждой новой работе не просто как о работе, а как о следующем шаге на пути к карьерному (или какому-либо иному) успеху. Как эта должность поможет вам его добиться? Как я буду обучаться? Какие учебные программы доступны для ваших сотрудников? Какие существуют возможности карьерного роста и профессионального развития? Смогу ли я представлять компанию на отраслевых конференциях? Куда перешёл предыдущий работник, ранее занимавший эту должность? Как продвигались успешные сотрудники, ранее занимавшие эту должность? Оценка вашего труда Убедитесь, что вы понимаете, какие цели перед вами будут поставлены и то, как ваша работа будет оцениваться. Какие наиболее важные вещи, по вашему мнению, я должен буду сделать за первые 30, 60 и 90 дней работы? Какие результаты от человека на данной позиции ожидаются в течение первых 12 месяцев? Расскажите про систему оценки эффективности деятельности сотрудников в компании. Как часто данный процесс происходит? По каким показателям моя деятельность будет оцениваться? Интервьюер Задавая вопросы интервьюеру вы показываете, что заинтересовались им как человеком, а это отличный способ наладить контакт. Только давайте без комплиментов и лести. Как давно вы работаете в этой компании? Как ваша роль изменилась с тех пор? Чем вы занимались до этой работы? Почему вы устроились в эту компанию? Что вам больше всего нравится в работе здесь? Компания в целом Вы не просто работаете на вашего босса или на ваш отдел, вы работаете \"на\" и \"с\" всей компанией в целом. Я читал о том, как была основана компания, но был бы благодарен, если бы вы смогли рассказать мне больше? Какой вы видите эту компанию в ближайшие несколько лет? Что вы можете рассказать мне о вашей новой продукции и/или планах роста? Каковы главные цели компании в настоящий момент и как она работает над их достижением? Что вас больше всего воодушевляет в будущем компании? Команда Люди, с которыми вам предстоит работать изо дня в день, могут действительно влиять на вашу работу, на желание вставать по утрам и даже на вашу эффективность. Задайте несколько вопросов, чтобы определить, насколько это подходящая для вас команда. Можете ли вы рассказать мне о команде, в которой я буду работать? С кем я буду работать наиболее тесно? Кому я буду непосредственно подчиняться? Можете ли вы рассказать мне о моих прямых подчинённых? Каковы их сильные и слабые стороны? Планируете ли вы нанимать ещё людей в это подразделение в ближайшие шесть месяцев? С какими подразделениями компании придется взаимодействовать чаще всего? Какие общие карьерные перспективы в этом подразделении? Культура Соблюдается в офисе дресс-код или нет? Есть ли жизнь вне офиса? и т.д. Узнайте тонкие, но такие важные детали корпоративной культуры. Какова культура компании в целом и команды в частности? Какие главные аспекты вы могли бы выделить? Как бы вы описали рабочую среду здесь, это, как правило, работа в команде или по одиночке? Можете ли вы рассказать мне о последнем совместном командном мероприятии? Какие у компании миссия и ценности? (Примечание: убедитесь, что данную информацию невозможно \"загуглить\" — в таком случае не задавайте этот вопрос). Какая ваша любимая офисная традиция? Что вы обычно делаете во время обеденного перерыва? (Конечно, помимо самого обеда). Собираются ли сотрудники компании/команды вне офиса? Вы когда-нибудь организовывали совместные мероприятия с другими компаниями или отделами? Что отличает работу здесь от других мест, где вы работали? Как изменилась компания с момента вашего прихода? Следующие шаги Перед уходом убедитесь, что интервьюер получил всю необходимую ему информацию. Для того, чтобы выяснить, как будут развиваться события дальше, задайте эти вопросы. Насколько, по вашему мнению, моя квалификация соответствует данной роли? Каковы следующие шаги по процессу рассмотрения на данную позицию? Что ещё с моей стороны может понадобиться? Могу ли я ответить на какие-либо ещё интересующие вас вопросы? ©megamozg","url":"https://stonedastronaut.github.io/52-voprosa-kotorye-vy-dolzhny-zadat-na-sobesedovanii.html","title":"52 вопроса, которые вы должны задать на собеседовании","tags":"misc"},{"text":"Собственно копипаста отсюда вместо netstat используем ss : ss -lpn вместо ifconfig используем ip addr : Раньше для вкл/выкл определенного интерфейса использовали ifconfig eth0 up теперь так: ip link set dev eth0 up Для конфигурирования интерфейса: ifconfig eth0 10.0.0.2/16 теперь: ip addr dev eth0 add 10.0.0.2/16 вместо ps aux | grep ... используем pgrep -af ps aux | grep rtorrent теперь: pgrep -af rtorrent","url":"https://stonedastronaut.github.io/novye-komandy-v-linux-dlia-starykh-reshenii.html","title":"Новые команды в Linux для старых решений","tags":"misc"},{"text":"Связи в sqlachemy бывают 4-х видов: OTM (one-to-many) - один к многим MTO (many-to-one) - многие к одному OTO (one-to-one) - один к одному MTM (many-to-many) - многие к многим Релизация этих связей: OTM : Для указания связи OTM, создается колонка с ForeignKey в дочернем классе. При этом сама связь (relationship()) объявляется в Родителе. Для того что-бы получить по Ребенку Родителя, необходимо указать в relationship, свойство backref. class Parent ( Base ): __tablename__ = 'parents' id = Column ( Integer , primary_key = True ) child = relationship ( \"Child\" , backfer = 'parents' ) class Child ( Base ): __tablename__ = 'childrens' id = Column ( Integer , primary_key = True ) parent_id = Column ( Integer , ForeignKey ( 'parents.id' ) MTO : Здесь построение отношения похоже на предыдущий, только ForeignKey указывается в Родителе, вместе с relationship() class Parent ( Base ): __tablename__ = 'parents' id = Column ( Integer , primary_key = True ) child_id = Column ( Integer , ForeignKey ( 'childs.id' )) child = relationship ( \"Child\" , backref = 'parents' ) class Child ( Base ): __tablename__ = 'childs' id = Column ( Integer , primary_key = True ) OTO : Со связью один-к-одному вообще всё просто, это та же связь один-к-многим, только в relationship добавляется еще одно свойство, которое вытягивает из другой таблицы только 1 элемент class Parent ( Base ): __tablename__ = 'parents' id = Column ( Integer , primary_key = True ) child = relationship ( \"Child\" , uselist = False , backref = 'parents' ) class Child ( Base ): __tablename__ = 'childs' id = Column ( Integer , primary_key = True ) parent = Column ( Integer , ForegnKey ( parents . id )) Или class Parent ( Base ): __tablename__ = 'parents' id = Column ( Integer , primary_key = True ) child_id = Column ( Integer , ForeignKey ( 'childs.id' )) child = relationship ( \"Child\" , backref = backref ( \"parents\" , uselist = False )) class Child ( Base ): __tablename__ = 'childs' id = Column ( Integer , primary_key = True ) MTM : Данная связь реализуется при помощи вспомагательной ассоциативной таблицы, которую необходимо создать до создания связанных таблиц. association_table = Table ( 'association' , Base . metadata , Column ( 'left_id' , Integer , ForeignKey ( 'left.id' )), Column ( 'right_id' , Integer , ForeignKey ( 'right.id' )) class Parent ( Base ): __tablename__ = 'left' id = Column ( Integer , primary_key = True ) children = relationship ( \"Child\" , secondary = association_table ) class Child ( Base ): __tablename__ = 'right' id = Column ( Integer , primary_key = True ) стырено из официальной документации с вольным переводом оф.документация","url":"https://stonedastronaut.github.io/postroenie-sviazei-v-sqlalchemy.html","title":"Построение связей в SQLAlchemy","tags":"misc"},{"text":"Для выкачки сайта при помощи wget над использовать сл ключи: wget -r -k -l 7 -p -E -nc http://site.com/ -r — указывает на то, что нужно рекурсивно переходить по ссылкам на сайте, чтобы скачивать страницы. -k — используется для того, чтобы wget преобразовал все ссылки в скаченных файлах таким образом, чтобы по ним можно было переходить на локальном компьютере (в автономном режиме). -p — указывает на то, что нужно загрузить все файлы, которые требуются для отображения страниц (изображения, css и т.д.). -l — определяет максимальную глубину вложенности страниц, которые wget должен скачать (по умолчанию значение равно 5, в примере мы установили 7). В большинстве случаев сайты имеют страницы с большой степенью вложенности и wget может просто «закопаться», скачивая новые страницы. Чтобы этого не произошло можно использовать параметр -l. -E — добавлять к загруженным файлам расширение .html. -nc — при использовании данного параметра существующие файлы не будут перезаписаны. Это удобно, когда нужно продолжить загрузку сайта, прерванную в предыдущий раз. --no-parent - не скачивать выше указанного каталога/ссылки. стырено отсюда Некоторые сайты, например мне попался один вики-сайт, который таким образом выкачиватся не желал. Для такого сработала такая комбинация ключей: wget -k -p -r -l 1 --restrict-file-names = nocontrol,windows --html-extension \\ -e robots = off http://tralala.com Скорее всего это связано с шаблоном ссылок внутри сайта, http://.../index.php@some_page, но я не проверял.","url":"https://stonedastronaut.github.io/kak-vykachat-sait-wget.html","title":"Как выкачать сайт. wget","tags":"misc"},{"text":"Для подсчета DPI воспользуемся формулой: c&#94;2 = a&#94;2 + b&#94;2 где c - дагональ экрана умноженая на DPI (inch * dpi), a и b - стороны экрана в пикселях. отсюда следует: (inch * dpi)&#94;2 = a&#94;2 + b&#94;2 отсюда вывести dpi, думаю ниукого не составит труда.","url":"https://stonedastronaut.github.io/kak-poschitat-plotnost-pikselei-dpi.html","title":"Как посчитать плотность пикселей (DPI)","tags":"misc"},{"text":"Здесь я опишу способы проверки hdd, стыренные из других источников, которые мне очень помогли понять, почему у меня тупит комп. Для теста hdd использую 3 утилиты: smartctl из пакета smartmontools hdparm badblocks из пакета e2fsprogs Все тесты проводить на НЕ смонтированном hdd. smartctl: # smartctl -a /dev/sdX отсюда интересует несколько параметров: 5 Reallocated_Sector_Ct - указывает на количество использованных запасных блоков, заложенных \"про запас\" в случае когда hdd начинает сыпаться; 9 Power_On_Hours - название говорит само за себя, сколько бедный hdd отмаслал часов; hdparm: # hdparm -t /dev/sdX Команда покажет, скорость записи на hdd. Данную команду необходимо выполнить несколько раз, для б/м достоверной картины. badblocks: # badblocks -vs /dev/sdX Команда с говорящим названием покажет, сколько битых блоком имеет поверхность hdd. Пояснение к ключам: -w — разрешает запись на жесткий диск, не заботясь о сохранности данных. Никогда не используйте для дисков, на которых есть нужная вам информация! Несколько ускоряет тестирование. -v — выводит информацию об ошибках на экран. -s — выводит статус выполнения проверки в %. Для жесткого диска большого объема проверка может длиться несколько часов, поэтому, возможно, вам захочется наблюдать за ходом выполнения в процентах. Эта опция несколько замедляет работу утилиты, поэтому, если вы запускаете проверку, например, на ночь, эту опцию можно опустить. стырено отсюда","url":"https://stonedastronaut.github.io/diagnostika-hdd-sredstvami-unix.html","title":"Диагностика hdd средствами unix","tags":"misc"},{"text":"После теста hdd можно определить, пора ли менять диск или нет. Если время пришло, то тогда необходимо перенести со старого жесткого всю инфу на новый. Из гуглежа, стало ясно, чо использование обычного dd не \"кошегно\". Ъ использовать GNU ddrescue . Команда для backup'а выглядит следующим образом: # ddrescue /dev/sdX /pth_to_backup/disk.img /pth_to_backup/disk.img.log Можно делать backup как раздела, так и всего hdd. Для просмотра содержимого раздела используем следующую команду: # mount -o loop /pth_to_backup/drive.img /mnt А для образа физического диска : # losetup --partscan /dev/loop0 drive.img # mount /dev/loop0p2 /mnt или, # kpartx -a /dev/loop0 drive.img # mount /dev/mapper/loop0p2 /mnt в зависимости от дистра. Восстановление из образа: # ddrescue --force disk.img /dev/sdxX disk.img.log !!! раздел на который идет восстановление должен быть НЕ меньше файла-образа стырено изхабра","url":"https://stonedastronaut.github.io/backup-hdd-sredstvami-gnulinux.html","title":"Backup hdd средствами GNU/Linux","tags":"misc"},{"text":"Сравнение каталогов утилитой diff осуществляется следующим образом: $ diff -urN dir1 dir2 > out.diff $ mc -e out.diff где ключи diff -u унифицированный метод -r рекурсивно -N При сравнении каталогов, если файл найден только в одном каталоге, считает что он находится и во втором, но является пустым. См. \"Сравнение каталогов\". Возможно использование 'diff' для сравнения некоторых или всех файлов в двух каталогах. Когда оба аргумента-имена файлов для 'diff' ­ каталоги, он сравнивает каждый файл, содержащийся в обоих каталогах, в алфавитном порядке имен файлов. Обычно 'diff' не упоминает о парах неотличающихся файлов, но с опцией '-s' или '--report-identical-files', он будет сообщать и о таких парах. Обычно 'diff' сообщает о подкаталогах, общих для обоих каталогов, не сравнивая файлы в них, но с помощью опции '-r' или '--recursive', он бужет сравнивать соответствующие файлы в дереве каталогов, опускаясь до самых глубоких каталогов. Для имен файлов, содержащихся только в одном каталоге, 'diff' обычно не показывает текста этих файлов, сообщая только, что файлы находятся в одном каталоге и отсутствуют в другом. Можно заставить 'diff' поступать так, как если бы соответствующие файлы существовали и в другом каталоге, но являлись пустыми, тогда в результатах будет присутствовать полный текст таких файлов. (Такие отличия будут рассматриваться как вставки или удаления, в зависимости от того существует файл в первой или второй директории.) Чтобы добиться этого используйте опцию '-N' или '--new-file'. Если в более старом каталоге содержится один или более больших файлов, не содержащихся в более новом, можно уменьшить patch с помощью опции '-P' или '--unidirectional-new-file' вместо '-N'. Эта опция подобна '-N', за исключением того, что она вставляет только содержимое файлов, появившихся во втором каталоге, а не в первом (т.е. добавленных файлов). В начале patch пишется инструкция для пользователей, применяющих patch, - стереть удаленные файлы, перед применением (см. подробнее о составлении patch-ей: \"Составление patch-ей\"). Для игнорирования некоторых файлов при сравнении каталогов, используйте опцию '-x PATTERN' или '--exclude=PATTERN'. Эта опция игнорирует все файлы или поддиректории, чьи базовые имена соответствуют шаблону оболочки PATTERN. В отличие от оболочки, точка в начале имени файла рассматривается так же, как символ . Следует заключать PATTERN в апострофы, чтобы оболочка не истоловала их неправильно. Например, опция '-x ' .[ao]'' игнорирует все файлы, имена которых заканчиваются на '.a' или '.o'. Информация, указанная в этой опции, сохраняется, если ее использовать несколько раз. Например, использование опций '-x 'RCS' -x '*,v'' задает игнорирование всех файлов и подкаталогов, имеющих имя 'RCS' или заканчивающихся на ',v'. Если необходимо использовать эту опцию по несколько раз, можно вместо этого поместить шаблоны в файл, по одному на строку и использовать опцию '-X FILE' или '--exclude-from=FILE'. Если два каталога находились в процессе сравнения и этот процесс был прерван, позже возможно вернуться к сравнению и продолжить его с того же места с помощью опции '-S FILE' или '--starting-file=FILE'. После этого сравниваться будут только файл и FILE и следующеи за ним в алфавитном порядке, в верхнем уровне директории. Стырено с rus-linux.net и genaev.com","url":"https://stonedastronaut.github.io/sravnenie-katalogov-v-unix-diff.html","title":"Сравнение каталогов в *unix. diff","tags":"misc"},{"text":"Чтобы создать wiki страницу в vk.com, необходимо перейти по ссылке следующего вида: http://vk.com/pages?oid=-{Community_id}&p={Name_of_page} где {Community_id} - id паблика или группы, а {Name_of_page} - название страницы, которую необходио создать.","url":"https://stonedastronaut.github.io/kak-sozdat-wiki-stranitsu-v-vkcom.html","title":"Как создать wiki-страницу в vk.com","tags":"misc"},{"text":"From The Psychology of Computer Programming, written in 1971, here are The Ten Commandments of Egoless Programming: Understand and accept that you will make mistakes. The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry. We can, and should, learn, laugh, and move on. You are not your code. Remember that the entire point of a review is to find problems, and problems will be found. Don't take it personally when one is uncovered. No matter how much \"karate\" you know, someone else will always know more. Such an individual can teach you some new moves if you ask. Seek and accept input from others, especially when you think it's not needed. Don't rewrite code without consultation. There's a fine line between \"fixing code\" and \"rewriting code.\" Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer. Treat people who know less than you with respect, deference, and patience. Non-technical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don't reinforce this stereotype with anger and impatience. The only constant in the world is change. Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, rather than some serious inconvenience to be fought. The only true authority stems from knowledge, not from position. Knowledge engenders authority, and authority engenders respect – so if you want respect in an egoless environment, cultivate knowledge. Fight for what you believe, but gracefully accept defeat. Understand that sometimes your ideas will be overruled. Even if you are right, don't take revenge or say \"I told you so.\" Never make your dearly departed idea a martyr or rallying cry. Don't be \"the coder in the corner.\" Don't be the person in the dark office emerging only for soda. The coder in the corner is out of sight, out of touch, and out of control. This person has no voice in an open, collaborative environment. Get involved in conversations, and be a participant in your office community. Critique code instead of people – be kind to the coder, not to the code. As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc. I keep this list around even today. It has already helped me be a better programmer. Sometimes I imagine what other bits of advice he'd give me were he still around. While I cannot know, I feel sure he'd be proud so long as I keep these in mind. © Stephen Wyatt Bush","url":"https://stonedastronaut.github.io/10-zapovedei-bezlichnogo-programmirovaniia-en.html","title":"10 заповедей безличного программирования","tags":"misc"}]}